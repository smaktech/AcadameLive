{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\interaction\\\\ControlPanel.js\";\nimport PropTypes from 'prop-types';\nimport { memo } from 'react'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Box, Switch, InputBase, Typography } from '@mui/material'; // utils\n\nimport cssStyles from '../../../utils/cssStyles'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return { ...cssStyles().bgBlur({\n      color: theme.palette.grey[900]\n    }),\n    zIndex: 9,\n    minWidth: 200,\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    padding: theme.spacing(2),\n    borderRadius: theme.shape.borderRadius\n  };\n});\nconst RowStyle = styled('div')(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    display: 'flex',\n    alignItems: 'center',\n    textTransform: 'capitalize',\n    justifyContent: 'space-between',\n    color: theme.palette.common.white,\n    '&:not(:last-of-type)': {\n      marginBottom: theme.spacing(1)\n    }\n  };\n}); // ----------------------------------------------------------------------\n\nconst EVENTS = [{\n  label: 'Dragging',\n  value: 'isDragging'\n}, {\n  label: 'Transition',\n  value: 'inTransition'\n}, {\n  label: 'Panning',\n  value: 'isPanning'\n}, {\n  label: 'Rotating',\n  value: 'isRotating'\n}, {\n  label: 'Zooming',\n  value: 'isZooming'\n}];\nconst camelPattern = /(^|[A-Z])[a-z]*/g;\n\nfunction formatSettingName(name) {\n  return name.match(camelPattern).join(' ');\n}\n\nControlPanel.propTypes = {\n  settings: PropTypes.object,\n  interactionState: PropTypes.object,\n  onChange: PropTypes.func\n};\n\nfunction ControlPanel(_ref3) {\n  let {\n    settings,\n    interactionState,\n    onChange\n  } = _ref3;\n\n  const renderSetting = (name, value) => {\n    switch (typeof value) {\n      case 'boolean':\n        return /*#__PURE__*/_jsxDEV(RowStyle, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: formatSettingName(name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            size: \"small\",\n            checked: value,\n            onChange: event => onChange(name, event.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this);\n\n      case 'number':\n        return /*#__PURE__*/_jsxDEV(RowStyle, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: formatSettingName(name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n            value: value,\n            onChange: event => onChange(name, Number(event.target.value)),\n            inputProps: {\n              type: 'number'\n            },\n            sx: {\n              '& input': {\n                py: 0.25,\n                width: 40,\n                fontSize: 14,\n                borderRadius: 0.5,\n                textAlign: 'center',\n                bgcolor: 'grey.50012',\n                color: 'common.white'\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    children: [Object.keys(settings).map(name => renderSetting(name, settings[name])), EVENTS.map(event => /*#__PURE__*/_jsxDEV(RowStyle, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: event.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 22,\n          height: 22,\n          borderRadius: 1,\n          bgcolor: interactionState[event.value] ? 'primary.main' : 'error.main'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, event.label, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ControlPanel;\nexport default _c2 = /*#__PURE__*/memo(ControlPanel);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlPanel\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/interaction/ControlPanel.js"],"names":["PropTypes","memo","styled","Box","Switch","InputBase","Typography","cssStyles","RootStyle","theme","bgBlur","color","palette","grey","zIndex","minWidth","position","top","spacing","right","padding","borderRadius","shape","RowStyle","display","alignItems","textTransform","justifyContent","common","white","marginBottom","EVENTS","label","value","camelPattern","formatSettingName","name","match","join","ControlPanel","propTypes","settings","object","interactionState","onChange","func","renderSetting","event","target","checked","Number","type","py","width","fontSize","textAlign","bgcolor","Object","keys","map","height"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { memo } from 'react';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Switch, InputBase, Typography } from '@mui/material';\n// utils\nimport cssStyles from '../../../utils/cssStyles';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  ...cssStyles().bgBlur({ color: theme.palette.grey[900] }),\n  zIndex: 9,\n  minWidth: 200,\n  position: 'absolute',\n  top: theme.spacing(1),\n  right: theme.spacing(1),\n  padding: theme.spacing(2),\n  borderRadius: theme.shape.borderRadius,\n}));\n\nconst RowStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  textTransform: 'capitalize',\n  justifyContent: 'space-between',\n  color: theme.palette.common.white,\n  '&:not(:last-of-type)': {\n    marginBottom: theme.spacing(1),\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst EVENTS = [\n  { label: 'Dragging', value: 'isDragging' },\n  { label: 'Transition', value: 'inTransition' },\n  { label: 'Panning', value: 'isPanning' },\n  { label: 'Rotating', value: 'isRotating' },\n  { label: 'Zooming', value: 'isZooming' },\n];\n\nconst camelPattern = /(^|[A-Z])[a-z]*/g;\n\nfunction formatSettingName(name) {\n  return name.match(camelPattern).join(' ');\n}\n\nControlPanel.propTypes = {\n  settings: PropTypes.object,\n  interactionState: PropTypes.object,\n  onChange: PropTypes.func,\n};\n\nfunction ControlPanel({ settings, interactionState, onChange }) {\n  const renderSetting = (name, value) => {\n    switch (typeof value) {\n      case 'boolean':\n        return (\n          <RowStyle key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <Switch size=\"small\" checked={value} onChange={(event) => onChange(name, event.target.checked)} />\n          </RowStyle>\n        );\n      case 'number':\n        return (\n          <RowStyle key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <InputBase\n              value={value}\n              onChange={(event) => onChange(name, Number(event.target.value))}\n              inputProps={{ type: 'number' }}\n              sx={{\n                '& input': {\n                  py: 0.25,\n                  width: 40,\n                  fontSize: 14,\n                  borderRadius: 0.5,\n                  textAlign: 'center',\n                  bgcolor: 'grey.50012',\n                  color: 'common.white',\n                },\n              }}\n            />\n          </RowStyle>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <RootStyle>\n      {Object.keys(settings).map((name) => renderSetting(name, settings[name]))}\n\n      {EVENTS.map((event) => (\n        <RowStyle key={event.label}>\n          <Typography variant=\"body2\">{event.label}</Typography>\n          <Box\n            sx={{\n              width: 22,\n              height: 22,\n              borderRadius: 1,\n              bgcolor: interactionState[event.value] ? 'primary.main' : 'error.main',\n            }}\n          />\n        </RowStyle>\n      ))}\n    </RootStyle>\n  );\n}\n\nexport default memo(ControlPanel);\n"]},"metadata":{},"sourceType":"module"}