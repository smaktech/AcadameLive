{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\utils\\\\getFileFormat.js\";\n// components\nimport Image from '../components/Image';\nimport Iconify from '../components/Iconify'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FORMAT_IMG = ['jpg', 'jpeg', 'gif', 'bmp', 'png'];\nconst FORMAT_VIDEO = ['m4v', 'avi', 'mpg', 'mp4', 'webm'];\nconst FORMAT_WORD = ['doc', 'docx'];\nconst FORMAT_EXCEL = ['xls', 'xlsx'];\nconst FORMAT_POWERPOINT = ['ppt', 'pptx'];\nconst FORMAT_PDF = ['pdf'];\nconst FORMAT_PHOTOSHOP = ['psd'];\nconst FORMAT_ILLUSTRATOR = ['ai', 'esp'];\nexport function getFileType() {\n  let fileUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return fileUrl && fileUrl.split('.').pop() || '';\n}\nexport function getFileName(fileUrl) {\n  return fileUrl.substring(fileUrl.lastIndexOf('/') + 1).replace(/\\.[^/.]+$/, '');\n}\nexport function getFileFullName(fileUrl) {\n  return fileUrl.split('/').pop();\n}\nexport function getFileFormat(fileUrl) {\n  let format;\n\n  switch (fileUrl.includes(getFileType(fileUrl))) {\n    case FORMAT_IMG.includes(getFileType(fileUrl)):\n      format = 'image';\n      break;\n\n    case FORMAT_VIDEO.includes(getFileType(fileUrl)):\n      format = 'video';\n      break;\n\n    case FORMAT_WORD.includes(getFileType(fileUrl)):\n      format = 'word';\n      break;\n\n    case FORMAT_EXCEL.includes(getFileType(fileUrl)):\n      format = 'excel';\n      break;\n\n    case FORMAT_POWERPOINT.includes(getFileType(fileUrl)):\n      format = 'powerpoint';\n      break;\n\n    case FORMAT_PDF.includes(getFileType(fileUrl)):\n      format = 'pdf';\n      break;\n\n    case FORMAT_PHOTOSHOP.includes(getFileType(fileUrl)):\n      format = 'photoshop';\n      break;\n\n    case FORMAT_ILLUSTRATOR.includes(getFileType(fileUrl)):\n      format = 'illustrator';\n      break;\n\n    default:\n      format = getFileType(fileUrl);\n  }\n\n  return format;\n}\n\nconst getIcon = name => /*#__PURE__*/_jsxDEV(Image, {\n  src: `https://minimal-assets-api.vercel.app/assets/icons/file/${name}.svg`,\n  alt: name,\n  sx: {\n    width: 28,\n    height: 28\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 3\n}, this);\n\nexport function getFileThumb(fileUrl) {\n  let thumb;\n\n  switch (getFileFormat(fileUrl)) {\n    case 'video':\n      thumb = getIcon('format_video');\n      break;\n\n    case 'word':\n      thumb = getIcon('format_word');\n      break;\n\n    case 'excel':\n      thumb = getIcon('format_excel');\n      break;\n\n    case 'powerpoint':\n      thumb = getIcon('format_powerpoint');\n      break;\n\n    case 'pdf':\n      thumb = getIcon('format_pdf');\n      break;\n\n    case 'photoshop':\n      thumb = getIcon('format_photoshop');\n      break;\n\n    case 'illustrator':\n      thumb = getIcon('format_ai');\n      break;\n\n    case 'image':\n      thumb = /*#__PURE__*/_jsxDEV(Image, {\n        src: fileUrl,\n        alt: fileUrl,\n        sx: {\n          height: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }, this);\n      break;\n\n    default:\n      thumb = /*#__PURE__*/_jsxDEV(Iconify, {\n        icon: 'eva:file-fill',\n        sx: {\n          width: 28,\n          height: 28\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }, this);\n  }\n\n  return thumb;\n}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/utils/getFileFormat.js"],"names":["Image","Iconify","FORMAT_IMG","FORMAT_VIDEO","FORMAT_WORD","FORMAT_EXCEL","FORMAT_POWERPOINT","FORMAT_PDF","FORMAT_PHOTOSHOP","FORMAT_ILLUSTRATOR","getFileType","fileUrl","split","pop","getFileName","substring","lastIndexOf","replace","getFileFullName","getFileFormat","format","includes","getIcon","name","width","height","getFileThumb","thumb"],"mappings":"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","sourcesContent":["// components\nimport Image from '../components/Image';\nimport Iconify from '../components/Iconify';\n\n// ----------------------------------------------------------------------\n\nconst FORMAT_IMG = ['jpg', 'jpeg', 'gif', 'bmp', 'png'];\nconst FORMAT_VIDEO = ['m4v', 'avi', 'mpg', 'mp4', 'webm'];\nconst FORMAT_WORD = ['doc', 'docx'];\nconst FORMAT_EXCEL = ['xls', 'xlsx'];\nconst FORMAT_POWERPOINT = ['ppt', 'pptx'];\nconst FORMAT_PDF = ['pdf'];\nconst FORMAT_PHOTOSHOP = ['psd'];\nconst FORMAT_ILLUSTRATOR = ['ai', 'esp'];\n\nexport function getFileType(fileUrl = '') {\n  return (fileUrl && fileUrl.split('.').pop()) || '';\n}\n\nexport function getFileName(fileUrl) {\n  return fileUrl.substring(fileUrl.lastIndexOf('/') + 1).replace(/\\.[^/.]+$/, '');\n}\n\nexport function getFileFullName(fileUrl) {\n  return fileUrl.split('/').pop();\n}\n\nexport function getFileFormat(fileUrl) {\n  let format;\n\n  switch (fileUrl.includes(getFileType(fileUrl))) {\n    case FORMAT_IMG.includes(getFileType(fileUrl)):\n      format = 'image';\n      break;\n    case FORMAT_VIDEO.includes(getFileType(fileUrl)):\n      format = 'video';\n      break;\n    case FORMAT_WORD.includes(getFileType(fileUrl)):\n      format = 'word';\n      break;\n    case FORMAT_EXCEL.includes(getFileType(fileUrl)):\n      format = 'excel';\n      break;\n    case FORMAT_POWERPOINT.includes(getFileType(fileUrl)):\n      format = 'powerpoint';\n      break;\n    case FORMAT_PDF.includes(getFileType(fileUrl)):\n      format = 'pdf';\n      break;\n    case FORMAT_PHOTOSHOP.includes(getFileType(fileUrl)):\n      format = 'photoshop';\n      break;\n    case FORMAT_ILLUSTRATOR.includes(getFileType(fileUrl)):\n      format = 'illustrator';\n      break;\n    default:\n      format = getFileType(fileUrl);\n  }\n\n  return format;\n}\n\nconst getIcon = (name) => (\n  <Image\n    src={`https://minimal-assets-api.vercel.app/assets/icons/file/${name}.svg`}\n    alt={name}\n    sx={{ width: 28, height: 28 }}\n  />\n);\n\nexport function getFileThumb(fileUrl) {\n  let thumb;\n  switch (getFileFormat(fileUrl)) {\n    case 'video':\n      thumb = getIcon('format_video');\n      break;\n    case 'word':\n      thumb = getIcon('format_word');\n      break;\n    case 'excel':\n      thumb = getIcon('format_excel');\n      break;\n    case 'powerpoint':\n      thumb = getIcon('format_powerpoint');\n      break;\n    case 'pdf':\n      thumb = getIcon('format_pdf');\n      break;\n    case 'photoshop':\n      thumb = getIcon('format_photoshop');\n      break;\n    case 'illustrator':\n      thumb = getIcon('format_ai');\n      break;\n    case 'image':\n      thumb = <Image src={fileUrl} alt={fileUrl} sx={{ height: 1 }} />;\n      break;\n    default:\n      thumb = <Iconify icon={'eva:file-fill'} sx={{ width: 28, height: 28 }} />;\n  }\n  return thumb;\n}\n"]},"metadata":{},"sourceType":"module"}