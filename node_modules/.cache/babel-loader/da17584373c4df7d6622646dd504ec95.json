{"ast":null,"code":"// @mui\nimport{Table,TableRow,TableHead,TableBody,TableCell,TableContainer}from'@mui/material';// components\nimport Scrollbar from'../../../../../components/Scrollbar';//\nimport CollapsibleTableRow from'./CollapsibleTableRow';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function createData(name,calories,fat,carbs,protein,price){return{name:name,calories:calories,fat:fat,carbs:carbs,protein:protein,price:price,history:[{date:'2020-01-05',customerId:'11091700',amount:3},{date:'2020-01-02',customerId:'Anonymous',amount:1}]};}var COLLAPSIBLE_TABLE=[createData('Frozen yoghurt',159,6.0,24,4.0,3.99),createData('Ice cream sandwich',237,9.0,37,4.3,4.99),createData('Eclair',262,16.0,24,6.0,3.79),createData('Cupcake',305,3.7,67,4.3,2.5),createData('Gingerbread',356,16.0,49,3.9,1.5)];export default function CollapsibleTable(){return/*#__PURE__*/_jsx(Scrollbar,{children:/*#__PURE__*/_jsx(TableContainer,{sx:{minWidth:800,mt:3},children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{}),/*#__PURE__*/_jsx(TableCell,{children:\"Dessert (100g serving)\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Calories\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Fat\\xA0(g)\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Carbs\\xA0(g)\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Protein\\xA0(g)\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:COLLAPSIBLE_TABLE.map(function(row){return/*#__PURE__*/_jsx(CollapsibleTableRow,{row:row},row.name);})})]})})});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/overview/mui/table/collapsible-table/index.js"],"names":["Table","TableRow","TableHead","TableBody","TableCell","TableContainer","Scrollbar","CollapsibleTableRow","createData","name","calories","fat","carbs","protein","price","history","date","customerId","amount","COLLAPSIBLE_TABLE","CollapsibleTable","minWidth","mt","map","row"],"mappings":"AAAA;AACA,OAASA,KAAT,CAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,SAArC,CAAgDC,SAAhD,CAA2DC,cAA3D,KAAiF,eAAjF,CACA;AACA,MAAOC,CAAAA,SAAP,KAAsB,qCAAtB,CACA;AACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CAEA;wFAEA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,IAApB,CAA0BC,QAA1B,CAAoCC,GAApC,CAAyCC,KAAzC,CAAgDC,OAAhD,CAAyDC,KAAzD,CAAgE,CACrE,MAAO,CACLL,IAAI,CAAJA,IADK,CAELC,QAAQ,CAARA,QAFK,CAGLC,GAAG,CAAHA,GAHK,CAILC,KAAK,CAALA,KAJK,CAKLC,OAAO,CAAPA,OALK,CAMLC,KAAK,CAALA,KANK,CAOLC,OAAO,CAAE,CACP,CACEC,IAAI,CAAE,YADR,CAEEC,UAAU,CAAE,UAFd,CAGEC,MAAM,CAAE,CAHV,CADO,CAMP,CACEF,IAAI,CAAE,YADR,CAEEC,UAAU,CAAE,WAFd,CAGEC,MAAM,CAAE,CAHV,CANO,CAPJ,CAAP,CAoBD,CAED,GAAMC,CAAAA,iBAAiB,CAAG,CACxBX,UAAU,CAAC,gBAAD,CAAmB,GAAnB,CAAwB,GAAxB,CAA6B,EAA7B,CAAiC,GAAjC,CAAsC,IAAtC,CADc,CAExBA,UAAU,CAAC,oBAAD,CAAuB,GAAvB,CAA4B,GAA5B,CAAiC,EAAjC,CAAqC,GAArC,CAA0C,IAA1C,CAFc,CAGxBA,UAAU,CAAC,QAAD,CAAW,GAAX,CAAgB,IAAhB,CAAsB,EAAtB,CAA0B,GAA1B,CAA+B,IAA/B,CAHc,CAIxBA,UAAU,CAAC,SAAD,CAAY,GAAZ,CAAiB,GAAjB,CAAsB,EAAtB,CAA0B,GAA1B,CAA+B,GAA/B,CAJc,CAKxBA,UAAU,CAAC,aAAD,CAAgB,GAAhB,CAAqB,IAArB,CAA2B,EAA3B,CAA+B,GAA/B,CAAoC,GAApC,CALc,CAA1B,CAQA,cAAe,SAASY,CAAAA,gBAAT,EAA4B,CACzC,mBACE,KAAC,SAAD,wBACE,KAAC,cAAD,EAAgB,EAAE,CAAE,CAAEC,QAAQ,CAAE,GAAZ,CAAiBC,EAAE,CAAE,CAArB,CAApB,uBACE,MAAC,KAAD,yBACE,KAAC,SAAD,wBACE,MAAC,QAAD,yBACE,KAAC,SAAD,IADF,cAEE,KAAC,SAAD,qCAFF,cAGE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,sBAHF,cAIE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,wBAJF,cAKE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,0BALF,cAME,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,4BANF,GADF,EADF,cAWE,KAAC,SAAD,WACGH,iBAAiB,CAACI,GAAlB,CAAsB,SAACC,GAAD,qBACrB,KAAC,mBAAD,EAAoC,GAAG,CAAEA,GAAzC,EAA0BA,GAAG,CAACf,IAA9B,CADqB,EAAtB,CADH,EAXF,GADF,EADF,EADF,CAuBD","sourcesContent":["// @mui\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableContainer } from '@mui/material';\n// components\nimport Scrollbar from '../../../../../components/Scrollbar';\n//\nimport CollapsibleTableRow from './CollapsibleTableRow';\n\n// ----------------------------------------------------------------------\n\nexport function createData(name, calories, fat, carbs, protein, price) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n    price,\n    history: [\n      {\n        date: '2020-01-05',\n        customerId: '11091700',\n        amount: 3,\n      },\n      {\n        date: '2020-01-02',\n        customerId: 'Anonymous',\n        amount: 1,\n      },\n    ],\n  };\n}\n\nconst COLLAPSIBLE_TABLE = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),\n  createData('Eclair', 262, 16.0, 24, 6.0, 3.79),\n  createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),\n];\n\nexport default function CollapsibleTable() {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800, mt: 3 }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n              <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {COLLAPSIBLE_TABLE.map((row) => (\n              <CollapsibleTableRow key={row.name} row={row} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}