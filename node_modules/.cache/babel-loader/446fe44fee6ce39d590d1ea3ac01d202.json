{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\kanban\\\\KanbanColumn.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useSelector } from 'react-redux';\nimport { Droppable, Draggable } from 'react-beautiful-dnd'; // @mui\n\nimport { Paper, Stack, Button } from '@mui/material'; // redux\n\nimport { useDispatch } from '../../../redux/store';\nimport { deleteColumn, updateColumn, addTask, deleteTask } from '../../../redux/slices/kanban'; // components\n\nimport Iconify from '../../../components/Iconify'; //\n\nimport KanbanAddTask from './KanbanTaskAdd';\nimport KanbanTaskCard from './KanbanTaskCard';\nimport KanbanColumnToolBar from './KanbanColumnToolBar'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nKanbanColumn.propTypes = {\n  column: PropTypes.object,\n  index: PropTypes.number\n};\nexport default function KanbanColumn(_ref) {\n  _s();\n\n  let {\n    column,\n    index\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    board\n  } = useSelector(state => state.kanban);\n  const [open, setOpen] = useState(false);\n  const {\n    name,\n    cardIds,\n    id\n  } = column;\n\n  const handleOpenAddTask = () => {\n    setOpen(prev => !prev);\n  };\n\n  const handleCloseAddTask = () => {\n    setOpen(false);\n  };\n\n  const handleDeleteTask = cardId => {\n    dispatch(deleteTask({\n      cardId,\n      columnId: id\n    }));\n    enqueueSnackbar('Delete success', {\n      variant: 'success'\n    });\n  };\n\n  const handleUpdateColumn = async newName => {\n    try {\n      if (newName !== name) {\n        dispatch(updateColumn(id, { ...column,\n          name: newName\n        }));\n        enqueueSnackbar('Update success', {\n          variant: 'success'\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDeleteColumn = async () => {\n    try {\n      dispatch(deleteColumn(id));\n      enqueueSnackbar('Delete success', {\n        variant: 'success'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleAddTask = task => {\n    dispatch(addTask({\n      card: task,\n      columnId: id\n    }));\n    enqueueSnackbar('Add success', {\n      variant: 'success'\n    });\n    handleCloseAddTask();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: id,\n    index: index,\n    children: provided => /*#__PURE__*/_jsxDEV(Paper, { ...provided.draggableProps,\n      ref: provided.innerRef,\n      variant: \"outlined\",\n      sx: {\n        px: 2,\n        bgcolor: 'grey.5008'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        ...provided.dragHandleProps,\n        children: [/*#__PURE__*/_jsxDEV(KanbanColumnToolBar, {\n          columnName: name,\n          onDelete: handleDeleteColumn,\n          onUpdate: handleUpdateColumn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: id,\n          type: \"task\",\n          children: provided => /*#__PURE__*/_jsxDEV(Stack, {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            spacing: 2,\n            width: 280,\n            children: [cardIds.map((cardId, index) => /*#__PURE__*/_jsxDEV(KanbanTaskCard, {\n              onDeleteTask: handleDeleteTask,\n              card: board === null || board === void 0 ? void 0 : board.cards[cardId],\n              index: index\n            }, cardId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          sx: {\n            pb: 3\n          },\n          children: [open && /*#__PURE__*/_jsxDEV(KanbanAddTask, {\n            onAddTask: handleAddTask,\n            onCloseAddTask: handleCloseAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            size: \"large\",\n            color: \"inherit\",\n            startIcon: /*#__PURE__*/_jsxDEV(Iconify, {\n              icon: 'eva:plus-fill',\n              width: 20,\n              height: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 28\n            }, this),\n            onClick: handleOpenAddTask,\n            sx: {\n              fontSize: 14\n            },\n            children: \"Add Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(KanbanColumn, \"+4/0KZFzHdQaHwQGhkVgkWAuXKI=\", false, function () {\n  return [useDispatch, useSnackbar, useSelector];\n});\n\n_c = KanbanColumn;\n\nvar _c;\n\n$RefreshReg$(_c, \"KanbanColumn\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/kanban/KanbanColumn.js"],"names":["PropTypes","useState","useSnackbar","useSelector","Droppable","Draggable","Paper","Stack","Button","useDispatch","deleteColumn","updateColumn","addTask","deleteTask","Iconify","KanbanAddTask","KanbanTaskCard","KanbanColumnToolBar","KanbanColumn","propTypes","column","object","index","number","dispatch","enqueueSnackbar","board","state","kanban","open","setOpen","name","cardIds","id","handleOpenAddTask","prev","handleCloseAddTask","handleDeleteTask","cardId","columnId","variant","handleUpdateColumn","newName","error","console","handleDeleteColumn","handleAddTask","task","card","provided","draggableProps","innerRef","px","bgcolor","dragHandleProps","droppableProps","map","cards","placeholder","pb","fontSize"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useSelector } from 'react-redux';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n// @mui\nimport { Paper, Stack, Button } from '@mui/material';\n// redux\nimport { useDispatch } from '../../../redux/store';\nimport { deleteColumn, updateColumn, addTask, deleteTask } from '../../../redux/slices/kanban';\n// components\nimport Iconify from '../../../components/Iconify';\n//\nimport KanbanAddTask from './KanbanTaskAdd';\nimport KanbanTaskCard from './KanbanTaskCard';\nimport KanbanColumnToolBar from './KanbanColumnToolBar';\n\n// ----------------------------------------------------------------------\n\nKanbanColumn.propTypes = {\n  column: PropTypes.object,\n  index: PropTypes.number,\n};\n\nexport default function KanbanColumn({ column, index }) {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { board } = useSelector((state) => state.kanban);\n  const [open, setOpen] = useState(false);\n\n  const { name, cardIds, id } = column;\n\n  const handleOpenAddTask = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const handleCloseAddTask = () => {\n    setOpen(false);\n  };\n\n  const handleDeleteTask = (cardId) => {\n    dispatch(deleteTask({ cardId, columnId: id }));\n    enqueueSnackbar('Delete success', { variant: 'success' });\n  };\n\n  const handleUpdateColumn = async (newName) => {\n    try {\n      if (newName !== name) {\n        dispatch(updateColumn(id, { ...column, name: newName }));\n        enqueueSnackbar('Update success', { variant: 'success' });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDeleteColumn = async () => {\n    try {\n      dispatch(deleteColumn(id));\n      enqueueSnackbar('Delete success', { variant: 'success' });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleAddTask = (task) => {\n    dispatch(addTask({ card: task, columnId: id }));\n    enqueueSnackbar('Add success', { variant: 'success' });\n    handleCloseAddTask();\n  };\n\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <Paper\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          variant=\"outlined\"\n          sx={{ px: 2, bgcolor: 'grey.5008' }}\n        >\n          <Stack spacing={3} {...provided.dragHandleProps}>\n            <KanbanColumnToolBar columnName={name} onDelete={handleDeleteColumn} onUpdate={handleUpdateColumn} />\n\n            <Droppable droppableId={id} type=\"task\">\n              {(provided) => (\n                <Stack ref={provided.innerRef} {...provided.droppableProps} spacing={2} width={280}>\n                  {cardIds.map((cardId, index) => (\n                    <KanbanTaskCard\n                      key={cardId}\n                      onDeleteTask={handleDeleteTask}\n                      card={board?.cards[cardId]}\n                      index={index}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </Stack>\n              )}\n            </Droppable>\n\n            <Stack spacing={2} sx={{ pb: 3 }}>\n              {open && <KanbanAddTask onAddTask={handleAddTask} onCloseAddTask={handleCloseAddTask} />}\n\n              <Button\n                fullWidth\n                size=\"large\"\n                color=\"inherit\"\n                startIcon={<Iconify icon={'eva:plus-fill'} width={20} height={20} />}\n                onClick={handleOpenAddTask}\n                sx={{ fontSize: 14 }}\n              >\n                Add Task\n              </Button>\n            </Stack>\n          </Stack>\n        </Paper>\n      )}\n    </Draggable>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}