{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // ----------------------------------------------------------------------\n\nexport default function useCountdown(date) {\n  _s();\n\n  const [countdown, setCountdown] = useState({\n    days: '00',\n    hours: '00',\n    minutes: '00',\n    seconds: '00'\n  });\n  useEffect(() => {\n    const interval = setInterval(() => setNewTime(), 1000);\n    return () => clearInterval(interval); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setNewTime = () => {\n    const startTime = date;\n    const endTime = new Date();\n    const distanceToNow = startTime - endTime;\n    const getDays = Math.floor(distanceToNow / (1000 * 60 * 60 * 24));\n    const getHours = `0${Math.floor(distanceToNow % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))}`.slice(-2);\n    const getMinutes = `0${Math.floor(distanceToNow % (1000 * 60 * 60) / (1000 * 60))}`.slice(-2);\n    const getSeconds = `0${Math.floor(distanceToNow % (1000 * 60) / 1000)}`.slice(-2);\n    setCountdown({\n      days: getDays || '000',\n      hours: getHours || '000',\n      minutes: getMinutes || '000',\n      seconds: getSeconds || '000'\n    });\n  };\n\n  return countdown;\n} // Usage\n// const countdown = useCountdown(new Date('07/07/2022 21:30'));\n\n_s(useCountdown, \"oWgZJ9m7wdsfCcFMeZ+1eBIOK5E=\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/hooks/useCountdown.js"],"names":["useState","useEffect","useCountdown","date","countdown","setCountdown","days","hours","minutes","seconds","interval","setInterval","setNewTime","clearInterval","startTime","endTime","Date","distanceToNow","getDays","Math","floor","getHours","slice","getMinutes","getSeconds"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAAA;;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC;AACzCM,IAAAA,IAAI,EAAE,IADmC;AAEzCC,IAAAA,KAAK,EAAE,IAFkC;AAGzCC,IAAAA,OAAO,EAAE,IAHgC;AAIzCC,IAAAA,OAAO,EAAE;AAJgC,GAAD,CAA1C;AAOAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAMC,UAAU,EAAjB,EAAqB,IAArB,CAA5B;AACA,WAAO,MAAMC,aAAa,CAACH,QAAD,CAA1B,CAFc,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAME,UAAU,GAAG,MAAM;AACvB,UAAME,SAAS,GAAGX,IAAlB;AACA,UAAMY,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,OAAlC;AAEA,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAa,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAxB,CAAhB;AACA,UAAMI,QAAQ,GAAI,IAAGF,IAAI,CAACC,KAAL,CAAYH,aAAa,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAd,IAA2C,OAAO,EAAP,GAAY,EAAvD,CAAX,CAAuE,EAA3E,CAA6EK,KAA7E,CAAmF,CAAC,CAApF,CAAjB;AACA,UAAMC,UAAU,GAAI,IAAGJ,IAAI,CAACC,KAAL,CAAYH,aAAa,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAd,IAAsC,OAAO,EAA7C,CAAX,CAA6D,EAAjE,CAAmEK,KAAnE,CAAyE,CAAC,CAA1E,CAAnB;AACA,UAAME,UAAU,GAAI,IAAGL,IAAI,CAACC,KAAL,CAAYH,aAAa,IAAI,OAAO,EAAX,CAAd,GAAgC,IAA3C,CAAiD,EAArD,CAAuDK,KAAvD,CAA6D,CAAC,CAA9D,CAAnB;AAEAjB,IAAAA,YAAY,CAAC;AACXC,MAAAA,IAAI,EAAEY,OAAO,IAAI,KADN;AAEXX,MAAAA,KAAK,EAAEc,QAAQ,IAAI,KAFR;AAGXb,MAAAA,OAAO,EAAEe,UAAU,IAAI,KAHZ;AAIXd,MAAAA,OAAO,EAAEe,UAAU,IAAI;AAJZ,KAAD,CAAZ;AAMD,GAhBD;;AAkBA,SAAOpB,SAAP;AACD,C,CAED;AACA;;GApCwBF,Y","sourcesContent":["import { useState, useEffect } from 'react';\n\n// ----------------------------------------------------------------------\n\nexport default function useCountdown(date) {\n  const [countdown, setCountdown] = useState({\n    days: '00',\n    hours: '00',\n    minutes: '00',\n    seconds: '00'\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => setNewTime(), 1000);\n    return () => clearInterval(interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setNewTime = () => {\n    const startTime = date;\n    const endTime = new Date();\n    const distanceToNow = startTime - endTime;\n\n    const getDays = Math.floor(distanceToNow / (1000 * 60 * 60 * 24));\n    const getHours = `0${Math.floor((distanceToNow % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))}`.slice(-2);\n    const getMinutes = `0${Math.floor((distanceToNow % (1000 * 60 * 60)) / (1000 * 60))}`.slice(-2);\n    const getSeconds = `0${Math.floor((distanceToNow % (1000 * 60)) / 1000)}`.slice(-2);\n\n    setCountdown({\n      days: getDays || '000',\n      hours: getHours || '000',\n      minutes: getMinutes || '000',\n      seconds: getSeconds || '000'\n    });\n  };\n\n  return countdown;\n}\n\n// Usage\n// const countdown = useCountdown(new Date('07/07/2022 21:30'));\n"]},"metadata":{},"sourceType":"module"}