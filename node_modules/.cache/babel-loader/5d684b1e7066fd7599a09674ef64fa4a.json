{"ast":null,"code":"import Courses from 'src/pages/courses/Courses';\nimport { description } from 'src/_mock/text';\nimport { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config';\n\nasync function getSingleAnswer(id) {\n  // console.log('request from client done');\n  var apiLink;\n  apiLink = apiUrl + '/answer/getAnswer?id=' + id; // console.log(id, 'get single answer')\n\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} // console.log('Get single answer api', data)\n//Fetch all course data using offset and limit!\n\n\nasync function getAllCourse(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/course/filterCourse';else apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function editAnswer(inputFields, ansid) {\n  const formData = new FormData();\n  formData.append('inputfields', inputFields); // formData.append('type', type)\n  // formData.append('marks', marks)\n  // formData.append('answer', answer)\n\n  formData.append('ansid', ansid); // var details = { \n  //     \"hint\":hint,\n  //     \"type\":type,\n  //     \"marks\":marks,\n  //     \"answer\":answer,\n  //     \"ansid\":ansid\n  //   };\n\n  console.log('Update Method', formData);\n  const data = await fetch(apiUrl + '/answer/editAnswer/' + ansid, {\n    method: 'PATCH',\n    headers: {//   'Accept':'application/json',\n      //   'Content-Type':'application/json'\n    },\n    body: formData // body:JSON.stringify(ans)\n\n  }).then(result => {\n    result.json().then(res => {\n      console.warn(res);\n    });\n  });\n  return data;\n} // console.log('Update data', apiUrl + `/answer/createAnswer/${id}`)\n//api function for update a course \n\n\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status, courseImage) {\n  // var details = {\n  //     \"name\": name,\n  //     \"description\": description,\n  //     \"board\": board,\n  //     \"classes\": classes,\n  //     \"subject\": subject,\n  //     \"topic\": topic,\n  //     // \"coursePicture\": coursePicture,\n  //     'status':status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //     var encodedKey = encodeURIComponent(property);\n  //     var encodedValue = encodeURIComponent(details[property]);\n  //     formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"boardID\", boardID);\n\n  if (subBoardID) {\n    formData.append(\"subBoardID\", subBoardID);\n  }\n\n  formData.append(\"classesID\", classesID);\n  formData.append(\"subjectID\", subjectID); // formData.append(\"topicIDs\", topicIDs)\n\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", courseImage);\n  const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n      // 'Content-Type': 'multipart/form-data',\n\n    },\n    // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a course \n\n\nasync function createAnswer(id, Questiontableid, inputFields, mcqFields, mcqtypeFields) {\n  //ne\n  var details = {\n    \"ID\": id,\n    \"Questiontableid\": Questiontableid,\n    \"inputfields\": JSON.stringify(inputFields),\n    \"mcqFields\": JSON.stringify(mcqFields),\n    \"mcqtypeFields\": JSON.stringify(mcqtypeFields) // \"answer\":answer,\n    // \"formula\":formula,\n    // \"type\":type,  \n\n  };\n  console.log('requsted to server');\n  console.log(details);\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/answer/createAnswer', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  console.log('check answer wwe ', apiUrl);\n  console.log(data);\n  return data;\n} //api to delete the course from the database\n\n\nasync function deleteCourse(courseID) {\n  const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular topic by sending the courdseId\n\n\nasync function getCourseById(courseID) {\n  const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\n  let obj = {\n    boardID: boardID,\n    subjectID: subjectID,\n    searchString: searchString,\n    startDate: startDate,\n    endDate: endDate,\n    sortByDate: sortByDate,\n    status: status\n  };\n  const queryString = objToQueryString(obj);\n  var apiLink;\n\n  if (queryString == null) {\n    apiLink = apiUrl + '/course/filterCourse';\n  } else {\n    apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  }\n\n  console.log(\"test call back\", queryString, obj);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get all courses of user\n\n\nasync function getAllUserCourses(userID) {\n  const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { createAnswer, getAllCourse, editAnswer, getSingleAnswer };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Answer/Answer.js"],"names":["Courses","description","apiUrl","objToQueryString","getSingleAnswer","id","apiLink","data","fetch","method","headers","Accept","then","res","json","getAllCourse","page","limit","queryString","editAnswer","inputFields","ansid","formData","FormData","append","console","log","body","result","warn","editCourse","courseID","name","boardID","subBoardID","classesID","subjectID","status","courseImage","createAnswer","Questiontableid","mcqFields","mcqtypeFields","details","JSON","stringify","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deleteCourse","getCourseById","getCourseByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserCourses","userID"],"mappings":"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","sourcesContent":["import Courses from 'src/pages/courses/Courses';\r\nimport { description } from 'src/_mock/text';\r\nimport { apiUrl } from '../../config';\r\nimport { objToQueryString } from '../../config'\r\n\r\n\r\nasync function getSingleAnswer(id) {\r\n    // console.log('request from client done');\r\n\r\n    var apiLink;\r\n\r\n    apiLink = apiUrl + '/answer/getAnswer?id=' + id\r\n\r\n    // console.log(id, 'get single answer')\r\n\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n        },\r\n\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n    // console.log('Get single answer api', data)\r\n    \r\n//Fetch all course data using offset and limit!\r\nasync function getAllCourse(page, limit) {\r\n    const queryString = objToQueryString({\r\n        page: page,\r\n        limit: limit,\r\n    })\r\n    var apiLink;\r\n    if (queryString == null)\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    else\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n} \r\nasync function editAnswer(inputFields,ansid)\r\n    {\r\n        const formData = new FormData()\r\n        formData.append('inputfields', inputFields)\r\n        // formData.append('type', type)\r\n        // formData.append('marks', marks)\r\n        // formData.append('answer', answer)\r\n        formData.append('ansid', ansid)\r\n        // var details = { \r\n        //     \"hint\":hint,\r\n        //     \"type\":type,\r\n        //     \"marks\":marks,\r\n        //     \"answer\":answer,\r\n        //     \"ansid\":ansid\r\n        //   };\r\n      \r\n      console.log('Update Method', formData);\r\n  \r\n     const data= await fetch(apiUrl + '/answer/editAnswer/' + ansid, {\r\n        method: 'PATCH',\r\n        headers:{\r\n        //   'Accept':'application/json',\r\n        //   'Content-Type':'application/json'\r\n        },\r\n        body: formData,\r\n        // body:JSON.stringify(ans)\r\n      }).then((result) => {\r\n        result.json().then((res) => {\r\n          console.warn(res)\r\n          \r\n        })\r\n      })\r\n      return data;\r\n      \r\n    }\r\n    // console.log('Update data', apiUrl + `/answer/createAnswer/${id}`)\r\n//api function for update a course \r\n\r\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status,courseImage) {\r\n    // var details = {\r\n    //     \"name\": name,\r\n    //     \"description\": description,\r\n    //     \"board\": board,\r\n    //     \"classes\": classes,\r\n    //     \"subject\": subject,\r\n    //     \"topic\": topic,\r\n    //     // \"coursePicture\": coursePicture,\r\n    //     'status':status\r\n    // };\r\n\r\n    // var formBody = [];\r\n    // for (var property in details) {\r\n    //     var encodedKey = encodeURIComponent(property);\r\n    //     var encodedValue = encodeURIComponent(details[property]);\r\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\r\n    // }\r\n    // formBody = formBody.join(\"&\");\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name)\r\n    formData.append(\"boardID\", boardID)\r\n    if (subBoardID) {\r\n        formData.append(\"subBoardID\", subBoardID)\r\n    }\r\n    formData.append(\"classesID\", classesID)\r\n    formData.append(\"subjectID\", subjectID)\r\n    // formData.append(\"topicIDs\", topicIDs)\r\n    formData.append(\"description\", description)\r\n    formData.append(\"status\", status)\r\n    formData.append(\"image\", courseImage)\r\n    const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n            // 'Content-Type': 'multipart/form-data',\r\n        },\r\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\r\n        body:formData\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api function for adding a course \r\nasync function createAnswer( id, Questiontableid, inputFields, mcqFields,mcqtypeFields) {\r\n\r\n    //ne\r\n    var details = { \r\n        \"ID\":id,\r\n        \"Questiontableid\":Questiontableid,\r\n        \"inputfields\":JSON.stringify(inputFields),\r\n        \"mcqFields\":JSON.stringify(mcqFields),\r\n        \"mcqtypeFields\":JSON.stringify(mcqtypeFields),\r\n        // \"answer\":answer,\r\n        // \"formula\":formula,\r\n        // \"type\":type,  \r\n      };\r\n  console.log('requsted to server');\r\n  console.log(details);\r\n      var formBody = [];\r\n      for (var property in details) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n      }\r\n      formBody = formBody.join(\"&\");\r\n      const data = await fetch(apiUrl + '/answer/createAnswer', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body:formBody,\r\n      }).then((res) => res.json());\r\n      console.log('check answer wwe ', apiUrl)\r\n      console.log(data);\r\n      return data;\r\n      \r\n}\r\n\r\n//api to delete the course from the database\r\nasync function deleteCourse(courseID) {\r\n    const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n//api to get the details of a particular topic by sending the courdseId\r\nasync function getCourseById(courseID) {\r\n    const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n\r\n\r\n\r\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\r\n    let obj = {\r\n        boardID: boardID,\r\n        subjectID: subjectID,\r\n        searchString: searchString,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        sortByDate: sortByDate,\r\n        status: status\r\n    }\r\n    const queryString = objToQueryString(obj)\r\n    var apiLink;\r\n    if (queryString == null) {\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    }\r\n    else {\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    }\r\n\r\n    console.log(\"test call back\", queryString, obj)\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api to get all courses of user\r\nasync function getAllUserCourses(userID) {\r\n    const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\nexport {createAnswer, getAllCourse,editAnswer, getSingleAnswer}"]},"metadata":{},"sourceType":"module"}