{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all classes data using offset and limit!\n\nasync function getAllClasses(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/classes/filterClasses';else apiLink = apiUrl + '/classes/filterClasses?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to change the status of the class\n\n\nasync function editClass(classesID, name, status) {\n  var details = {\n    \"name\": name,\n    \"status\": status\n  };\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/classes/editClasses/' + classesID, {\n    method: 'PATCH',\n    headers: {\n      // Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  return data;\n} //function to create the class\n\n\nasync function createClass(name, status) {\n  var details = {\n    \"name\": name,\n    \"status\": status\n  };\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/classes/createClasses', {\n    method: 'POST',\n    headers: {\n      // Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  return data;\n} //api to delete the user from the database\n\n\nasync function deleteClass(ClassesId) {\n  const data = await fetch(apiUrl + '/classes/deleteClassesById/' + ClassesId, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //get all class basically for search purposes\n\n\nasync function getClassByFilter(searchString, status, startDate, endDate, page, limit, sortByDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    endDate: endDate,\n    page: page,\n    limit: limit,\n    sortByDate: sortByDate\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/classes/filterClasses';else apiLink = apiUrl + '/classes/filterClasses?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular user by sending the userId\n\n\nasync function getClassById(classesID) {\n  const data = await fetch(apiUrl + '/classes/getClassesById/' + classesID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllClasses, editClass, deleteClass, getClassById, createClass, getClassByFilter };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Classes/Classes.js"],"names":["apiUrl","objToQueryString","getAllClasses","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","editClass","classesID","name","status","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","body","createClass","deleteClass","ClassesId","getClassByFilter","searchString","startDate","endDate","sortByDate","getClassById"],"mappings":"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","sourcesContent":["  import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n//Fetch all classes data using offset and limit!\nasync function getAllClasses(page, limit) {\n  const queryString = objToQueryString({\n      page: page,\n      limit: limit,\n  })\n  var apiLink;\n  if (queryString == null)\n      apiLink = apiUrl + '/classes/filterClasses'\n  else\n      apiLink = apiUrl + '/classes/filterClasses?' + queryString\n  const data = await fetch(apiLink, {\n      method: 'GET',\n      headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      },\n  }).then((res) => res.json());\n  return data;\n}\n\n\n  //api to change the status of the class\n\n  async function editClass(classesID,name,status) {\n    \n     var details = {\n      \"name\":name,\n      \"status\":status\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    const data = await fetch(apiUrl + '/classes/editClasses/'+classesID , {\n      method: 'PATCH',\n      headers: {\n        // Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body:formBody,\n    }).then((res) => res.json());\n    return data;\n    \n  }\n\n  //function to create the class\n  async function createClass(name,status) {\n    \n    var details = {\n      \"name\":name,\n      \"status\":status\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    const data = await fetch(apiUrl + '/classes/createClasses', {\n      method: 'POST',\n      headers: {\n        // Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body:formBody,\n    }).then((res) => res.json());\n    return data;\n    \n  }\n\n  //api to delete the user from the database\n  async function deleteClass(ClassesId)\n  { \n    const data = await fetch(apiUrl + '/classes/deleteClassesById/'+ClassesId, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json());\n    return data;\n  }\n\n  //get all class basically for search purposes\n  async function getClassByFilter(searchString,status,startDate,endDate,page,limit,sortByDate){\n    const queryString = objToQueryString({\n      searchString: searchString,\n      status: status,\n      startDate: startDate,\n      endDate: endDate,\n      page: page,\n      limit: limit,\n      sortByDate: sortByDate\n    })\n    var apiLink;\n    if(queryString == null)\n      apiLink = apiUrl + '/classes/filterClasses'\n    else\n      apiLink = apiUrl + '/classes/filterClasses?'+queryString\n    const data = await fetch(apiLink, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json());\n    return data;\n\n  }\n\n  //api to get the details of a particular user by sending the userId\n  async function getClassById(classesID)\n  { \n    const data = await fetch(apiUrl + '/classes/getClassesById/'+classesID, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json());\n    return data;\n  }\n  \n\n\n  export {getAllClasses,editClass,deleteClass,getClassById,createClass,getClassByFilter}"]},"metadata":{},"sourceType":"module"}