{"ast":null,"code":"import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';// @mui\nimport{Box,Button,Dialog,Select,Switch,MenuItem,InputLabel,DialogTitle,FormControl,DialogActions,DialogContent,FormControlLabel,DialogContentText}from'@mui/material';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function MaxWidthDialog(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),fullWidth=_useState4[0],setFullWidth=_useState4[1];var _useState5=useState('sm'),_useState6=_slicedToArray(_useState5,2),maxWidth=_useState6[0],setMaxWidth=_useState6[1];var handleClickOpen=function handleClickOpen(){setOpen(true);};var handleClose=function handleClose(){setOpen(false);};var handleMaxWidthChange=function handleMaxWidthChange(event){setMaxWidth(event.target.value);};var handleFullWidthChange=function handleFullWidthChange(event){setFullWidth(event.target.checked);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:handleClickOpen,children:\"Max Width Dialog\"}),/*#__PURE__*/_jsxs(Dialog,{open:open,maxWidth:maxWidth,onClose:handleClose,fullWidth:fullWidth,children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Optional sizes\"}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(DialogContentText,{children:\"You can set my maximum width and whether to adapt or not.\"}),/*#__PURE__*/_jsxs(Box,{component:\"form\",noValidate:true,sx:{margin:'auto',display:'flex',width:'fit-content',flexDirection:'column'},children:[/*#__PURE__*/_jsxs(FormControl,{sx:{mt:2,minWidth:120},children:[/*#__PURE__*/_jsx(InputLabel,{htmlFor:\"max-width\",children:\"maxWidth\"}),/*#__PURE__*/_jsxs(Select,{autoFocus:true,value:maxWidth,onChange:handleMaxWidthChange,label:\"maxWidth\",inputProps:{name:'max-width',id:'max-width'},children:[/*#__PURE__*/_jsx(MenuItem,{value:false,children:\"false\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"xs\",children:\"xs\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"sm\",children:\"sm\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"md\",children:\"md\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"lg\",children:\"lg\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"xl\",children:\"xl\"})]})]}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{checked:fullWidth,onChange:handleFullWidthChange}),label:\"Full width\",sx:{mt:1}})]})]}),/*#__PURE__*/_jsx(DialogActions,{children:/*#__PURE__*/_jsx(Button,{onClick:handleClose,variant:\"contained\",children:\"Close\"})})]})]});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/overview/mui/dialog/MaxWidthDialog.js"],"names":["useState","Box","Button","Dialog","Select","Switch","MenuItem","InputLabel","DialogTitle","FormControl","DialogActions","DialogContent","FormControlLabel","DialogContentText","MaxWidthDialog","open","setOpen","fullWidth","setFullWidth","maxWidth","setMaxWidth","handleClickOpen","handleClose","handleMaxWidthChange","event","target","value","handleFullWidthChange","checked","margin","display","width","flexDirection","mt","minWidth","name","id"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n// @mui\nimport {\n  Box,\n  Button,\n  Dialog,\n  Select,\n  Switch,\n  MenuItem,\n  InputLabel,\n  DialogTitle,\n  FormControl,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  DialogContentText,\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function MaxWidthDialog() {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState('sm');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleMaxWidthChange = (event) => {\n    setMaxWidth(event.target.value);\n  };\n\n  const handleFullWidthChange = (event) => {\n    setFullWidth(event.target.checked);\n  };\n\n  return (\n    <>\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Max Width Dialog\n      </Button>\n\n      <Dialog open={open} maxWidth={maxWidth} onClose={handleClose} fullWidth={fullWidth}>\n        <DialogTitle>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n\n          <Box\n            component=\"form\"\n            noValidate\n            sx={{\n              margin: 'auto',\n              display: 'flex',\n              width: 'fit-content',\n              flexDirection: 'column',\n            }}\n          >\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel>\n              <Select\n                autoFocus\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                label=\"maxWidth\"\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width',\n                }}\n              >\n                <MenuItem value={false}>false</MenuItem>\n                <MenuItem value=\"xs\">xs</MenuItem>\n                <MenuItem value=\"sm\">sm</MenuItem>\n                <MenuItem value=\"md\">md</MenuItem>\n                <MenuItem value=\"lg\">lg</MenuItem>\n                <MenuItem value=\"xl\">xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />}\n              label=\"Full width\"\n              sx={{ mt: 1 }}\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} variant=\"contained\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}