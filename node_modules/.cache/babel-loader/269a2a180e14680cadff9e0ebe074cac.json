{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\user\\\\account\\\\AccountGeneral.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useCallback } from 'react';\nimport { Form, FormikProvider, useFormik } from 'formik'; // @mui\n\nimport { Box, Grid, Card, Stack, Switch, TextField, FormControlLabel, Typography, FormHelperText } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useAuth from '../../../../hooks/useAuth';\nimport useIsMountedRef from '../../../../hooks/useIsMountedRef';\nimport { UploadAvatar } from '../../../../components/upload'; // utils\n\nimport { fData } from '../../../../utils/formatNumber'; // _mock\n\nimport { countries } from '../../../../_mock'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountGeneral() {\n  _s();\n\n  const isMountedRef = useIsMountedRef();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    user,\n    updateProfile\n  } = useAuth();\n  const UpdateUserSchema = Yup.object().shape({\n    displayName: Yup.string().required('Name is required')\n  });\n  console.log(user);\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      displayName: (user === null || user === void 0 ? void 0 : user.displayName) || '',\n      email: (user === null || user === void 0 ? void 0 : user.email) || '',\n      photoURL: (user === null || user === void 0 ? void 0 : user.photoURL) || '',\n      phoneNumber: (user === null || user === void 0 ? void 0 : user.phoneNumber) || '',\n      country: (user === null || user === void 0 ? void 0 : user.country) || '',\n      address: (user === null || user === void 0 ? void 0 : user.address) || '',\n      state: (user === null || user === void 0 ? void 0 : user.state) || '',\n      city: (user === null || user === void 0 ? void 0 : user.city) || '',\n      zipCode: (user === null || user === void 0 ? void 0 : user.zipCode) || '',\n      about: (user === null || user === void 0 ? void 0 : user.about) || '',\n      isPublic: (user === null || user === void 0 ? void 0 : user.isPublic) || ''\n    },\n    validationSchema: UpdateUserSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        setErrors,\n        setSubmitting\n      } = _ref;\n\n      try {\n        updateProfile === null || updateProfile === void 0 ? void 0 : updateProfile();\n        enqueueSnackbar('Update success', {\n          variant: 'success'\n        });\n\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        if (isMountedRef.current) {\n          setSubmitting(false);\n          setErrors({\n            afterSubmit: error.message\n          });\n        }\n      }\n    }\n  });\n  const {\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps,\n    setFieldValue\n  } = formik;\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n\n    if (file) {\n      setFieldValue('photoURL', { ...file,\n        preview: URL.createObjectURL(file)\n      });\n    }\n  }, [setFieldValue]);\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              py: 10,\n              px: 3,\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(UploadAvatar, {\n              accept: \"image/*\",\n              file: values.photoURL,\n              maxSize: 3145728,\n              onDrop: handleDrop,\n              error: Boolean(touched.photoURL && errors.photoURL),\n              caption: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                sx: {\n                  mt: 2,\n                  mx: 'auto',\n                  display: 'block',\n                  textAlign: 'center',\n                  color: 'text.secondary'\n                },\n                children: [\"Allowed *.jpeg, *.jpg, *.png, *.gif\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 21\n                }, this), \" max size of \", fData(3145728)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              error: true,\n              sx: {\n                px: 2,\n                textAlign: 'center'\n              },\n              children: touched.photoURL && errors.photoURL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, { ...getFieldProps('isPublic'),\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 26\n              }, this),\n              labelPlacement: \"start\",\n              label: \"Public Profile\",\n              sx: {\n                mt: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Stack, {\n              spacing: {\n                xs: 2,\n                md: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  md: 'row'\n                },\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Name\",\n                  ...getFieldProps('displayName')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  disabled: true,\n                  label: \"Email Address\",\n                  ...getFieldProps('email')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  md: 'row'\n                },\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Phone Number\",\n                  ...getFieldProps('phoneNumber')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Address\",\n                  ...getFieldProps('address')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  md: 'row'\n                },\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  select: true,\n                  fullWidth: true,\n                  label: \"Country\",\n                  placeholder: \"Country\",\n                  ...getFieldProps('country'),\n                  SelectProps: {\n                    native: true\n                  },\n                  error: Boolean(touched.country && errors.country),\n                  helperText: touched.country && errors.country,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 21\n                  }, this), countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.label,\n                    children: option.label\n                  }, option.code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"State/Region\",\n                  ...getFieldProps('state')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  md: 'row'\n                },\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"City\",\n                  ...getFieldProps('city')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Zip/Code\",\n                  ...getFieldProps('zipCode')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, { ...getFieldProps('about'),\n                fullWidth: true,\n                multiline: true,\n                minRows: 4,\n                maxRows: 4,\n                label: \"About\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 3,\n                display: 'flex',\n                justifyContent: 'flex-end'\n              },\n              children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n                type: \"submit\",\n                variant: \"contained\",\n                loading: isSubmitting,\n                children: \"Save Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountGeneral, \"KVOuu2XbFIZ0VQh++qLqzVcdjNM=\", false, function () {\n  return [useIsMountedRef, useSnackbar, useAuth, useFormik];\n});\n\n_c = AccountGeneral;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountGeneral\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/user/account/AccountGeneral.js"],"names":["Yup","useSnackbar","useCallback","Form","FormikProvider","useFormik","Box","Grid","Card","Stack","Switch","TextField","FormControlLabel","Typography","FormHelperText","LoadingButton","useAuth","useIsMountedRef","UploadAvatar","fData","countries","AccountGeneral","isMountedRef","enqueueSnackbar","user","updateProfile","UpdateUserSchema","object","shape","displayName","string","required","console","log","formik","enableReinitialize","initialValues","email","photoURL","phoneNumber","country","address","state","city","zipCode","about","isPublic","validationSchema","onSubmit","values","setErrors","setSubmitting","variant","current","error","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","setFieldValue","handleDrop","acceptedFiles","file","preview","URL","createObjectURL","py","px","textAlign","Boolean","mt","mx","display","color","p","xs","md","native","map","option","label","code","justifyContent"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useCallback } from 'react';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// @mui\nimport { Box, Grid, Card, Stack, Switch, TextField, FormControlLabel, Typography, FormHelperText } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useAuth from '../../../../hooks/useAuth';\nimport useIsMountedRef from '../../../../hooks/useIsMountedRef';\nimport { UploadAvatar } from '../../../../components/upload';\n// utils\nimport { fData } from '../../../../utils/formatNumber';\n// _mock\nimport { countries } from '../../../../_mock';\n\n// ----------------------------------------------------------------------\n\nexport default function AccountGeneral() {\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user, updateProfile } = useAuth();\n\n  const UpdateUserSchema = Yup.object().shape({\n    displayName: Yup.string().required('Name is required'),\n  });\n\n  console.log(user)\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      displayName: user?.displayName || '',\n      email: user?.email || '',\n      photoURL: user?.photoURL || '',\n      phoneNumber: user?.phoneNumber || '',\n      country: user?.country || '',\n      address: user?.address || '',\n      state: user?.state || '',\n      city: user?.city || '',\n      zipCode: user?.zipCode || '',\n      about: user?.about || '',\n      isPublic: user?.isPublic || '',\n    },\n\n    validationSchema: UpdateUserSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        updateProfile?.();\n        enqueueSnackbar('Update success', { variant: 'success' });\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        if (isMountedRef.current) {\n          setSubmitting(false);\n          setErrors({ afterSubmit: error.message });\n        }\n      }\n    },\n  });\n\n  const { values, errors, touched, isSubmitting, handleSubmit, getFieldProps, setFieldValue } = formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('photoURL', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\n              <UploadAvatar\n                accept=\"image/*\"\n                file={values.photoURL}\n                maxSize={3145728}\n                onDrop={handleDrop}\n                error={Boolean(touched.photoURL && errors.photoURL)}\n                caption={\n                  <Typography\n                    variant=\"caption\"\n                    sx={{\n                      mt: 2,\n                      mx: 'auto',\n                      display: 'block',\n                      textAlign: 'center',\n                      color: 'text.secondary',\n                    }}\n                  >\n                    Allowed *.jpeg, *.jpg, *.png, *.gif\n                    <br /> max size of {fData(3145728)}\n                  </Typography>\n                }\n              />\n\n              <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                {touched.photoURL && errors.photoURL}\n              </FormHelperText>\n\n              <FormControlLabel\n                control={<Switch {...getFieldProps('isPublic')} color=\"primary\" />}\n                labelPlacement=\"start\"\n                label=\"Public Profile\"\n                sx={{ mt: 5 }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={{ xs: 2, md: 3 }}>\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Name\" {...getFieldProps('displayName')} />\n                  <TextField fullWidth disabled label=\"Email Address\" {...getFieldProps('email')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"Phone Number\" {...getFieldProps('phoneNumber')} />\n                  <TextField fullWidth label=\"Address\" {...getFieldProps('address')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                  <TextField fullWidth label=\"State/Region\" {...getFieldProps('state')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <TextField fullWidth label=\"City\" {...getFieldProps('city')} />\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\n                </Stack>\n\n                <TextField {...getFieldProps('about')} fullWidth multiline minRows={4} maxRows={4} label=\"About\" />\n              </Stack>\n\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                  Save Changes\n                </LoadingButton>\n              </Box>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}