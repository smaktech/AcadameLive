{"ast":null,"code":"import _defineProperty from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useEffect}from'react';// @mui\nimport{Container,Stack}from'@mui/material';import{DragDropContext,Droppable}from'react-beautiful-dnd';// redux\nimport{useDispatch,useSelector}from'../../redux/store';import{getBoard,persistColumn,persistCard}from'../../redux/slices/kanban';// routes\nimport{PATH_DASHBOARD}from'../../routes/paths';// components\nimport Page from'../../components/Page';import HeaderBreadcrumbs from'../../components/HeaderBreadcrumbs';import{SkeletonKanbanColumn}from'../../components/skeleton';// sections\nimport{KanbanColumn,KanbanColumnAdd}from'../../sections/@dashboard/kanban';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Kanban(){var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.kanban;}),board=_useSelector.board;useEffect(function(){dispatch(getBoard());},[dispatch]);var onDragEnd=function onDragEnd(result){var _objectSpread3;// Reorder card\nvar destination=result.destination,source=result.source,draggableId=result.draggableId,type=result.type;if(!destination)return;if(destination.droppableId===source.droppableId&&destination.index===source.index)return;if(type==='column'){var newColumnOrder=Array.from(board.columnOrder);newColumnOrder.splice(source.index,1);newColumnOrder.splice(destination.index,0,draggableId);dispatch(persistColumn(newColumnOrder));return;}var start=board.columns[source.droppableId];var finish=board.columns[destination.droppableId];if(start.id===finish.id){var updatedCardIds=_toConsumableArray(start.cardIds);updatedCardIds.splice(source.index,1);updatedCardIds.splice(destination.index,0,draggableId);var updatedColumn=_objectSpread(_objectSpread({},start),{},{cardIds:updatedCardIds});dispatch(persistCard(_objectSpread(_objectSpread({},board.columns),{},_defineProperty({},updatedColumn.id,updatedColumn))));return;}var startCardIds=_toConsumableArray(start.cardIds);startCardIds.splice(source.index,1);var updatedStart=_objectSpread(_objectSpread({},start),{},{cardIds:startCardIds});var finishCardIds=_toConsumableArray(finish.cardIds);finishCardIds.splice(destination.index,0,draggableId);var updatedFinish=_objectSpread(_objectSpread({},finish),{},{cardIds:finishCardIds});dispatch(persistCard(_objectSpread(_objectSpread({},board.columns),{},(_objectSpread3={},_defineProperty(_objectSpread3,updatedStart.id,updatedStart),_defineProperty(_objectSpread3,updatedFinish.id,updatedFinish),_objectSpread3))));};return/*#__PURE__*/_jsx(Page,{title:\"Kanban\",sx:{height:1},children:/*#__PURE__*/_jsxs(Container,{maxWidth:false,sx:{height:1},children:[/*#__PURE__*/_jsx(HeaderBreadcrumbs,{heading:\"Kanban\",links:[{name:'Dashboard',href:PATH_DASHBOARD.root},{name:'Kanban'}]}),/*#__PURE__*/_jsx(DragDropContext,{onDragEnd:onDragEnd,children:/*#__PURE__*/_jsx(Droppable,{droppableId:\"all-columns\",direction:\"horizontal\",type:\"column\",children:function children(provided){return/*#__PURE__*/_jsxs(Stack,_objectSpread(_objectSpread({},provided.droppableProps),{},{ref:provided.innerRef,direction:\"row\",alignItems:\"flex-start\",spacing:3,sx:{height:'calc(100% - 32px)',overflowY:'hidden'},children:[!board.columnOrder.length?/*#__PURE__*/_jsx(SkeletonKanbanColumn,{}):board.columnOrder.map(function(columnId,index){return/*#__PURE__*/_jsx(KanbanColumn,{index:index,column:board.columns[columnId]},columnId);}),provided.placeholder,/*#__PURE__*/_jsx(KanbanColumnAdd,{})]}));}})})]})});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/dashboard/Kanban.js"],"names":["useEffect","Container","Stack","DragDropContext","Droppable","useDispatch","useSelector","getBoard","persistColumn","persistCard","PATH_DASHBOARD","Page","HeaderBreadcrumbs","SkeletonKanbanColumn","KanbanColumn","KanbanColumnAdd","Kanban","dispatch","state","kanban","board","onDragEnd","result","destination","source","draggableId","type","droppableId","index","newColumnOrder","Array","from","columnOrder","splice","start","columns","finish","id","updatedCardIds","cardIds","updatedColumn","startCardIds","updatedStart","finishCardIds","updatedFinish","height","name","href","root","provided","droppableProps","innerRef","overflowY","length","map","columnId","placeholder"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\n// @mui\nimport { Container, Stack } from '@mui/material';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getBoard, persistColumn, persistCard } from '../../redux/slices/kanban';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { SkeletonKanbanColumn } from '../../components/skeleton';\n// sections\nimport { KanbanColumn, KanbanColumnAdd } from '../../sections/@dashboard/kanban';\n\n// ----------------------------------------------------------------------\n\nexport default function Kanban() {\n  const dispatch = useDispatch();\n  const { board } = useSelector((state) => state.kanban);\n\n  useEffect(() => {\n    dispatch(getBoard());\n  }, [dispatch]);\n\n  const onDragEnd = (result) => {\n    // Reorder card\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(board.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      dispatch(persistColumn(newColumnOrder));\n      return;\n    }\n\n    const start = board.columns[source.droppableId];\n    const finish = board.columns[destination.droppableId];\n\n    if (start.id === finish.id) {\n      const updatedCardIds = [...start.cardIds];\n      updatedCardIds.splice(source.index, 1);\n      updatedCardIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...start,\n        cardIds: updatedCardIds,\n      };\n\n      dispatch(\n        persistCard({\n          ...board.columns,\n          [updatedColumn.id]: updatedColumn,\n        })\n      );\n      return;\n    }\n\n    const startCardIds = [...start.cardIds];\n    startCardIds.splice(source.index, 1);\n    const updatedStart = {\n      ...start,\n      cardIds: startCardIds,\n    };\n\n    const finishCardIds = [...finish.cardIds];\n    finishCardIds.splice(destination.index, 0, draggableId);\n    const updatedFinish = {\n      ...finish,\n      cardIds: finishCardIds,\n    };\n\n    dispatch(\n      persistCard({\n        ...board.columns,\n        [updatedStart.id]: updatedStart,\n        [updatedFinish.id]: updatedFinish,\n      })\n    );\n  };\n\n  return (\n    <Page title=\"Kanban\" sx={{ height: 1 }}>\n      <Container maxWidth={false} sx={{ height: 1 }}>\n        <HeaderBreadcrumbs\n          heading=\"Kanban\"\n          links={[\n            {\n              name: 'Dashboard',\n              href: PATH_DASHBOARD.root,\n            },\n            { name: 'Kanban' },\n          ]}\n        />\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <Stack\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                direction=\"row\"\n                alignItems=\"flex-start\"\n                spacing={3}\n                sx={{ height: 'calc(100% - 32px)', overflowY: 'hidden' }}\n              >\n                {!board.columnOrder.length ? (\n                  <SkeletonKanbanColumn />\n                ) : (\n                  board.columnOrder.map((columnId, index) => (\n                    <KanbanColumn index={index} key={columnId} column={board.columns[columnId]} />\n                  ))\n                )}\n\n                {provided.placeholder}\n                <KanbanColumnAdd />\n              </Stack>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}