{"ast":null,"code":"import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Courses from'src/pages/courses/Courses';import{description}from'src/_mock/text';import{apiUrl}from'../../config';import{objToQueryString}from'../../config';function getQuestion(_x){return _getQuestion.apply(this,arguments);}//Fetch all course data using offset and limit!\nfunction _getQuestion(){_getQuestion=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id){var apiLink,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log('request from client done');apiLink=apiUrl+'/question/getQuestion?id='+id;console.log(id,'get Question Table iD');_context.next=5;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 5:data=_context.sent;console.log('Get Question Table iD',data);return _context.abrupt(\"return\",data);case 8:case\"end\":return _context.stop();}}},_callee);}));return _getQuestion.apply(this,arguments);}function getAllCourse(_x2,_x3){return _getAllCourse.apply(this,arguments);}//api function for update a course \nfunction _getAllCourse(){_getAllCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(page,limit){var queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:queryString=objToQueryString({page:page,limit:limit});if(queryString==null)apiLink=apiUrl+'/course/filterCourse';else apiLink=apiUrl+'/course/filterCourse?'+queryString;_context2.next=4;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 4:data=_context2.sent;return _context2.abrupt(\"return\",data);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return _getAllCourse.apply(this,arguments);}function editCourse(_x4,_x5,_x6,_x7,_x8,_x9,_x10,_x11,_x12){return _editCourse.apply(this,arguments);}//api function for adding a course \nfunction _editCourse(){_editCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(courseID,name,boardID,subBoardID,classesID,subjectID,description,status,courseImage){var formData,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// var details = {\n//     \"name\": name,\n//     \"description\": description,\n//     \"board\": board,\n//     \"classes\": classes,\n//     \"subject\": subject,\n//     \"topic\": topic,\n//     // \"coursePicture\": coursePicture,\n//     'status':status\n// };\n// var formBody = [];\n// for (var property in details) {\n//     var encodedKey = encodeURIComponent(property);\n//     var encodedValue = encodeURIComponent(details[property]);\n//     formBody.push(encodedKey + \"=\" + encodedValue);\n// }\n// formBody = formBody.join(\"&\");\nformData=new FormData();formData.append(\"name\",name);formData.append(\"boardID\",boardID);if(subBoardID){formData.append(\"subBoardID\",subBoardID);}formData.append(\"classesID\",classesID);formData.append(\"subjectID\",subjectID);// formData.append(\"topicIDs\", topicIDs)\nformData.append(\"description\",description);formData.append(\"status\",status);formData.append(\"image\",courseImage);_context3.next=11;return fetch(apiUrl+'/course/editCourse/'+courseID,{method:'PATCH',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n// 'Content-Type': 'multipart/form-data',\n},// body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\nbody:formData}).then(function(res){return res.json();});case 11:data=_context3.sent;return _context3.abrupt(\"return\",data);case 13:case\"end\":return _context3.stop();}}},_callee3);}));return _editCourse.apply(this,arguments);}function createQuestion(_x13,_x14,_x15){return _createQuestion.apply(this,arguments);}//api to delete the course from the database\nfunction _createQuestion(){_createQuestion=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id,question,media){var formData,formBody,property,encodedKey,encodedValue,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0://ne\nformData=new FormData();formData.append('ID',id);formData.append('question',question);formData.append('media',media);// var details = {\n//     \"ID\":id,\n//     \"question\":question,\n//     \"media\":media,                      \n//   };\nconsole.log('requsted to server');console.log(formData);formBody=[];for(property in formData){encodedKey=encodeURIComponent(property);encodedValue=encodeURIComponent(formData[property]);formBody.push(encodedKey+\"=\"+encodedValue);}formBody=formBody.join(\"&\");_context4.next=11;return fetch(apiUrl+'/question/createQuestion',{method:'POST',headers:{//   Accept: 'application/json',\n//   'Content-Type': 'application/x-www-form-urlencoded',\n},body:formData}).then(function(res){return res.json();});case 11:data=_context4.sent;console.log(data);return _context4.abrupt(\"return\",data);case 14:case\"end\":return _context4.stop();}}},_callee4);}));return _createQuestion.apply(this,arguments);}function deleteCourse(_x16){return _deleteCourse.apply(this,arguments);}//api to get the details of a particular topic by sending the courdseId\nfunction _deleteCourse(){_deleteCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(courseID){var data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetch(apiUrl+'/course/deleteCourseById/'+courseID,{method:'DELETE',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n}}).then(function(res){return res.json();});case 2:data=_context5.sent;return _context5.abrupt(\"return\",data);case 4:case\"end\":return _context5.stop();}}},_callee5);}));return _deleteCourse.apply(this,arguments);}function getCourseById(_x17){return _getCourseById.apply(this,arguments);}function _getCourseById(){_getCourseById=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(courseID){var data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetch(apiUrl+'/course/getCourseById/'+courseID,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 2:data=_context6.sent;return _context6.abrupt(\"return\",data);case 4:case\"end\":return _context6.stop();}}},_callee6);}));return _getCourseById.apply(this,arguments);}function getCourseByFilter(_x18,_x19,_x20,_x21,_x22,_x23,_x24){return _getCourseByFilter.apply(this,arguments);}//api to get all courses of user\nfunction _getCourseByFilter(){_getCourseByFilter=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(searchString,startDate,endDate,sortByDate,status,boardID,subjectID){var obj,queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:obj={boardID:boardID,subjectID:subjectID,searchString:searchString,startDate:startDate,endDate:endDate,sortByDate:sortByDate,status:status};queryString=objToQueryString(obj);if(queryString==null){apiLink=apiUrl+'/course/filterCourse';}else{apiLink=apiUrl+'/course/filterCourse?'+queryString;}console.log(\"test call back\",queryString,obj);_context7.next=6;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n}}).then(function(res){return res.json();});case 6:data=_context7.sent;return _context7.abrupt(\"return\",data);case 8:case\"end\":return _context7.stop();}}},_callee7);}));return _getCourseByFilter.apply(this,arguments);}function getAllUserCourses(_x25){return _getAllUserCourses.apply(this,arguments);}function _getAllUserCourses(){_getAllUserCourses=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(userID){var data;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return fetch(apiUrl+'/userCourse/getAllUserCourses/'+userID,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 2:data=_context8.sent;return _context8.abrupt(\"return\",data);case 4:case\"end\":return _context8.stop();}}},_callee8);}));return _getAllUserCourses.apply(this,arguments);}export{createQuestion,getQuestion};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Question/Question.js"],"names":["Courses","description","apiUrl","objToQueryString","getQuestion","id","console","log","apiLink","fetch","method","headers","Accept","then","res","json","data","getAllCourse","page","limit","queryString","editCourse","courseID","name","boardID","subBoardID","classesID","subjectID","status","courseImage","formData","FormData","append","body","createQuestion","question","media","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deleteCourse","getCourseById","getCourseByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserCourses","userID"],"mappings":"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","sourcesContent":["import Courses from 'src/pages/courses/Courses';\r\nimport { description } from 'src/_mock/text';\r\nimport { apiUrl } from '../../config';\r\nimport { objToQueryString } from '../../config'\r\n\r\n\r\nasync function getQuestion(id) {\r\n    console.log('request from client done');\r\n\r\n    var apiLink;\r\n    \r\n        apiLink = apiUrl + '/question/getQuestion?id='+ id\r\n   \r\n        console.log( id, 'get Question Table iD' )\r\n\r\n    const data = await fetch(apiLink,  {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n\r\n    }).then((res) => res.json());\r\n\r\n    \r\n\r\n   console.log('Get Question Table iD', data)\r\n    return data;\r\n}\r\n//Fetch all course data using offset and limit!\r\nasync function getAllCourse(page, limit) {\r\n    const queryString = objToQueryString({\r\n        page: page,\r\n        limit: limit,\r\n    })\r\n    var apiLink;\r\n    if (queryString == null)\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    else\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n//api function for update a course \r\n\r\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status,courseImage) {\r\n    // var details = {\r\n    //     \"name\": name,\r\n    //     \"description\": description,\r\n    //     \"board\": board,\r\n    //     \"classes\": classes,\r\n    //     \"subject\": subject,\r\n    //     \"topic\": topic,\r\n    //     // \"coursePicture\": coursePicture,\r\n    //     'status':status\r\n    // };\r\n\r\n    // var formBody = [];\r\n    // for (var property in details) {\r\n    //     var encodedKey = encodeURIComponent(property);\r\n    //     var encodedValue = encodeURIComponent(details[property]);\r\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\r\n    // }\r\n    // formBody = formBody.join(\"&\");\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name)\r\n    formData.append(\"boardID\", boardID)\r\n    if (subBoardID) {\r\n        formData.append(\"subBoardID\", subBoardID)\r\n    }\r\n    formData.append(\"classesID\", classesID)\r\n    formData.append(\"subjectID\", subjectID)\r\n    // formData.append(\"topicIDs\", topicIDs)\r\n    formData.append(\"description\", description)\r\n    formData.append(\"status\", status)\r\n    formData.append(\"image\", courseImage)\r\n    const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n            // 'Content-Type': 'multipart/form-data',\r\n        },\r\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\r\n        body:formData\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api function for adding a course \r\nasync function createQuestion( id,question, media) {\r\n\r\n    //ne\r\n    const formData = new FormData()\r\n  formData.append('ID', id)\r\n  formData.append('question', question)\r\n  formData.append('media', media)\r\n    // var details = {\r\n    //     \"ID\":id,\r\n    //     \"question\":question,\r\n    //     \"media\":media,                      \r\n        \r\n    //   };\r\n  console.log('requsted to server');\r\n  console.log(formData);\r\n      var formBody = [];\r\n      for (var property in formData) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(formData[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n      }\r\n      formBody = formBody.join(\"&\");\r\n      const data = await fetch(apiUrl + '/question/createQuestion', {\r\n        method: 'POST',\r\n        headers: {\r\n        //   Accept: 'application/json',\r\n        //   'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body:formData,\r\n      }).then((res) => res.json());\r\n\r\n      console.log(data);\r\n      return data;\r\n      \r\n}\r\n\r\n//api to delete the course from the database\r\nasync function deleteCourse(courseID) {\r\n    const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n//api to get the details of a particular topic by sending the courdseId\r\nasync function getCourseById(courseID) {\r\n    const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n\r\n\r\n\r\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\r\n    let obj = {\r\n        boardID: boardID,\r\n        subjectID: subjectID,\r\n        searchString: searchString,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        sortByDate: sortByDate,\r\n        status: status\r\n    }\r\n    const queryString = objToQueryString(obj)\r\n    var apiLink;\r\n    if (queryString == null) {\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    }\r\n    else {\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    }\r\n\r\n    console.log(\"test call back\", queryString, obj)\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api to get all courses of user\r\nasync function getAllUserCourses(userID) {\r\n    const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\nexport {createQuestion, getQuestion}"]},"metadata":{},"sourceType":"module"}