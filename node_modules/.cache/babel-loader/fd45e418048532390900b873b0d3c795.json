{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\chat\\\\ChatHeaderCompose.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match'; // @mui\n\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, Avatar, TextField, Typography, Autocomplete, Chip } from '@mui/material'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport SearchNotFound from '../../../components/SearchNotFound'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst RootStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(2, 3)\n  };\n});\nconst AutocompleteStyle = styled('div')(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    '& .MuiAutocomplete-root': {\n      minWidth: 280,\n      marginLeft: theme.spacing(2),\n      '&.Mui-focused .MuiAutocomplete-inputRoot': {\n        boxShadow: theme.customShadows.z8\n      }\n    },\n    '& .MuiAutocomplete-inputRoot': {\n      transition: theme.transitions.create('box-shadow', {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.shorter\n      }),\n      '& fieldset': {\n        borderWidth: `1px !important`,\n        borderColor: `${theme.palette.grey[50032]} !important`\n      }\n    }\n  };\n}); // ----------------------------------------------------------------------\n\nChatHeaderCompose.propTypes = {\n  contacts: PropTypes.array,\n  recipients: PropTypes.array,\n  onAddRecipients: PropTypes.func\n};\nexport default function ChatHeaderCompose(_ref3) {\n  _s();\n\n  let {\n    contacts,\n    recipients,\n    onAddRecipients\n  } = _ref3;\n  const [query, setQuery] = useState('');\n\n  const handleAddRecipients = recipients => {\n    setQuery('');\n    onAddRecipients(recipients);\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      sx: {\n        color: 'text.secondary'\n      },\n      children: \"To:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutocompleteStyle, {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        size: \"small\",\n        disablePortal: true,\n        popupIcon: null,\n        noOptionsText: /*#__PURE__*/_jsxDEV(SearchNotFound, {\n          searchQuery: query\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 26\n        }, this),\n        onChange: (event, value) => handleAddRecipients(value),\n        onInputChange: (event, value) => setQuery(value),\n        options: contacts,\n        getOptionLabel: recipient => recipient.name,\n        renderOption: (props, recipient, _ref4) => {\n          let {\n            inputValue,\n            selected\n          } = _ref4;\n          const {\n            name,\n            avatar\n          } = recipient;\n          const matches = match(name, inputValue);\n          const parts = parse(name, matches);\n          return /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: 32,\n                height: 32,\n                overflow: 'hidden',\n                borderRadius: '50%',\n                position: 'relative'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                alt: name,\n                src: avatar\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  top: 0,\n                  opacity: 0,\n                  width: '100%',\n                  height: '100%',\n                  display: 'flex',\n                  position: 'absolute',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  bgcolor: theme => alpha(theme.palette.grey[900], 0.8),\n                  transition: theme => theme.transitions.create('opacity', {\n                    easing: theme.transitions.easing.easeInOut,\n                    duration: theme.transitions.duration.shorter\n                  }),\n                  ...(selected && {\n                    opacity: 1,\n                    color: 'primary.main'\n                  })\n                },\n                children: /*#__PURE__*/_jsxDEV(Iconify, {\n                  icon: \"eva:checkmark-fill\",\n                  width: 20,\n                  height: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                ml: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), parts.map((part, index) => /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: part.highlight ? 'primary' : 'textPrimary',\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this);\n        },\n        renderTags: (recipients, getTagProps) => recipients.map((recipient, index) => {\n          const {\n            id,\n            name,\n            avatar\n          } = recipient;\n          return /*#__PURE__*/_createElement(Chip, { ...getTagProps({\n              index\n            }),\n            key: id,\n            size: \"small\",\n            label: name,\n            color: \"info\",\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              alt: name,\n              src: avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 27\n            }, this),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }\n          });\n        }),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          placeholder: recipients.length === 0 ? 'Recipients' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatHeaderCompose, \"qO/HZodsWTfJhuzZtdaxiosei2U=\");\n\n_c = ChatHeaderCompose;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatHeaderCompose\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatHeaderCompose.js"],"names":["PropTypes","useState","parse","match","alpha","styled","Box","Avatar","TextField","Typography","Autocomplete","Chip","Iconify","SearchNotFound","RootStyle","theme","display","alignItems","padding","spacing","AutocompleteStyle","minWidth","marginLeft","boxShadow","customShadows","z8","transition","transitions","create","easing","easeInOut","duration","shorter","borderWidth","borderColor","palette","grey","ChatHeaderCompose","propTypes","contacts","array","recipients","onAddRecipients","func","query","setQuery","handleAddRecipients","color","event","value","recipient","name","props","inputValue","selected","avatar","matches","parts","width","height","overflow","borderRadius","position","top","opacity","justifyContent","bgcolor","ml","map","part","index","highlight","text","getTagProps","id","params","length"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n// @mui\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, Avatar, TextField, Typography, Autocomplete, Chip } from '@mui/material';\n// components\nimport Iconify from '../../../components/Iconify';\nimport SearchNotFound from '../../../components/SearchNotFound';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: theme.spacing(2, 3),\n}));\n\nconst AutocompleteStyle = styled('div')(({ theme }) => ({\n  '& .MuiAutocomplete-root': {\n    minWidth: 280,\n    marginLeft: theme.spacing(2),\n    '&.Mui-focused .MuiAutocomplete-inputRoot': {\n      boxShadow: theme.customShadows.z8,\n    },\n  },\n  '& .MuiAutocomplete-inputRoot': {\n    transition: theme.transitions.create('box-shadow', {\n      easing: theme.transitions.easing.easeInOut,\n      duration: theme.transitions.duration.shorter,\n    }),\n    '& fieldset': {\n      borderWidth: `1px !important`,\n      borderColor: `${theme.palette.grey[500_32]} !important`,\n    },\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nChatHeaderCompose.propTypes = {\n  contacts: PropTypes.array,\n  recipients: PropTypes.array,\n  onAddRecipients: PropTypes.func,\n};\n\nexport default function ChatHeaderCompose({ contacts, recipients, onAddRecipients }) {\n  const [query, setQuery] = useState('');\n\n  const handleAddRecipients = (recipients) => {\n    setQuery('');\n    onAddRecipients(recipients);\n  };\n\n  return (\n    <RootStyle>\n      <Typography variant=\"subtitle2\" sx={{ color: 'text.secondary' }}>\n        To:\n      </Typography>\n\n      <AutocompleteStyle>\n        <Autocomplete\n          multiple\n          size=\"small\"\n          disablePortal\n          popupIcon={null}\n          noOptionsText={<SearchNotFound searchQuery={query} />}\n          onChange={(event, value) => handleAddRecipients(value)}\n          onInputChange={(event, value) => setQuery(value)}\n          options={contacts}\n          getOptionLabel={(recipient) => recipient.name}\n          renderOption={(props, recipient, { inputValue, selected }) => {\n            const { name, avatar } = recipient;\n            const matches = match(name, inputValue);\n            const parts = parse(name, matches);\n            return (\n              <li {...props}>\n                <Box\n                  sx={{\n                    width: 32,\n                    height: 32,\n                    overflow: 'hidden',\n                    borderRadius: '50%',\n                    position: 'relative',\n                  }}\n                >\n                  <Avatar alt={name} src={avatar} />\n                  <Box\n                    sx={{\n                      top: 0,\n                      opacity: 0,\n                      width: '100%',\n                      height: '100%',\n                      display: 'flex',\n                      position: 'absolute',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n                      transition: (theme) =>\n                        theme.transitions.create('opacity', {\n                          easing: theme.transitions.easing.easeInOut,\n                          duration: theme.transitions.duration.shorter,\n                        }),\n                      ...(selected && {\n                        opacity: 1,\n                        color: 'primary.main',\n                      }),\n                    }}\n                  >\n                    <Iconify icon=\"eva:checkmark-fill\" width={20} height={20} />\n                  </Box>\n                </Box>\n                <Box sx={{ ml: 2 }} />\n                {parts.map((part, index) => (\n                  <Typography key={index} variant=\"subtitle2\" color={part.highlight ? 'primary' : 'textPrimary'}>\n                    {part.text}\n                  </Typography>\n                ))}\n              </li>\n            );\n          }}\n          renderTags={(recipients, getTagProps) =>\n            recipients.map((recipient, index) => {\n              const { id, name, avatar } = recipient;\n              return (\n                <Chip\n                  {...getTagProps({ index })}\n                  key={id}\n                  size=\"small\"\n                  label={name}\n                  color=\"info\"\n                  avatar={<Avatar alt={name} src={avatar} />}\n                />\n              );\n            })\n          }\n          renderInput={(params) => <TextField {...params} placeholder={recipients.length === 0 ? 'Recipients' : ''} />}\n        />\n      </AutocompleteStyle>\n    </RootStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}