{"ast":null,"code":"/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\nfunction ini(hljs) {\n  const regex = hljs.regex;\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      begin: /([+-]+)?[\\d]+_[\\d_]+/\n    }, {\n      begin: hljs.NUMBER_RE\n    }]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [{\n    begin: /;/,\n    end: /$/\n  }, {\n    begin: /#/,\n    end: /$/\n  }];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [{\n      begin: /\\$[\\w\\d\"][\\w\\d_]*/\n    }, {\n      begin: /\\$\\{(.*?)\\}/\n    }]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: \"'''\",\n      end: \"'''\",\n      relevance: 10\n    }, {\n      begin: '\"\"\"',\n      end: '\"\"\"',\n      relevance: 10\n    }, {\n      begin: '\"',\n      end: '\"'\n    }, {\n      begin: \"'\",\n      end: \"'\"\n    }]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [COMMENTS, LITERALS, VARIABLES, STRINGS, NUMBERS, 'self'],\n    relevance: 0\n  };\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = regex.either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n  const DOTTED_KEY = regex.concat(ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*', regex.lookahead(/\\s*=\\s*[^#\\s]/));\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [COMMENTS, {\n      className: 'section',\n      begin: /\\[+/,\n      end: /\\]+/\n    }, {\n      begin: DOTTED_KEY,\n      className: 'attr',\n      starts: {\n        end: /$/,\n        contains: [COMMENTS, ARRAY, LITERALS, VARIABLES, STRINGS, NUMBERS]\n      }\n    }]\n  };\n}\n\nmodule.exports = ini;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/highlight.js/lib/languages/ini.js"],"names":["ini","hljs","regex","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","BARE_KEY","QUOTED_KEY_DOUBLE_QUOTE","QUOTED_KEY_SINGLE_QUOTE","ANY_KEY","either","DOTTED_KEY","concat","lookahead","name","aliases","case_insensitive","illegal","starts","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  const regex = hljs.regex;\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        begin: /([+-]+)?[\\d]+_[\\d_]+/\n      },\n      {\n        begin: hljs.NUMBER_RE\n      }\n    ]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {\n      begin: /;/,\n      end: /$/\n    },\n    {\n      begin: /#/,\n      end: /$/\n    }\n  ];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [\n      {\n        begin: /\\$[\\w\\d\"][\\w\\d_]*/\n      },\n      {\n        begin: /\\$\\{(.*?)\\}/\n      }\n    ]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: \"'''\",\n        end: \"'''\",\n        relevance: 10\n      },\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        begin: \"'\",\n        end: \"'\"\n      }\n    ]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance: 0\n  };\n\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = regex.either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  const DOTTED_KEY = regex.concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    regex.lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/,\n        end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n"]},"metadata":{},"sourceType":"script"}