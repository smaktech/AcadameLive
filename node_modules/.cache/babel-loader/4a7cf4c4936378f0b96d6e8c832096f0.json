{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all course data using offset and limit!\n\nasync function getAllEvaluation() {\n  const queryString = objToQueryString({// page: page,\n    // limit: limit,\n  });\n  var apiLink;\n  apiLink = apiUrl + '/evaluation/getevaluationlist';\n  console.log(\"Request from getEvaluation to\", apiLink);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getEvaluationID(id) {\n  console.log('getEvaluationID');\n  var apiLink;\n  apiLink = apiUrl + '/evaluation/getEvaluationID?id=' + id;\n  console.log(id, 'getEvaluationID ');\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  console.log('Get getEvaluationID', data);\n  return data;\n} //api function for update a course \n\n\nasync function editEvaluation(course, name, board, subBoard, classes, subject, description, status, courseImage) {\n  // var details = {\n  //     \"name\": name,\n  //     \"description\": description,\n  //     \"board\": board,\n  //     \"classes\": classes,\n  //     \"subject\": subject,\n  //     \"topic\": topic,\n  //     // \"coursePicture\": coursePicture,\n  //     'status':status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //     var encodedKey = encodeURIComponent(property);\n  //     var encodedValue = encodeURIComponent(details[property]);\n  //     formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"board\", board);\n\n  if (subBoardID) {\n    formData.append(\"subBoard\", subBoard);\n  }\n\n  formData.append(\"classes\", classes);\n  formData.append(\"subject\", subject); // formData.append(\"topicIDs\", topicIDs)\n\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", courseImage);\n  const data = await fetch(apiUrl + '/evaluation/editEvaluation/' + e, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n      // 'Content-Type': 'multipart/form-data',\n\n    },\n    // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n    body: formData\n  }).then(res => res.json()); // console.log(\"description\")\n\n  return data;\n} //api function for adding a course \n\n\nasync function createEvaluation(board, qualification, subject, description, course) {\n  //////////////////////////////\n  var details = {\n    \"board\": board,\n    \"qualification\": qualification,\n    \"subject\": subject,\n    \"description\": description,\n    \"course\": course\n  }; //   console.log(details);\n\n  var formBody = []; //   console.log('API url check ',apiUrl)\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/evaluation/createEvaluation', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  console.log('client data console', data);\n  return data;\n} //api to delete the course from the database\n\n\nasync function deleteEvaluation(course) {\n  const data = await fetch(apiUrl + '/evaluation/deleteEvaluationById/' + course, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  console.log('courseID server check', deleteEvaluation);\n  return data;\n} //api to get the details of a particular topic by sending the courdseId\n\n\nasync function getEvaluationById(evaluation) {\n  const data = await fetch(apiUrl + '/evaluation/getEvaluationById/' + evaluation, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getEvaluationByFilter(searchString, startDate, endDate, sortByDate, status, board, subject) {\n  let obj = {\n    board: board,\n    subject: subject,\n    searchString: searchString,\n    startDate: startDate,\n    endDate: endDate,\n    sortByDate: sortByDate,\n    status: status\n  };\n  const queryString = objToQueryString(obj);\n  var apiLink;\n\n  if (queryString == null) {\n    apiLink = apiUrl + '/course/filterEvaluation';\n  } else {\n    apiLink = apiUrl + '/course/filterEvaluation?' + queryString;\n  }\n\n  console.log(\"test call back\", queryString, obj);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get all courses of user\n\n\nasync function getAllUserEvaluations(userID) {\n  const data = await fetch(apiUrl + '/userEvaluation/getAllUserEvaluations/' + userID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllEvaluation, getEvaluationID, editEvaluation, deleteEvaluation, getEvaluationByFilter, getEvaluationById, getAllUserEvaluations, createEvaluation };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Evaluation/Evaluation.js"],"names":["apiUrl","objToQueryString","getAllEvaluation","queryString","apiLink","console","log","data","fetch","method","headers","Accept","then","res","json","getEvaluationID","id","editEvaluation","course","name","board","subBoard","classes","subject","description","status","courseImage","formData","FormData","append","subBoardID","e","body","createEvaluation","qualification","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deleteEvaluation","getEvaluationById","evaluation","getEvaluationByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserEvaluations","userID"],"mappings":"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","sourcesContent":["\nimport { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all course data using offset and limit!\nasync function getAllEvaluation() {\n    const queryString = objToQueryString({\n        // page: page,\n        // limit: limit,\n\n    })\n    var apiLink;\n\n    apiLink = apiUrl + '/evaluation/getevaluationlist'\n    console.log(\"Request from getEvaluation to\", apiLink);\n    \n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n\n    return data;\n\n}\n\nasync function getEvaluationID(id) {\n    console.log('getEvaluationID');\n\n    var apiLink;\n    \n        apiLink = apiUrl + '/evaluation/getEvaluationID?id='+ id\n   \n        console.log( id, 'getEvaluationID ' )\n\n    const data = await fetch(apiLink,  {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n\n    }).then((res) => res.json());\n\n    \n\n   console.log('Get getEvaluationID', data)\n    return data;\n}\n\n//api function for update a course \n\nasync function editEvaluation(course, name, board, subBoard, classes, subject, description, status, courseImage) {\n    // var details = {\n    //     \"name\": name,\n    //     \"description\": description,\n    //     \"board\": board,\n    //     \"classes\": classes,\n    //     \"subject\": subject,\n    //     \"topic\": topic,\n    //     // \"coursePicture\": coursePicture,\n    //     'status':status\n    // };\n\n    // var formBody = [];\n    // for (var property in details) {\n    //     var encodedKey = encodeURIComponent(property);\n    //     var encodedValue = encodeURIComponent(details[property]);\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\n    // }\n    // formBody = formBody.join(\"&\");\n    const formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"board\", board)\n    if (subBoardID) {\n        formData.append(\"subBoard\", subBoard)\n    }\n    formData.append(\"classes\", classes)\n    formData.append(\"subject\", subject)\n    // formData.append(\"topicIDs\", topicIDs)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", courseImage)\n    const data = await fetch(apiUrl + '/evaluation/editEvaluation/' + e, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n            // 'Content-Type': 'multipart/form-data',\n        },\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n        body: formData\n    }).then((res) => res.json());\n    // console.log(\"description\")\n    return data;\n\n}\n\n//api function for adding a course \nasync function createEvaluation( board, qualification, subject, description, course) {\n\n    //////////////////////////////\n    var details = {\n        \"board\": board,\n        \"qualification\": qualification,\n        \"subject\": subject,\n        \"description\": description,\n        \"course\": course,\n       \n    };\n\n\n   \n    //   console.log(details);\n    var formBody = [];\n    //   console.log('API url check ',apiUrl)\n    for (var property in details) {\n        var encodedKey = encodeURIComponent(property);\n        var encodedValue = encodeURIComponent(details[property]);\n        formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    const data = await fetch(apiUrl + '/evaluation/createEvaluation', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formBody,\n    }).then((res) => res.json());\n    \n   \n  \n    console.log('client data console',data);\n    return data;\n    \n\n\n\n}\n\n//api to delete the course from the database\nasync function deleteEvaluation(course) {\n\n    const data = await fetch(apiUrl + '/evaluation/deleteEvaluationById/' + course, {\n\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    console.log('courseID server check', deleteEvaluation)\n    return data;\n}\n\n//api to get the details of a particular topic by sending the courdseId\nasync function getEvaluationById(evaluation) {\n    const data = await fetch(apiUrl + '/evaluation/getEvaluationById/' + evaluation, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\n\n\nasync function getEvaluationByFilter(searchString, startDate, endDate, sortByDate, status, board, subject) {\n    let obj = {\n        board: board,\n        subject: subject,\n        searchString: searchString,\n        startDate: startDate,\n        endDate: endDate,\n        sortByDate: sortByDate,\n        status: status\n    }\n    const queryString = objToQueryString(obj)\n    var apiLink;\n    if (queryString == null) {\n        apiLink = apiUrl + '/course/filterEvaluation'\n    }\n    else {\n        apiLink = apiUrl + '/course/filterEvaluation?' + queryString\n    }\n\n    console.log(\"test call back\", queryString, obj)\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api to get all courses of user\nasync function getAllUserEvaluations(userID) {\n    const data = await fetch(apiUrl + '/userEvaluation/getAllUserEvaluations/' + userID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\nexport { getAllEvaluation,getEvaluationID, editEvaluation, deleteEvaluation, getEvaluationByFilter, getEvaluationById, getAllUserEvaluations, createEvaluation }"]},"metadata":{},"sourceType":"module"}