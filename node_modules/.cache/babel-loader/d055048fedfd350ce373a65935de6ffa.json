{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all boards data using offset and limit!\n\nasync function getAllSubBoard(boardID, page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit,\n    boardID\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/subBoard/filterSubBoard';else apiLink = apiUrl + '/subBoard/filterSubBoard?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to change the status of the user\n\n\nasync function editSubBoards(SubBoardId, name, status) {\n  var details = {\n    \"name\": name,\n    \"status\": status\n  };\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/subBoard/editSubBoard/' + SubBoardId, {\n    method: 'PATCH',\n    headers: {\n      // Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  return data;\n} //api function for adding a Board \n\n\nasync function createSubBoard(name, status, boardID, icon) {\n  // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append('name', name);\n  formData.append('status', status);\n  formData.append('boardID', boardID);\n  formData.append('image', icon);\n  const data = await fetch(apiUrl + '/subBoard/createSubBoard/' + boardID, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/mu',\n\n    },\n    body: formData\n  }); // .then((res) => res.json());\n\n  return data;\n} //api to delete the user from the database\n\n\nasync function deleteSubBoards(subBoardID) {\n  const data = await fetch(apiUrl + '/subBoard/deleteSubBoardById/' + subBoardID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular user by sending the userId\n\n\nasync function getSubBoardById(subBoardID) {\n  const data = await fetch(apiUrl + '/subBoard/getSubBoardById/' + subBoardID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getSubBoardByFilter(boardID, searchString, status, startDate, endDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    boardID,\n    endDate: endDate\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/subBoard/filterSubBoard';else apiLink = apiUrl + '/subBoard/filterSubBoard?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllSubBoard, editSubBoards, deleteSubBoards, getSubBoardById, createSubBoard, getSubBoardByFilter };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/SubBoard/SubBoard.js"],"names":["apiUrl","objToQueryString","getAllSubBoard","boardID","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","editSubBoards","SubBoardId","name","status","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","body","createSubBoard","icon","formData","FormData","append","deleteSubBoards","subBoardID","getSubBoardById","getSubBoardByFilter","searchString","startDate","endDate"],"mappings":"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","sourcesContent":["import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n\n//Fetch all boards data using offset and limit!\nasync function getAllSubBoard(boardID, page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit,\n    boardID\n  })\n  var apiLink;\n  if (queryString == null)\n    apiLink = apiUrl + '/subBoard/filterSubBoard'\n  else\n    apiLink = apiUrl + '/subBoard/filterSubBoard?' + queryString\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\n//api to change the status of the user\nasync function editSubBoards(SubBoardId, name, status) {\n\n  var details = {\n    \"name\": name,\n    \"status\": status\n  };\n\n  var formBody = [];\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/subBoard/editSubBoard/' + SubBoardId, {\n    method: 'PATCH',\n    headers: {\n      // Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formBody,\n  }).then((res) => res.json());\n  return data;\n\n}\n\n//api function for adding a Board \nasync function createSubBoard(name, status, boardID, icon) {\n\n  // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n\n  const formData = new FormData()\n  formData.append('name', name)\n  formData.append('status', status)\n  formData.append('boardID', boardID)\n  formData.append('image', icon)\n  const data = await fetch(apiUrl + '/subBoard/createSubBoard/' + boardID, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      // 'Content-Type': 'application/mu',\n    },\n    body: formData,\n  })\n  // .then((res) => res.json());\n  return data;\n}\n\n//api to delete the user from the database\nasync function deleteSubBoards(subBoardID) {\n  const data = await fetch(apiUrl + '/subBoard/deleteSubBoardById/' + subBoardID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n//api to get the details of a particular user by sending the userId\nasync function getSubBoardById(subBoardID) {\n  const data = await fetch(apiUrl + '/subBoard/getSubBoardById/' + subBoardID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\nasync function getSubBoardByFilter(boardID, searchString, status, startDate, endDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    boardID,\n    endDate: endDate,\n  })\n  var apiLink;\n  if (queryString == null)\n    apiLink = apiUrl + '/subBoard/filterSubBoard'\n  else\n    apiLink = apiUrl + '/subBoard/filterSubBoard?' + queryString\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\nexport { getAllSubBoard, editSubBoards, deleteSubBoards, getSubBoardById, createSubBoard, getSubBoardByFilter }"]},"metadata":{},"sourceType":"module"}