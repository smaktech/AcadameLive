{"ast":null,"code":"import _toConsumableArray from \"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('highlight.js').HighlightResult} HighlightResult\n * @typedef {import('highlight.js').HLJSOptions} HighlightOptions\n * @typedef {import('highlight.js').LanguageFn} HighlightSyntax\n * @typedef {import('highlight.js').Emitter} HighlightEmitter\n *\n * @typedef {{type: 'element', tagName: 'span', properties: {className: Array.<string>}, children: Array.<LowlightElementSpan|Text>}} LowlightElementSpan\n * @typedef {{type: 'root', data: {language: string, relevance: number}, children: Array.<LowlightElementSpan|Text>}} LowlightRoot\n *\n * @typedef {Object} ExtraAutoOptions\n * @property {Array.<string>} [subset] List of allowed languages; defaults to all registered languages\n *\n * @typedef {Object} LowlightOptions\n * @property {string} [prefix='hljs-'] Class prefix\n *\n * @typedef {LowlightOptions & ExtraAutoOptions} LowlightAutoOptions\n */\nimport high from 'highlight.js/lib/core';\nimport { fault } from 'fault';\nvar own = {}.hasOwnProperty;\nvar defaultPrefix = 'hljs-';\n/**\n * Parse `value` (code) according to the `language` (name) grammar.\n *\n * @param {string} language Language name\n * @param {string} value Code value\n * @param {LowlightOptions} [options={}] Settings\n * @returns {LowlightRoot}\n */\n\nfunction highlight(language, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prefix = options.prefix;\n\n  if (typeof language !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', language);\n  }\n\n  if (!high.getLanguage(language)) {\n    throw fault('Unknown language: `%s` is not registered', language);\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  high.configure({\n    __emitter: HastEmitter,\n    classPrefix: prefix\n  });\n  /** @type {HighlightResult & {_emitter: HastEmitter}} */\n  // @ts-ignore our emitter is added.\n\n  var result = high.highlight(value, {\n    language: language,\n    ignoreIllegals: true\n  });\n  high.configure({}); // Highlight.js seems to use this (currently) for broken grammars, so letâ€™s\n  // keep it in there just to be sure.\n\n  /* c8 ignore next 3 */\n\n  if (result.errorRaised) {\n    throw result.errorRaised;\n  }\n\n  result._emitter.root.data.language = result.language;\n  result._emitter.root.data.relevance = result.relevance;\n  return result._emitter.root;\n}\n/**\n * Parse `value` (code) by guessing its grammar.\n *\n * @param {string} value Code value\n * @param {LowlightAutoOptions} [options={}] Settings\n * @returns {LowlightRoot}\n */\n\n\nfunction highlightAuto(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var subset = options.subset || high.listLanguages();\n  var prefix = options.prefix;\n  var index = -1;\n  /** @type {LowlightRoot} */\n\n  var result = {\n    type: 'root',\n    data: {\n      language: null,\n      relevance: 0\n    },\n    children: []\n  };\n  /** @type {string} */\n\n  var name;\n  /** @type {LowlightRoot} */\n\n  var current;\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  while (++index < subset.length) {\n    name = subset[index];\n    if (!high.getLanguage(name)) continue;\n    current = highlight(name, value, options);\n    if (current.data.relevance > result.data.relevance) result = current;\n  }\n\n  return result;\n}\n/**\n * Register a language.\n *\n * @param {string} language Language name\n * @param {HighlightSyntax} syntax Language syntax\n * @returns {void}\n */\n\n\nfunction registerLanguage(language, syntax) {\n  high.registerLanguage(language, syntax);\n}\n/**\n * Get a list of all registered languages.\n *\n * @returns {Array.<string>}\n */\n\n\nfunction listLanguages() {\n  return high.listLanguages();\n}\n\nvar registerAlias =\n/**\n * @type {(\n *   ((language: string, alias: string|Array.<string>) => void) &\n *   ((aliases: Object<string, string|Array.<string>>) => void)\n * )}\n */\n\n/**\n * Register more aliases for an already registered language.\n *\n * @param {string|Object<string, string|Array.<string>>} language\n * @param {string|Array.<string>} [alias]\n * @returns {void}\n */\nfunction registerAlias(language, alias) {\n  /** @type {Object<string, string|Array.<string>>} */\n  var map;\n  /** @type {string} */\n\n  var key;\n\n  if (typeof language === 'string') {\n    map = {};\n    map[language] = alias;\n  } else {\n    map = language;\n  }\n\n  for (key in map) {\n    if (own.call(map, key)) {\n      high.registerAliases(map[key], {\n        languageName: key\n      });\n    }\n  }\n};\n/** @type {HighlightEmitter} */\n\n\nvar HastEmitter = /*#__PURE__*/function () {\n  /**\n   * @param {HighlightOptions} options\n   */\n  function HastEmitter(options) {\n    _classCallCheck(this, HastEmitter);\n\n    /** @type {HighlightOptions} */\n    this.options = options;\n    /** @type {LowlightRoot} */\n\n    this.root = {\n      type: 'root',\n      data: {\n        language: undefined,\n        relevance: 0\n      },\n      children: []\n    };\n    /** @type {[LowlightRoot, ...LowlightElementSpan[]]} */\n\n    this.stack = [this.root];\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  _createClass(HastEmitter, [{\n    key: \"addText\",\n    value: function addText(value) {\n      if (value === '') return;\n      var current = this.stack[this.stack.length - 1];\n      var tail = current.children[current.children.length - 1];\n\n      if (tail && tail.type === 'text') {\n        tail.value += value;\n      } else {\n        current.children.push({\n          type: 'text',\n          value: value\n        });\n      }\n    }\n    /**\n     * @param {string} value\n     * @param {string} name\n     */\n\n  }, {\n    key: \"addKeyword\",\n    value: function addKeyword(value, name) {\n      this.openNode(name);\n      this.addText(value);\n      this.closeNode();\n    }\n    /**\n     * @param {HastEmitter} other\n     * @param {string} name\n     */\n\n  }, {\n    key: \"addSublanguage\",\n    value: function addSublanguage(other, name) {\n      var current = this.stack[this.stack.length - 1];\n      var results = other.root.children;\n\n      if (name) {\n        current.children.push({\n          type: 'element',\n          tagName: 'span',\n          properties: {\n            className: [name]\n          },\n          children: results\n        });\n      } else {\n        var _current$children;\n\n        (_current$children = current.children).push.apply(_current$children, _toConsumableArray(results));\n      }\n    }\n    /**\n     * @param {string} name\n     */\n\n  }, {\n    key: \"openNode\",\n    value: function openNode(name) {\n      var _this = this;\n\n      var className = name.split('.').map(function (d) {\n        return _this.options.classPrefix + d;\n      });\n      var current = this.stack[this.stack.length - 1];\n      /** @type {LowlightElementSpan} */\n\n      var child = {\n        type: 'element',\n        tagName: 'span',\n        properties: {\n          className: className\n        },\n        children: []\n      };\n      current.children.push(child);\n      this.stack.push(child);\n    }\n    /**\n     */\n\n  }, {\n    key: \"closeNode\",\n    value: function closeNode() {\n      this.stack.pop();\n    }\n    /**\n     */\n\n  }, {\n    key: \"closeAllNodes\",\n    value: function closeAllNodes() {}\n    /**\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize() {}\n    /**\n     */\n\n  }, {\n    key: \"toHTML\",\n    value: function toHTML() {\n      return '';\n    }\n  }]);\n\n  return HastEmitter;\n}();\n\nexport var lowlight = {\n  highlight: highlight,\n  highlightAuto: highlightAuto,\n  registerLanguage: registerLanguage,\n  listLanguages: listLanguages,\n  registerAlias: registerAlias\n};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/lowlight/lib/core.js"],"names":["high","fault","own","hasOwnProperty","defaultPrefix","highlight","language","value","options","prefix","getLanguage","undefined","configure","__emitter","HastEmitter","classPrefix","result","ignoreIllegals","errorRaised","_emitter","root","data","relevance","highlightAuto","subset","listLanguages","index","type","children","name","current","length","registerLanguage","syntax","registerAlias","alias","map","key","call","registerAliases","languageName","stack","tail","push","openNode","addText","closeNode","other","results","tagName","properties","className","split","d","child","pop","lowlight"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('highlight.js').HighlightResult} HighlightResult\n * @typedef {import('highlight.js').HLJSOptions} HighlightOptions\n * @typedef {import('highlight.js').LanguageFn} HighlightSyntax\n * @typedef {import('highlight.js').Emitter} HighlightEmitter\n *\n * @typedef {{type: 'element', tagName: 'span', properties: {className: Array.<string>}, children: Array.<LowlightElementSpan|Text>}} LowlightElementSpan\n * @typedef {{type: 'root', data: {language: string, relevance: number}, children: Array.<LowlightElementSpan|Text>}} LowlightRoot\n *\n * @typedef {Object} ExtraAutoOptions\n * @property {Array.<string>} [subset] List of allowed languages; defaults to all registered languages\n *\n * @typedef {Object} LowlightOptions\n * @property {string} [prefix='hljs-'] Class prefix\n *\n * @typedef {LowlightOptions & ExtraAutoOptions} LowlightAutoOptions\n */\n\nimport high from 'highlight.js/lib/core'\nimport {fault} from 'fault'\n\nconst own = {}.hasOwnProperty\n\nconst defaultPrefix = 'hljs-'\n\n/**\n * Parse `value` (code) according to the `language` (name) grammar.\n *\n * @param {string} language Language name\n * @param {string} value Code value\n * @param {LowlightOptions} [options={}] Settings\n * @returns {LowlightRoot}\n */\nfunction highlight(language, value, options = {}) {\n  let prefix = options.prefix\n\n  if (typeof language !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', language)\n  }\n\n  if (!high.getLanguage(language)) {\n    throw fault('Unknown language: `%s` is not registered', language)\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  high.configure({__emitter: HastEmitter, classPrefix: prefix})\n  /** @type {HighlightResult & {_emitter: HastEmitter}} */\n  // @ts-ignore our emitter is added.\n  const result = high.highlight(value, {language, ignoreIllegals: true})\n  high.configure({})\n\n  // Highlight.js seems to use this (currently) for broken grammars, so letâ€™s\n  // keep it in there just to be sure.\n  /* c8 ignore next 3 */\n  if (result.errorRaised) {\n    throw result.errorRaised\n  }\n\n  result._emitter.root.data.language = result.language\n  result._emitter.root.data.relevance = result.relevance\n\n  return result._emitter.root\n}\n\n/**\n * Parse `value` (code) by guessing its grammar.\n *\n * @param {string} value Code value\n * @param {LowlightAutoOptions} [options={}] Settings\n * @returns {LowlightRoot}\n */\nfunction highlightAuto(value, options = {}) {\n  const subset = options.subset || high.listLanguages()\n  let prefix = options.prefix\n  let index = -1\n  /** @type {LowlightRoot} */\n  let result = {\n    type: 'root',\n    data: {language: null, relevance: 0},\n    children: []\n  }\n  /** @type {string} */\n  let name\n  /** @type {LowlightRoot} */\n  let current\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  while (++index < subset.length) {\n    name = subset[index]\n\n    if (!high.getLanguage(name)) continue\n\n    current = highlight(name, value, options)\n\n    if (current.data.relevance > result.data.relevance) result = current\n  }\n\n  return result\n}\n\n/**\n * Register a language.\n *\n * @param {string} language Language name\n * @param {HighlightSyntax} syntax Language syntax\n * @returns {void}\n */\nfunction registerLanguage(language, syntax) {\n  high.registerLanguage(language, syntax)\n}\n\n/**\n * Get a list of all registered languages.\n *\n * @returns {Array.<string>}\n */\nfunction listLanguages() {\n  return high.listLanguages()\n}\n\nconst registerAlias =\n  /**\n   * @type {(\n   *   ((language: string, alias: string|Array.<string>) => void) &\n   *   ((aliases: Object<string, string|Array.<string>>) => void)\n   * )}\n   */\n  (\n    /**\n     * Register more aliases for an already registered language.\n     *\n     * @param {string|Object<string, string|Array.<string>>} language\n     * @param {string|Array.<string>} [alias]\n     * @returns {void}\n     */\n    function (language, alias) {\n      /** @type {Object<string, string|Array.<string>>} */\n      let map\n      /** @type {string} */\n      let key\n\n      if (typeof language === 'string') {\n        map = {}\n        map[language] = alias\n      } else {\n        map = language\n      }\n\n      for (key in map) {\n        if (own.call(map, key)) {\n          high.registerAliases(map[key], {languageName: key})\n        }\n      }\n    }\n  )\n\n/** @type {HighlightEmitter} */\nclass HastEmitter {\n  /**\n   * @param {HighlightOptions} options\n   */\n  constructor(options) {\n    /** @type {HighlightOptions} */\n    this.options = options\n    /** @type {LowlightRoot} */\n    this.root = {\n      type: 'root',\n      data: {language: undefined, relevance: 0},\n      children: []\n    }\n    /** @type {[LowlightRoot, ...LowlightElementSpan[]]} */\n    this.stack = [this.root]\n  }\n\n  /**\n   * @param {string} value\n   */\n  addText(value) {\n    if (value === '') return\n\n    const current = this.stack[this.stack.length - 1]\n    const tail = current.children[current.children.length - 1]\n\n    if (tail && tail.type === 'text') {\n      tail.value += value\n    } else {\n      current.children.push({type: 'text', value})\n    }\n  }\n\n  /**\n   * @param {string} value\n   * @param {string} name\n   */\n  addKeyword(value, name) {\n    this.openNode(name)\n    this.addText(value)\n    this.closeNode()\n  }\n\n  /**\n   * @param {HastEmitter} other\n   * @param {string} name\n   */\n  addSublanguage(other, name) {\n    const current = this.stack[this.stack.length - 1]\n    const results = other.root.children\n\n    if (name) {\n      current.children.push({\n        type: 'element',\n        tagName: 'span',\n        properties: {className: [name]},\n        children: results\n      })\n    } else {\n      current.children.push(...results)\n    }\n  }\n\n  /**\n   * @param {string} name\n   */\n  openNode(name) {\n    const className = name.split('.').map((d) => this.options.classPrefix + d)\n    const current = this.stack[this.stack.length - 1]\n    /** @type {LowlightElementSpan} */\n    const child = {\n      type: 'element',\n      tagName: 'span',\n      properties: {className},\n      children: []\n    }\n\n    current.children.push(child)\n    this.stack.push(child)\n  }\n\n  /**\n   */\n  closeNode() {\n    this.stack.pop()\n  }\n\n  /**\n   */\n  closeAllNodes() {}\n\n  /**\n   */\n  finalize() {}\n\n  /**\n   */\n  toHTML() {\n    return ''\n  }\n}\n\nexport const lowlight = {\n  highlight,\n  highlightAuto,\n  registerLanguage,\n  listLanguages,\n  registerAlias\n}\n"]},"metadata":{},"sourceType":"module"}