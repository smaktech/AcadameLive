{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all Earnings data using offset and limit!\n\nasync function getAllEarnings(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/earning/filterEarning';else apiLink = apiUrl + '/earning/filterEarning?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //function for filter\n\n\nasync function getEarningsByFilter(searchString, status, startDate, endDate, amountFrom, amountTo, page, limit, sortByDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    endDate: endDate,\n    amountFrom: amountFrom,\n    amountTo: amountTo,\n    page: page,\n    limit: limit,\n    sortByDate: sortByDate\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/earning/filterEarning';else apiLink = apiUrl + '/earning/filterEarning?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //function for filter\n\n\nasync function getEarningsByUserId(userId) {\n  var apiLink;\n  apiLink = apiUrl + '/earning/getEarningByUserID/' + userId;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllEarnings, getEarningsByFilter, getEarningsByUserId };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Earnings/Earnings.js"],"names":["apiUrl","objToQueryString","getAllEarnings","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","getEarningsByFilter","searchString","status","startDate","endDate","amountFrom","amountTo","sortByDate","getEarningsByUserId","userId"],"mappings":"AAAE,SAASA,MAAT,QAAuB,cAAvB;AACF,SAASC,gBAAT,QAAiC,cAAjC,C,CAEA;;AACA,eAAeC,cAAf,CAA8BC,IAA9B,EAAoCC,KAApC,EAA2C;AACvC,QAAMC,WAAW,GAAGJ,gBAAgB,CAAC;AACjCE,IAAAA,IAAI,EAAEA,IAD2B;AAEjCC,IAAAA,KAAK,EAAEA;AAF0B,GAAD,CAApC;AAIA,MAAIE,OAAJ;AACA,MAAID,WAAW,IAAI,IAAnB,EACIC,OAAO,GAAGN,MAAM,GAAG,wBAAnB,CADJ,KAGIM,OAAO,GAAGN,MAAM,GAAG,yBAAT,GAAqCK,WAA/C;AACJ,QAAME,IAAI,GAAG,MAAMC,KAAK,CAACF,OAAD,EAAU;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAFqB,GAAV,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH,C,CAED;;;AACA,eAAeQ,mBAAf,CAAmCC,YAAnC,EAAiDC,MAAjD,EAAyDC,SAAzD,EAAoEC,OAApE,EAA4EC,UAA5E,EAAuFC,QAAvF,EAAiGlB,IAAjG,EAAuGC,KAAvG,EAA8GkB,UAA9G,EAA0H;AACtH,QAAMjB,WAAW,GAAGJ,gBAAgB,CAAC;AACjCe,IAAAA,YAAY,EAAEA,YADmB;AAEjCC,IAAAA,MAAM,EAAEA,MAFyB;AAGjCC,IAAAA,SAAS,EAAEA,SAHsB;AAIjCC,IAAAA,OAAO,EAAEA,OAJwB;AAKjCC,IAAAA,UAAU,EAAEA,UALqB;AAMjCC,IAAAA,QAAQ,EAAEA,QANuB;AAOjClB,IAAAA,IAAI,EAAEA,IAP2B;AAQjCC,IAAAA,KAAK,EAAEA,KAR0B;AASjCkB,IAAAA,UAAU,EAAEA;AATqB,GAAD,CAApC;AAWA,MAAIhB,OAAJ;AACA,MAAID,WAAW,IAAI,IAAnB,EACIC,OAAO,GAAGN,MAAM,GAAG,wBAAnB,CADJ,KAGIM,OAAO,GAAGN,MAAM,GAAG,yBAAT,GAAqCK,WAA/C;AACJ,QAAME,IAAI,GAAG,MAAMC,KAAK,CAACF,OAAD,EAAU;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAFqB,GAAV,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH,C,CAED;;;AACA,eAAegB,mBAAf,CAAmCC,MAAnC,EAA2C;AAEvC,MAAIlB,OAAJ;AAEIA,EAAAA,OAAO,GAAGN,MAAM,GAAG,8BAAT,GAAwCwB,MAAlD;AACJ,QAAMjB,IAAI,GAAG,MAAMC,KAAK,CAACF,OAAD,EAAU;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAFqB,GAAV,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH;;AAGD,SAASL,cAAT,EAAyBa,mBAAzB,EAA6CQ,mBAA7C","sourcesContent":["  import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all Earnings data using offset and limit!\nasync function getAllEarnings(page, limit) {\n    const queryString = objToQueryString({\n        page: page,\n        limit: limit,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/earning/filterEarning'\n    else\n        apiLink = apiUrl + '/earning/filterEarning?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//function for filter\nasync function getEarningsByFilter(searchString, status, startDate, endDate,amountFrom,amountTo, page, limit, sortByDate) {\n    const queryString = objToQueryString({\n        searchString: searchString,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        amountFrom: amountFrom,\n        amountTo: amountTo,\n        page: page,\n        limit: limit,\n        sortByDate: sortByDate,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/earning/filterEarning'\n    else\n        apiLink = apiUrl + '/earning/filterEarning?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//function for filter\nasync function getEarningsByUserId(userId) {\n   \n    var apiLink;\n   \n        apiLink = apiUrl + '/earning/getEarningByUserID/'+userId\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\nexport { getAllEarnings, getEarningsByFilter,getEarningsByUserId }"]},"metadata":{},"sourceType":"module"}