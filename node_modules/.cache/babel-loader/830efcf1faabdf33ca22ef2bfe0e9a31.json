{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\n\n\nfunction cpp(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  var C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  var FUNCTION_TYPE_RE = '(?!struct)(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'type',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + '|.)',\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword: 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'string'\n    }), {\n      className: 'string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\('; // https://en.cppreference.com/w/cpp/keyword\n\n  var RESERVED_KEYWORDS = ['alignas', 'alignof', 'and', 'and_eq', 'asm', 'atomic_cancel', 'atomic_commit', 'atomic_noexcept', 'auto', 'bitand', 'bitor', 'break', 'case', 'catch', 'class', 'co_await', 'co_return', 'co_yield', 'compl', 'concept', 'const', 'const_cast|10', 'consteval', 'constexpr', 'constinit', 'continue', 'decltype', 'default', 'delete', 'do', 'dynamic_cast|10', 'else', 'enum', 'explicit', 'export', 'extern', 'false', 'final', 'for', 'friend', 'goto', 'if', 'import', 'inline', 'module', 'mutable', 'namespace', 'new', 'noexcept', 'not', 'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'override', 'private', 'protected', 'public', 'reflexpr', 'register', 'reinterpret_cast|10', 'requires', 'return', 'signed', 'sizeof', 'static', 'static_assert', 'static_cast|10', 'struct', 'switch', 'synchronized', 'template', 'this', 'thread_local', 'throw', 'transaction_safe', 'transaction_safe_dynamic', 'true', 'try', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual', 'volatile', 'while', 'xor', 'xor_eq,']; // https://en.cppreference.com/w/cpp/keyword\n\n  var RESERVED_TYPES = ['bool', 'char', 'char16_t', 'char32_t', 'char8_t', 'double', 'float', 'int', 'long', 'short', 'void', 'wchar_t'];\n  var TYPE_HINTS = ['any', 'auto_ptr', 'barrier', 'binary_semaphore', 'bitset', 'complex', 'condition_variable', 'condition_variable_any', 'counting_semaphore', 'deque', 'false_type', 'future', 'imaginary', 'initializer_list', 'istringstream', 'jthread', 'latch', 'lock_guard', 'multimap', 'multiset', 'mutex', 'optional', 'ostringstream', 'packaged_task', 'pair', 'promise', 'priority_queue', 'queue', 'recursive_mutex', 'recursive_timed_mutex', 'scoped_lock', 'set', 'shared_future', 'shared_lock', 'shared_mutex', 'shared_timed_mutex', 'shared_ptr', 'stack', 'string_view', 'stringstream', 'timed_mutex', 'thread', 'true_type', 'tuple', 'unique_lock', 'unique_ptr', 'unordered_map', 'unordered_multimap', 'unordered_multiset', 'unordered_set', 'variant', 'vector', 'weak_ptr', 'wstring', 'wstring_view'];\n  var FUNCTION_HINTS = ['abort', 'abs', 'acos', 'apply', 'as_const', 'asin', 'atan', 'atan2', 'calloc', 'ceil', 'cerr', 'cin', 'clog', 'cos', 'cosh', 'cout', 'declval', 'endl', 'exchange', 'exit', 'exp', 'fabs', 'floor', 'fmod', 'forward', 'fprintf', 'fputs', 'free', 'frexp', 'fscanf', 'future', 'invoke', 'isalnum', 'isalpha', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'isxdigit', 'labs', 'launder', 'ldexp', 'log', 'log10', 'make_pair', 'make_shared', 'make_shared_for_overwrite', 'make_tuple', 'make_unique', 'malloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'move', 'pow', 'printf', 'putchar', 'puts', 'realloc', 'scanf', 'sin', 'sinh', 'snprintf', 'sprintf', 'sqrt', 'sscanf', 'std', 'stderr', 'stdin', 'stdout', 'strcat', 'strchr', 'strcmp', 'strcpy', 'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'swap', 'tan', 'tanh', 'terminate', 'to_underlying', 'tolower', 'toupper', 'vfprintf', 'visit', 'vprintf', 'vsprintf'];\n  var LITERALS = ['NULL', 'false', 'nullopt', 'nullptr', 'true']; // https://en.cppreference.com/w/cpp/keyword\n\n  var BUILT_IN = ['_Pragma'];\n  var CPP_KEYWORDS = {\n    type: RESERVED_TYPES,\n    keyword: RESERVED_KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_IN,\n    _type_hints: TYPE_HINTS\n  };\n  var FUNCTION_DISPATCH = {\n    className: 'function.dispatch',\n    relevance: 0,\n    keywords: {\n      // Only for relevance, not highlighting.\n      _hint: FUNCTION_HINTS\n    },\n    begin: concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs.IDENT_RE, lookahead(/(<[^<>]+>|)\\s*\\(/))\n  };\n  var EXPRESSION_CONTAINS = [FUNCTION_DISPATCH, PREPROCESSOR, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    }, // needed because we do not have look-behind on the below rule\n    // to prevent it from grabbing the final : in a :: pair\n    {\n      begin: /::/,\n      relevance: 0\n    }, // initializers\n    {\n      begin: /:/,\n      endsWithParent: true,\n      contains: [STRINGS, NUMBERS]\n    }, // allow for multiple declarations, e.g.:\n    // extern void f(int), g(char);\n    {\n      relevance: 0,\n      match: /,/\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: 'C++',\n    aliases: ['cc', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      'function.dispatch': 'built_in'\n    },\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      match: [// extra complexity to deal with `enum class` and `enum struct`\n      /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/, /\\s+/, /\\w+/],\n      className: {\n        1: 'keyword',\n        3: 'title.class'\n      }\n    }])\n  };\n}\n\nmodule.exports = cpp;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/lowlight/node_modules/highlight.js/lib/languages/cpp.js"],"names":["source","re","lookahead","concat","optional","args","joined","map","x","join","cpp","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","RESERVED_KEYWORDS","RESERVED_TYPES","TYPE_HINTS","FUNCTION_HINTS","LITERALS","BUILT_IN","CPP_KEYWORDS","type","literal","built_in","_type_hints","FUNCTION_DISPATCH","_hint","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","endsWithParent","match","name","aliases","classNameAliases","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cpp(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(?!struct)(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'type',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + '|.)',\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'string'\n      }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_KEYWORDS = [\n    'alignas',\n    'alignof',\n    'and',\n    'and_eq',\n    'asm',\n    'atomic_cancel',\n    'atomic_commit',\n    'atomic_noexcept',\n    'auto',\n    'bitand',\n    'bitor',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'co_await',\n    'co_return',\n    'co_yield',\n    'compl',\n    'concept',\n    'const',\n    'const_cast|10',\n    'consteval',\n    'constexpr',\n    'constinit',\n    'continue',\n    'decltype',\n    'default',\n    'delete',\n    'do',\n    'dynamic_cast|10',\n    'else',\n    'enum',\n    'explicit',\n    'export',\n    'extern',\n    'false',\n    'final',\n    'for',\n    'friend',\n    'goto',\n    'if',\n    'import',\n    'inline',\n    'module',\n    'mutable',\n    'namespace',\n    'new',\n    'noexcept',\n    'not',\n    'not_eq',\n    'nullptr',\n    'operator',\n    'or',\n    'or_eq',\n    'override',\n    'private',\n    'protected',\n    'public',\n    'reflexpr',\n    'register',\n    'reinterpret_cast|10',\n    'requires',\n    'return',\n    'signed',\n    'sizeof',\n    'static',\n    'static_assert',\n    'static_cast|10',\n    'struct',\n    'switch',\n    'synchronized',\n    'template',\n    'this',\n    'thread_local',\n    'throw',\n    'transaction_safe',\n    'transaction_safe_dynamic',\n    'true',\n    'try',\n    'typedef',\n    'typeid',\n    'typename',\n    'union',\n    'unsigned',\n    'using',\n    'virtual',\n    'volatile',\n    'while',\n    'xor',\n    'xor_eq,'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_TYPES = [\n    'bool',\n    'char',\n    'char16_t',\n    'char32_t',\n    'char8_t',\n    'double',\n    'float',\n    'int',\n    'long',\n    'short',\n    'void',\n    'wchar_t'\n  ];\n\n  const TYPE_HINTS = [\n    'any',\n    'auto_ptr',\n    'barrier',\n    'binary_semaphore',\n    'bitset',\n    'complex',\n    'condition_variable',\n    'condition_variable_any',\n    'counting_semaphore',\n    'deque',\n    'false_type',\n    'future',\n    'imaginary',\n    'initializer_list',\n    'istringstream',\n    'jthread',\n    'latch',\n    'lock_guard',\n    'multimap',\n    'multiset',\n    'mutex',\n    'optional',\n    'ostringstream',\n    'packaged_task',\n    'pair',\n    'promise',\n    'priority_queue',\n    'queue',\n    'recursive_mutex',\n    'recursive_timed_mutex',\n    'scoped_lock',\n    'set',\n    'shared_future',\n    'shared_lock',\n    'shared_mutex',\n    'shared_timed_mutex',\n    'shared_ptr',\n    'stack',\n    'string_view',\n    'stringstream',\n    'timed_mutex',\n    'thread',\n    'true_type',\n    'tuple',\n    'unique_lock',\n    'unique_ptr',\n    'unordered_map',\n    'unordered_multimap',\n    'unordered_multiset',\n    'unordered_set',\n    'variant',\n    'vector',\n    'weak_ptr',\n    'wstring',\n    'wstring_view'\n  ];\n\n  const FUNCTION_HINTS = [\n    'abort',\n    'abs',\n    'acos',\n    'apply',\n    'as_const',\n    'asin',\n    'atan',\n    'atan2',\n    'calloc',\n    'ceil',\n    'cerr',\n    'cin',\n    'clog',\n    'cos',\n    'cosh',\n    'cout',\n    'declval',\n    'endl',\n    'exchange',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'forward',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'fscanf',\n    'future',\n    'invoke',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'labs',\n    'launder',\n    'ldexp',\n    'log',\n    'log10',\n    'make_pair',\n    'make_shared',\n    'make_shared_for_overwrite',\n    'make_tuple',\n    'make_unique',\n    'malloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'move',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'realloc',\n    'scanf',\n    'sin',\n    'sinh',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'std',\n    'stderr',\n    'stdin',\n    'stdout',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'swap',\n    'tan',\n    'tanh',\n    'terminate',\n    'to_underlying',\n    'tolower',\n    'toupper',\n    'vfprintf',\n    'visit',\n    'vprintf',\n    'vsprintf'\n  ];\n\n  const LITERALS = [\n    'NULL',\n    'false',\n    'nullopt',\n    'nullptr',\n    'true'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const BUILT_IN = [\n    '_Pragma'\n  ];\n\n  const CPP_KEYWORDS = {\n    type: RESERVED_TYPES,\n    keyword: RESERVED_KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_IN,\n    _type_hints: TYPE_HINTS\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: 'function.dispatch',\n    relevance: 0,\n    keywords: {\n      // Only for relevance, not highlighting.\n      _hint: FUNCTION_HINTS\n    },\n    begin: concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      lookahead(/(<[^<>]+>|)\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      'function.dispatch': 'built_in'\n    },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          match: [\n            // extra complexity to deal with `enum class` and `enum struct`\n            /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n            /\\s+/,\n            /\\w+/\n          ],\n          className: {\n            1: 'keyword',\n            3: 'title.class'\n          }\n        }\n      ])\n  };\n}\n\nmodule.exports = cpp;\n"]},"metadata":{},"sourceType":"script"}