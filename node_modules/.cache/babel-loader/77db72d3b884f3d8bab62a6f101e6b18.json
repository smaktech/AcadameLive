{"ast":null,"code":"import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from'react';import{useNavigate,useParams,useLocation}from'react-router-dom';// @mui\nimport{Box,Divider,Stack}from'@mui/material';// redux\nimport{useDispatch,useSelector}from'../../../redux/store';import{addRecipients,onSendMessage,getConversation,getParticipants,markConversationAsRead,resetActiveConversation}from'../../../redux/slices/chat';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';//\nimport ChatRoom from'./ChatRoom';import ChatMessageList from'./ChatMessageList';import ChatHeaderDetail from'./ChatHeaderDetail';import ChatMessageInput from'./ChatMessageInput';import ChatHeaderCompose from'./ChatHeaderCompose';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var conversationSelector=function conversationSelector(state){var _state$chat=state.chat,conversations=_state$chat.conversations,activeConversationId=_state$chat.activeConversationId;var conversation=activeConversationId?conversations.byId[activeConversationId]:null;if(conversation){return conversation;}var initState={id:'',messages:[],participants:[],unreadCount:0,type:''};return initState;};export default function ChatWindow(){var dispatch=useDispatch();var navigate=useNavigate();var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useParams=useParams(),conversationKey=_useParams.conversationKey;var _useSelector=useSelector(function(state){return state.chat;}),contacts=_useSelector.contacts,recipients=_useSelector.recipients,participants=_useSelector.participants,activeConversationId=_useSelector.activeConversationId;var conversation=useSelector(function(state){return conversationSelector(state);});var mode=conversationKey?'DETAIL':'COMPOSE';var displayParticipants=participants.filter(function(item){return item.id!=='8864c717-587d-472a-929a-8e5f298024da-0';});useEffect(function(){var getDetails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(getParticipants(conversationKey));_context.prev=1;_context.next=4;return dispatch(getConversation(conversationKey));case 4:_context.next=10;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);console.error(_context.t0);navigate(PATH_DASHBOARD.chat.new);case 10:case\"end\":return _context.stop();}}},_callee,null,[[1,6]]);}));return function getDetails(){return _ref.apply(this,arguments);};}();if(conversationKey){getDetails();}else if(activeConversationId){dispatch(resetActiveConversation());}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[conversationKey]);useEffect(function(){if(activeConversationId){dispatch(markConversationAsRead(activeConversationId));}},[dispatch,activeConversationId]);var handleAddRecipients=function handleAddRecipients(recipients){dispatch(addRecipients(recipients));};var handleSendMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:try{dispatch(onSendMessage(value));}catch(error){console.error(error);}case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSendMessage(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Stack,{sx:{flexGrow:1,minWidth:'1px'},children:[mode==='DETAIL'?/*#__PURE__*/_jsx(ChatHeaderDetail,{participants:displayParticipants}):/*#__PURE__*/_jsx(ChatHeaderCompose,{recipients:recipients,contacts:Object.values(contacts.byId),onAddRecipients:handleAddRecipients}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1,display:'flex',overflow:'hidden'},children:[/*#__PURE__*/_jsxs(Stack,{sx:{flexGrow:1},children:[/*#__PURE__*/_jsx(ChatMessageList,{conversation:conversation}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(ChatMessageInput,{conversationId:activeConversationId,onSend:handleSendMessage,disabled:pathname===PATH_DASHBOARD.chat.new})]}),mode==='DETAIL'&&/*#__PURE__*/_jsx(ChatRoom,{conversation:conversation,participants:displayParticipants})]})]});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","Stack","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","PATH_DASHBOARD","ChatRoom","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","conversationSelector","state","chat","conversations","activeConversationId","conversation","byId","initState","id","messages","participants","unreadCount","type","ChatWindow","dispatch","navigate","pathname","conversationKey","contacts","recipients","mode","displayParticipants","filter","item","getDetails","console","error","new","handleAddRecipients","handleSendMessage","value","flexGrow","minWidth","Object","values","display","overflow"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\n// @mui\nimport { Box, Divider, Stack } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  addRecipients,\n  onSendMessage,\n  getConversation,\n  getParticipants,\n  markConversationAsRead,\n  resetActiveConversation,\n} from '../../../redux/slices/chat';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose';\n\n// ----------------------------------------------------------------------\n\nconst conversationSelector = (state) => {\n  const { conversations, activeConversationId } = state.chat;\n  const conversation = activeConversationId ? conversations.byId[activeConversationId] : null;\n  if (conversation) {\n    return conversation;\n  }\n  const initState = {\n    id: '',\n    messages: [],\n    participants: [],\n    unreadCount: 0,\n    type: '',\n  };\n  return initState;\n};\n\nexport default function ChatWindow() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const { conversationKey } = useParams();\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.chat);\n  const conversation = useSelector((state) => conversationSelector(state));\n\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter((item) => item.id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(conversationKey));\n      try {\n        await dispatch(getConversation(conversationKey));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conversationKey]);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipients = (recipients) => {\n    dispatch(addRecipients(recipients));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      dispatch(onSendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Stack sx={{ flexGrow: 1, minWidth: '1px' }}>\n      {mode === 'DETAIL' ? (\n        <ChatHeaderDetail participants={displayParticipants} />\n      ) : (\n        <ChatHeaderCompose\n          recipients={recipients}\n          contacts={Object.values(contacts.byId)}\n          onAddRecipients={handleAddRecipients}\n        />\n      )}\n\n      <Divider />\n\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\n        <Stack sx={{ flexGrow: 1 }}>\n          <ChatMessageList conversation={conversation} />\n\n          <Divider />\n\n          <ChatMessageInput\n            conversationId={activeConversationId}\n            onSend={handleSendMessage}\n            disabled={pathname === PATH_DASHBOARD.chat.new}\n          />\n        </Stack>\n\n        {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />}\n      </Box>\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}