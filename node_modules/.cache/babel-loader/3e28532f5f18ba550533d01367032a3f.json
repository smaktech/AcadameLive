{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\calendar\\\\CalendarForm.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { isBefore } from 'date-fns';\nimport isEmpty from 'lodash/isEmpty';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport { Box, Button, Switch, Tooltip, TextField, IconButton, DialogContent, DialogActions, FormControlLabel } from '@mui/material';\nimport { LoadingButton, MobileDateTimePicker } from '@mui/lab'; // redux\n\nimport { useDispatch } from '../../../redux/store';\nimport { createEvent, updateEvent, deleteEvent } from '../../../redux/slices/calendar'; // hooks\n\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport ColorSinglePicker from '../../../components/ColorSinglePicker'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLOR_OPTIONS = ['#00AB55', // theme.palette.primary.main,\n'#1890FF', // theme.palette.info.main,\n'#94D82D', // theme.palette.success.main,\n'#FFC107', // theme.palette.warning.main,\n'#FF4842', // theme.palette.error.main\n'#04297A', // theme.palette.info.darker\n'#7A0C2E' // theme.palette.error.darker\n];\n\nconst getInitialValues = (event, range) => {\n  const _event = {\n    title: '',\n    description: '',\n    textColor: '#1890FF',\n    allDay: false,\n    start: range ? new Date(range.start) : new Date(),\n    end: range ? new Date(range.end) : new Date()\n  };\n\n  if (event || range) {\n    return merge({}, _event, event);\n  }\n\n  return _event;\n}; // ----------------------------------------------------------------------\n\n\nCalendarForm.propTypes = {\n  event: PropTypes.object,\n  range: PropTypes.object,\n  onCancel: PropTypes.func\n};\nexport default function CalendarForm(_ref) {\n  _s();\n\n  let {\n    event,\n    range,\n    onCancel\n  } = _ref;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const dispatch = useDispatch();\n  const isMountedRef = useIsMountedRef();\n  const isCreating = isEmpty(event);\n  const EventSchema = Yup.object().shape({\n    title: Yup.string().max(255).required('Title is required'),\n    description: Yup.string().max(5000)\n  });\n  const formik = useFormik({\n    initialValues: getInitialValues(event, range),\n    validationSchema: EventSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        resetForm,\n        setSubmitting\n      } = _ref2;\n\n      try {\n        const newEvent = {\n          title: values.title,\n          description: values.description,\n          textColor: values.textColor,\n          allDay: values.allDay,\n          start: values.start,\n          end: values.end\n        };\n\n        if (event.id) {\n          dispatch(updateEvent(event.id, newEvent));\n          enqueueSnackbar('Update event success', {\n            variant: 'success'\n          });\n        } else {\n          dispatch(createEvent(newEvent));\n          enqueueSnackbar('Create event success', {\n            variant: 'success'\n          });\n        }\n\n        onCancel();\n\n        if (isMountedRef.current) {\n          resetForm();\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps,\n    setFieldValue\n  } = formik;\n\n  const handleDelete = async () => {\n    if (!event.id) return;\n\n    try {\n      onCancel();\n      dispatch(deleteEvent(event.id));\n      enqueueSnackbar('Delete event success', {\n        variant: 'success'\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const isDateError = isBefore(new Date(values.end), new Date(values.start));\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        sx: {\n          pb: 0,\n          overflowY: 'unset'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Title\",\n          ...getFieldProps('title'),\n          error: Boolean(touched.title && errors.title),\n          helperText: touched.title && errors.title,\n          sx: {\n            mb: 3\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          maxRows: 4,\n          label: \"Description\",\n          ...getFieldProps('description'),\n          error: Boolean(touched.description && errors.description),\n          helperText: touched.description && errors.description,\n          sx: {\n            mb: 3\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: values.allDay,\n            ...getFieldProps('allDay')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 22\n          }, this),\n          label: \"All day\",\n          sx: {\n            mb: 3\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MobileDateTimePicker, {\n          label: \"Start date\",\n          value: values.start,\n          inputFormat: \"dd/MM/yyyy hh:mm a\",\n          onChange: date => setFieldValue('start', date),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            fullWidth: true,\n            sx: {\n              mb: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MobileDateTimePicker, {\n          label: \"End date\",\n          value: values.end,\n          inputFormat: \"dd/MM/yyyy hh:mm a\",\n          onChange: date => setFieldValue('end', date),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            fullWidth: true,\n            error: Boolean(isDateError),\n            helperText: isDateError && 'End date must be later than start date',\n            sx: {\n              mb: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ColorSinglePicker, { ...getFieldProps('textColor'),\n          colors: COLOR_OPTIONS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [!isCreating && /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Delete Event\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleDelete,\n            children: /*#__PURE__*/_jsxDEV(Iconify, {\n              icon: \"eva:trash-2-outline\",\n              width: 20,\n              height: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flexGrow: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          variant: \"outlined\",\n          color: \"inherit\",\n          onClick: onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          loadingIndicator: \"Loading...\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CalendarForm, \"nPO0+2rwk8GHKgZ9JegJBjfoYzM=\", false, function () {\n  return [useSnackbar, useDispatch, useIsMountedRef, useFormik];\n});\n\n_c = CalendarForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/calendar/CalendarForm.js"],"names":["PropTypes","Yup","merge","isBefore","isEmpty","useSnackbar","useFormik","Form","FormikProvider","Box","Button","Switch","Tooltip","TextField","IconButton","DialogContent","DialogActions","FormControlLabel","LoadingButton","MobileDateTimePicker","useDispatch","createEvent","updateEvent","deleteEvent","useIsMountedRef","Iconify","ColorSinglePicker","COLOR_OPTIONS","getInitialValues","event","range","_event","title","description","textColor","allDay","start","Date","end","CalendarForm","propTypes","object","onCancel","func","enqueueSnackbar","dispatch","isMountedRef","isCreating","EventSchema","shape","string","max","required","formik","initialValues","validationSchema","onSubmit","values","resetForm","setSubmitting","newEvent","id","variant","current","error","console","errors","touched","handleSubmit","isSubmitting","getFieldProps","setFieldValue","handleDelete","isDateError","pb","overflowY","Boolean","mb","date","params","flexGrow"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { isBefore } from 'date-fns';\nimport isEmpty from 'lodash/isEmpty';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport {\n  Box,\n  Button,\n  Switch,\n  Tooltip,\n  TextField,\n  IconButton,\n  DialogContent,\n  DialogActions,\n  FormControlLabel,\n} from '@mui/material';\nimport { LoadingButton, MobileDateTimePicker } from '@mui/lab';\n// redux\nimport { useDispatch } from '../../../redux/store';\nimport { createEvent, updateEvent, deleteEvent } from '../../../redux/slices/calendar';\n// hooks\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport Iconify from '../../../components/Iconify';\nimport ColorSinglePicker from '../../../components/ColorSinglePicker';\n\n// ----------------------------------------------------------------------\n\nconst COLOR_OPTIONS = [\n  '#00AB55', // theme.palette.primary.main,\n  '#1890FF', // theme.palette.info.main,\n  '#94D82D', // theme.palette.success.main,\n  '#FFC107', // theme.palette.warning.main,\n  '#FF4842', // theme.palette.error.main\n  '#04297A', // theme.palette.info.darker\n  '#7A0C2E', // theme.palette.error.darker\n];\n\nconst getInitialValues = (event, range) => {\n  const _event = {\n    title: '',\n    description: '',\n    textColor: '#1890FF',\n    allDay: false,\n    start: range ? new Date(range.start) : new Date(),\n    end: range ? new Date(range.end) : new Date(),\n  };\n\n  if (event || range) {\n    return merge({}, _event, event);\n  }\n\n  return _event;\n};\n\n// ----------------------------------------------------------------------\n\nCalendarForm.propTypes = {\n  event: PropTypes.object,\n  range: PropTypes.object,\n  onCancel: PropTypes.func,\n};\n\nexport default function CalendarForm({ event, range, onCancel }) {\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const isMountedRef = useIsMountedRef();\n\n  const isCreating = isEmpty(event);\n\n  const EventSchema = Yup.object().shape({\n    title: Yup.string().max(255).required('Title is required'),\n    description: Yup.string().max(5000),\n  });\n\n  const formik = useFormik({\n    initialValues: getInitialValues(event, range),\n    validationSchema: EventSchema,\n    onSubmit: async (values, { resetForm, setSubmitting }) => {\n      try {\n        const newEvent = {\n          title: values.title,\n          description: values.description,\n          textColor: values.textColor,\n          allDay: values.allDay,\n          start: values.start,\n          end: values.end,\n        };\n        if (event.id) {\n          dispatch(updateEvent(event.id, newEvent));\n          enqueueSnackbar('Update event success', { variant: 'success' });\n        } else {\n          dispatch(createEvent(newEvent));\n          enqueueSnackbar('Create event success', { variant: 'success' });\n        }\n        onCancel();\n        if (isMountedRef.current) {\n          resetForm();\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      }\n    },\n  });\n\n  const { values, errors, touched, handleSubmit, isSubmitting, getFieldProps, setFieldValue } = formik;\n\n  const handleDelete = async () => {\n    if (!event.id) return;\n    try {\n      onCancel();\n      dispatch(deleteEvent(event.id));\n      enqueueSnackbar('Delete event success', { variant: 'success' });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const isDateError = isBefore(new Date(values.end), new Date(values.start));\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <DialogContent sx={{ pb: 0, overflowY: 'unset' }}>\n          <TextField\n            fullWidth\n            label=\"Title\"\n            {...getFieldProps('title')}\n            error={Boolean(touched.title && errors.title)}\n            helperText={touched.title && errors.title}\n            sx={{ mb: 3 }}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            maxRows={4}\n            label=\"Description\"\n            {...getFieldProps('description')}\n            error={Boolean(touched.description && errors.description)}\n            helperText={touched.description && errors.description}\n            sx={{ mb: 3 }}\n          />\n\n          <FormControlLabel\n            control={<Switch checked={values.allDay} {...getFieldProps('allDay')} />}\n            label=\"All day\"\n            sx={{ mb: 3 }}\n          />\n\n          <MobileDateTimePicker\n            label=\"Start date\"\n            value={values.start}\n            inputFormat=\"dd/MM/yyyy hh:mm a\"\n            onChange={(date) => setFieldValue('start', date)}\n            renderInput={(params) => <TextField {...params} fullWidth sx={{ mb: 3 }} />}\n          />\n\n          <MobileDateTimePicker\n            label=\"End date\"\n            value={values.end}\n            inputFormat=\"dd/MM/yyyy hh:mm a\"\n            onChange={(date) => setFieldValue('end', date)}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                fullWidth\n                error={Boolean(isDateError)}\n                helperText={isDateError && 'End date must be later than start date'}\n                sx={{ mb: 3 }}\n              />\n            )}\n          />\n\n          <ColorSinglePicker {...getFieldProps('textColor')} colors={COLOR_OPTIONS} />\n        </DialogContent>\n\n        <DialogActions>\n          {!isCreating && (\n            <Tooltip title=\"Delete Event\">\n              <IconButton onClick={handleDelete}>\n                <Iconify icon=\"eva:trash-2-outline\" width={20} height={20} />\n              </IconButton>\n            </Tooltip>\n          )}\n          <Box sx={{ flexGrow: 1 }} />\n          <Button type=\"button\" variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} loadingIndicator=\"Loading...\">\n            Add\n          </LoadingButton>\n        </DialogActions>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}