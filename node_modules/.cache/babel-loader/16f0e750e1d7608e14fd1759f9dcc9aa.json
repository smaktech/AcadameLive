{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all boards data using offset and limit!\n\nasync function getAllBoard(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/board/filterBoard';else apiLink = apiUrl + '/board/filterBoard?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to change the status of the user,icon\n\n\nasync function editBoards(BoardId, name, status, icon) {\n  // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append('name', name);\n  formData.append('status', status);\n  formData.append('image', icon);\n  const data = await fetch(apiUrl + '/Board/editBoard/' + BoardId, {\n    method: 'PATCH',\n    headers: {// Accept: 'application/json',\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a Board \n\n\nasync function createBoard(name, status, icon) {\n  console.log(name, status, icon); // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  // let headers = new Headers();\n  // headers.append('Access-Control-Allow-Origin', apiUrl);\n  // headers.append('Access-Control-Allow-Credentials', 'true');\n  // headers.append('GET', 'POST', 'OPTIONS');\n\n  const formData = new FormData();\n  formData.append('name', name);\n  formData.append('status', status);\n  formData.append('image', icon);\n\n  for (var pair of formData.entries()) {\n    console.log(pair[0] + ', ' + pair[1]);\n  }\n\n  const data = await fetch(apiUrl + '/board/createBoard', {\n    method: 'POST',\n    // headers: {\n    //   Accept: 'application/json',\n    //   'Content-Type': 'application/x-www-form-urlencoded',\n    // },\n    // headers,\n    body: formData\n  }); // .then((res) => res.json());\n\n  return data;\n} //api to delete the user from the database\n\n\nasync function deleteBoards(boardID) {\n  const data = await fetch(apiUrl + '/Board/deleteBoardById/' + boardID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular user by sending the userId\n\n\nasync function getBoardById(boardID) {\n  const data = await fetch(apiUrl + '/Board/getBoardById/' + boardID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getBoardByFilter(searchString, status, startDate, endDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    endDate: endDate\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/board/filterBoard';else apiLink = apiUrl + '/board/filterBoard?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllBoard, editBoards, deleteBoards, getBoardById, createBoard, getBoardByFilter };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Boards/Boards.js"],"names":["apiUrl","objToQueryString","getAllBoard","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","editBoards","BoardId","name","status","icon","formData","FormData","append","body","createBoard","console","log","pair","entries","deleteBoards","boardID","getBoardById","getBoardByFilter","searchString","startDate","endDate"],"mappings":"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","sourcesContent":["import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n\n//Fetch all boards data using offset and limit!\nasync function getAllBoard(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit,\n  })\n  var apiLink;\n  if (queryString == null)\n    apiLink = apiUrl + '/board/filterBoard'\n  else\n    apiLink = apiUrl + '/board/filterBoard?' + queryString\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\n//api to change the status of the user,icon\nasync function editBoards(BoardId, name, status,icon) {\n\n  // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n\n  const formData = new FormData()\n  formData.append('name', name)\n  formData.append('status', status)\n  formData.append('image', icon)\n  const data = await fetch(apiUrl + '/Board/editBoard/' + BoardId, {\n    method: 'PATCH',\n    headers: {\n      // Accept: 'application/json',\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData,\n  }).then((res) => res.json());\n  return data;\n\n}\n\n//api function for adding a Board \nasync function createBoard(name, status, icon) {\n\n  console.log(name, status, icon)\n  // var details = {\n  //   \"name\": name,\n  //   \"status\": status\n  // };\n\n  // var formBody = [];\n  // for (var property in details) {\n  //   var encodedKey = encodeURIComponent(property);\n  //   var encodedValue = encodeURIComponent(details[property]);\n  //   formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n\n  // let headers = new Headers();\n  // headers.append('Access-Control-Allow-Origin', apiUrl);\n  // headers.append('Access-Control-Allow-Credentials', 'true');\n  // headers.append('GET', 'POST', 'OPTIONS');\n\n  const formData = new FormData()\n  formData.append('name', name)\n  formData.append('status', status)\n  formData.append('image', icon)\n\n  for (var pair of formData.entries()) {\n    console.log(pair[0] + ', ' + pair[1]);\n  }\n  const data = await fetch(apiUrl + '/board/createBoard', {\n    method: 'POST',\n    // headers: {\n    //   Accept: 'application/json',\n    //   'Content-Type': 'application/x-www-form-urlencoded',\n    // },\n    // headers,\n    body: formData,\n  })\n  // .then((res) => res.json());\n  return data;\n}\n\n//api to delete the user from the database\nasync function deleteBoards(boardID) {\n  const data = await fetch(apiUrl + '/Board/deleteBoardById/' + boardID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n//api to get the details of a particular user by sending the userId\nasync function getBoardById(boardID) {\n  const data = await fetch(apiUrl + '/Board/getBoardById/' + boardID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\nasync function getBoardByFilter(searchString, status, startDate, endDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    endDate: endDate,\n  })\n  var apiLink;\n  if (queryString == null)\n    apiLink = apiUrl + '/board/filterBoard'\n  else\n    apiLink = apiUrl + '/board/filterBoard?' + queryString\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n  return data;\n}\n\n\nexport { getAllBoard, editBoards, deleteBoards, getBoardById, createBoard, getBoardByFilter }"]},"metadata":{},"sourceType":"module"}