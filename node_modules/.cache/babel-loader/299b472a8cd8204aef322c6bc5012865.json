{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\auth\\\\login\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik'; // @mui\n\nimport { Link, Stack, Alert, Checkbox, TextField, IconButton, InputAdornment, FormControlLabel } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // routes\n\nimport { PATH_AUTH } from '../../../routes/paths'; // hooks\n\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport { IconButtonAnimate } from '../../../components/animate'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const {\n    login\n  } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [showPassword, setShowPassword] = useState(false);\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        setErrors,\n        setSubmitting,\n        resetForm\n      } = _ref;\n\n      try {\n        await login(values.email, values.password);\n        enqueueSnackbar('Login success', {\n          variant: 'success',\n          action: key => /*#__PURE__*/_jsxDEV(IconButtonAnimate, {\n            size: \"small\",\n            onClick: () => closeSnackbar(key),\n            children: /*#__PURE__*/_jsxDEV(Iconify, {\n              icon: 'eva:close-fill'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        });\n\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        resetForm();\n\n        if (isMountedRef.current) {\n          setSubmitting(false);\n          setErrors({\n            afterSubmit: error.message\n          });\n        }\n      }\n    }\n  });\n  const {\n    errors,\n    touched,\n    values,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword(show => !show);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [errors.afterSubmit && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: errors.afterSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleShowPassword,\n                edge: \"end\",\n                children: /*#__PURE__*/_jsxDEV(Iconify, {\n                  icon: showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        sx: {\n          my: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, { ...getFieldProps('remember'),\n            checked: values.remember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 22\n          }, this),\n          label: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          variant: \"subtitle2\",\n          to: PATH_AUTH.resetPassword,\n          children: \"Forgot password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"Jtl9KPI/5zwbutmeNiWsrTmEhhg=\", false, function () {\n  return [useAuth, useIsMountedRef, useSnackbar, useFormik];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/auth/login/LoginForm.js"],"names":["Yup","useState","useSnackbar","Link","RouterLink","useFormik","Form","FormikProvider","Stack","Alert","Checkbox","TextField","IconButton","InputAdornment","FormControlLabel","LoadingButton","PATH_AUTH","useAuth","useIsMountedRef","Iconify","IconButtonAnimate","LoginForm","login","isMountedRef","enqueueSnackbar","closeSnackbar","showPassword","setShowPassword","LoginSchema","object","shape","email","string","required","password","formik","initialValues","remember","validationSchema","onSubmit","values","setErrors","setSubmitting","resetForm","variant","action","key","current","error","console","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","handleShowPassword","show","Boolean","endAdornment","my","resetPassword"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// @mui\nimport { Link, Stack, Alert, Checkbox, TextField, IconButton, InputAdornment, FormControlLabel } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_AUTH } from '../../../routes/paths';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport Iconify from '../../../components/Iconify';\nimport { IconButtonAnimate } from '../../../components/animate';\n\n// ----------------------------------------------------------------------\n\nexport default function LoginForm() {\n  const { login } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true,\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values, { setErrors, setSubmitting, resetForm }) => {\n      try {\n        await login(values.email, values.password);\n        enqueueSnackbar('Login success', {\n          variant: 'success',\n          action: (key) => (\n            <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n              <Iconify icon={'eva:close-fill'} />\n            </IconButtonAnimate>\n          ),\n        });\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        resetForm();\n        if (isMountedRef.current) {\n          setSubmitting(false);\n          setErrors({ afterSubmit: error.message });\n        }\n      }\n    },\n  });\n\n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword((show) => !show);\n  };\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\n                    <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\n          <FormControlLabel\n            control={<Checkbox {...getFieldProps('remember')} checked={values.remember} />}\n            label=\"Remember me\"\n          />\n\n          <Link component={RouterLink} variant=\"subtitle2\" to={PATH_AUTH.resetPassword}>\n            Forgot password?\n          </Link>\n        </Stack>\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Login\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}