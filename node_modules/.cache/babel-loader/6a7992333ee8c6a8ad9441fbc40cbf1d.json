{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\viewport-animation\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState, useCallback } from 'react';\nimport MapGL, { FlyToInterpolator } from 'react-map-gl'; // components\n\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../../components/map'; //\n\nimport ControlPanel from './ControlPanel'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nMapViewportAnimation.propTypes = {\n  data: PropTypes.array\n};\nexport default function MapViewportAnimation(_ref) {\n  _s();\n\n  let {\n    data,\n    ...other\n  } = _ref;\n  const [selectedCity, setSelectedCity] = useState(data[2].city);\n  const [viewport, setViewport] = useState({\n    latitude: 37.7751,\n    longitude: -122.4193,\n    zoom: 10,\n    bearing: 0,\n    pitch: 0\n  });\n  const handleChangeCity = useCallback((event, _ref2) => {\n    let {\n      longitude,\n      latitude\n    } = _ref2;\n    setSelectedCity(event.target.value);\n    setViewport({\n      longitude,\n      latitude,\n      zoom: 10,\n      transitionInterpolator: new FlyToInterpolator({\n        speed: 1.2\n      }),\n      transitionDuration: 'auto'\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n      onViewportChange: setViewport,\n      dragRotate: false,\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(MapControlScale, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlNavigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlFullscreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlGeolocate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n        data: data,\n        selectedCity: selectedCity,\n        handleChange: handleChangeCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MapViewportAnimation, \"FzDFFmCUL0tblBszBTJAGvX9BGw=\");\n\n_c = MapViewportAnimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapViewportAnimation\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/viewport-animation/index.js"],"names":["PropTypes","useState","useCallback","MapGL","FlyToInterpolator","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","ControlPanel","MapViewportAnimation","propTypes","data","array","other","selectedCity","setSelectedCity","city","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","handleChangeCity","event","target","value","transitionInterpolator","speed","transitionDuration"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,KAAP,IAAgBC,iBAAhB,QAAyC,cAAzC,C,CACA;;AACA,SACEC,eADF,EAEEC,mBAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAKO,yBALP,C,CAMA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;;AAEAC,oBAAoB,CAACC,SAArB,GAAiC;AAC/BC,EAAAA,IAAI,EAAEZ,SAAS,CAACa;AADe,CAAjC;AAIA,eAAe,SAASH,oBAAT,OAAkD;AAAA;;AAAA,MAApB;AAAEE,IAAAA,IAAF;AAAQ,OAAGE;AAAX,GAAoB;AAC/D,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAACW,IAAI,CAAC,CAAD,CAAJ,CAAQK,IAAT,CAAhD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC;AACvCmB,IAAAA,QAAQ,EAAE,OAD6B;AAEvCC,IAAAA,SAAS,EAAE,CAAC,QAF2B;AAGvCC,IAAAA,IAAI,EAAE,EAHiC;AAIvCC,IAAAA,OAAO,EAAE,CAJ8B;AAKvCC,IAAAA,KAAK,EAAE;AALgC,GAAD,CAAxC;AAQA,QAAMC,gBAAgB,GAAGvB,WAAW,CAAC,CAACwB,KAAD,YAAoC;AAAA,QAA5B;AAAEL,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAA4B;AACvEJ,IAAAA,eAAe,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACAT,IAAAA,WAAW,CAAC;AACVE,MAAAA,SADU;AAEVD,MAAAA,QAFU;AAGVE,MAAAA,IAAI,EAAE,EAHI;AAIVO,MAAAA,sBAAsB,EAAE,IAAIzB,iBAAJ,CAAsB;AAAE0B,QAAAA,KAAK,EAAE;AAAT,OAAtB,CAJd;AAKVC,MAAAA,kBAAkB,EAAE;AALV,KAAD,CAAX;AAOD,GATmC,EASjC,EATiC,CAApC;AAWA,sBACE;AAAA,2BACE,QAAC,KAAD,OAAWb,QAAX;AAAqB,MAAA,gBAAgB,EAAEC,WAAvC;AAAoD,MAAA,UAAU,EAAE,KAAhE;AAAA,SAA2EL,KAA3E;AAAA,8BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,cAJF,eAME,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEF,IAApB;AAA0B,QAAA,YAAY,EAAEG,YAAxC;AAAsD,QAAA,YAAY,EAAEU;AAApE;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAYD;;GAjCuBf,oB;;KAAAA,oB","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useCallback } from 'react';\nimport MapGL, { FlyToInterpolator } from 'react-map-gl';\n// components\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen,\n} from '../../../components/map';\n//\nimport ControlPanel from './ControlPanel';\n\n// ----------------------------------------------------------------------\n\nMapViewportAnimation.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default function MapViewportAnimation({ data, ...other }) {\n  const [selectedCity, setSelectedCity] = useState(data[2].city);\n  const [viewport, setViewport] = useState({\n    latitude: 37.7751,\n    longitude: -122.4193,\n    zoom: 10,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  const handleChangeCity = useCallback((event, { longitude, latitude }) => {\n    setSelectedCity(event.target.value);\n    setViewport({\n      longitude,\n      latitude,\n      zoom: 10,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: 'auto',\n    });\n  }, []);\n\n  return (\n    <>\n      <MapGL {...viewport} onViewportChange={setViewport} dragRotate={false} {...other}>\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n\n        <ControlPanel data={data} selectedCity={selectedCity} handleChange={handleChangeCity} />\n      </MapGL>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}