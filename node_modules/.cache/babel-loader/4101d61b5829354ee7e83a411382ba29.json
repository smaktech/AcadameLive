{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\heatmap\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport MapGL, { Source, Layer } from 'react-map-gl';\nimport { useEffect, useState, useMemo } from 'react'; // components\n\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../../components/map'; //\n\nimport ControlPanel from './ControlPanel'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HEATMAP_LAYER = {\n  maxzoom: 9,\n  type: 'heatmap',\n  paint: {\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n    'heatmap-color': ['interpolate', ['linear'], ['heatmap-density'], 0, 'rgba(33,102,172,0)', 0.2, 'rgb(103,169,207)', 0.4, 'rgb(209,229,240)', 0.6, 'rgb(253,219,199)', 0.8, 'rgb(239,138,98)', 0.9, 'rgb(255,201,101)'],\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n  }\n}; // ----------------------------------------------------------------------\n\nfunction filterFeaturesByDay(featureCollection, time) {\n  const date = new Date(time);\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n  const features = featureCollection.features.filter(feature => {\n    const featureDate = new Date(feature.properties.time);\n    return featureDate.getFullYear() === year && featureDate.getMonth() === month && featureDate.getDate() === day;\n  });\n  return {\n    type: 'FeatureCollection',\n    features\n  };\n}\n\nexport default function MapHeatmap(_ref) {\n  _s();\n\n  let { ...other\n  } = _ref;\n  const [allDays, useAllDays] = useState(true);\n  const [timeRange, setTimeRange] = useState([0, 0]);\n  const [selectedTime, selectTime] = useState(0);\n  const [earthquakes, setEarthQuakes] = useState(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  });\n  useEffect(() => {\n    fetch('https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson').then(resp => resp.json()).then(json => {\n      const {\n        features\n      } = json;\n      const endTime = features[0].properties.time;\n      const startTime = features[features.length - 1].properties.time;\n      setTimeRange([startTime, endTime]);\n      setEarthQuakes(json);\n      selectTime(endTime);\n    });\n  }, []);\n  const data = useMemo(() => allDays ? earthquakes : filterFeaturesByDay(earthquakes, selectedTime), [earthquakes, allDays, selectedTime]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n      onViewportChange: setViewport,\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(MapControlScale, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlNavigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlFullscreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlGeolocate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), data && /*#__PURE__*/_jsxDEV(Source, {\n        type: \"geojson\",\n        data: data,\n        children: /*#__PURE__*/_jsxDEV(Layer, { ...HEATMAP_LAYER\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      startTime: timeRange[0],\n      endTime: timeRange[1],\n      allDays: allDays,\n      selectedTime: selectedTime,\n      onChangeTime: selectTime,\n      onChangeAllDays: useAllDays\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MapHeatmap, \"12R+7ryP2ktntGzVgVcstmNnx3w=\");\n\n_c = MapHeatmap;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapHeatmap\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/heatmap/index.js"],"names":["MapGL","Source","Layer","useEffect","useState","useMemo","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","ControlPanel","HEATMAP_LAYER","maxzoom","type","paint","filterFeaturesByDay","featureCollection","time","date","Date","year","getFullYear","month","getMonth","day","getDate","features","filter","feature","featureDate","properties","MapHeatmap","other","allDays","useAllDays","timeRange","setTimeRange","selectedTime","selectTime","earthquakes","setEarthQuakes","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","fetch","then","resp","json","endTime","startTime","length","data"],"mappings":"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","sourcesContent":["import MapGL, { Source, Layer } from 'react-map-gl';\nimport { useEffect, useState, useMemo } from 'react';\n// components\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen,\n} from '../../../components/map';\n//\nimport ControlPanel from './ControlPanel';\n\n// ----------------------------------------------------------------------\n\nconst HEATMAP_LAYER = {\n  maxzoom: 9,\n  type: 'heatmap',\n  paint: {\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n    'heatmap-color': [\n      'interpolate',\n      ['linear'],\n      ['heatmap-density'],\n      0,\n      'rgba(33,102,172,0)',\n      0.2,\n      'rgb(103,169,207)',\n      0.4,\n      'rgb(209,229,240)',\n      0.6,\n      'rgb(253,219,199)',\n      0.8,\n      'rgb(239,138,98)',\n      0.9,\n      'rgb(255,201,101)',\n    ],\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0],\n  },\n};\n\n// ----------------------------------------------------------------------\n\nfunction filterFeaturesByDay(featureCollection, time) {\n  const date = new Date(time);\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n  const features = featureCollection.features.filter((feature) => {\n    const featureDate = new Date(feature.properties.time);\n    return featureDate.getFullYear() === year && featureDate.getMonth() === month && featureDate.getDate() === day;\n  });\n  return { type: 'FeatureCollection', features };\n}\n\nexport default function MapHeatmap({ ...other }) {\n  const [allDays, useAllDays] = useState(true);\n  const [timeRange, setTimeRange] = useState([0, 0]);\n  const [selectedTime, selectTime] = useState(0);\n  const [earthquakes, setEarthQuakes] = useState(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  useEffect(() => {\n    fetch('https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson')\n      .then((resp) => resp.json())\n      .then((json) => {\n        const { features } = json;\n        const endTime = features[0].properties.time;\n        const startTime = features[features.length - 1].properties.time;\n\n        setTimeRange([startTime, endTime]);\n        setEarthQuakes(json);\n        selectTime(endTime);\n      });\n  }, []);\n\n  const data = useMemo(\n    () => (allDays ? earthquakes : filterFeaturesByDay(earthquakes, selectedTime)),\n    [earthquakes, allDays, selectedTime]\n  );\n\n  return (\n    <>\n      <MapGL {...viewport} onViewportChange={setViewport} {...other}>\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n\n        {data && (\n          <Source type=\"geojson\" data={data}>\n            <Layer {...HEATMAP_LAYER} />\n          </Source>\n        )}\n      </MapGL>\n\n      <ControlPanel\n        startTime={timeRange[0]}\n        endTime={timeRange[1]}\n        allDays={allDays}\n        selectedTime={selectedTime}\n        onChangeTime={selectTime}\n        onChangeAllDays={useAllDays}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}