{"ast":null,"code":"import _objectSpread from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectWithoutProperties from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"conversations\",\"isOpenSidebar\",\"activeConversationId\",\"sx\"];import{useNavigate}from'react-router-dom';// @mui\nimport{List}from'@mui/material';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';// components\nimport{SkeletonConversationItem}from'../../../components/skeleton';//\nimport ChatConversationItem from'./ChatConversationItem';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";export default function ChatConversationList(_ref){var conversations=_ref.conversations,isOpenSidebar=_ref.isOpenSidebar,activeConversationId=_ref.activeConversationId,sx=_ref.sx,other=_objectWithoutProperties(_ref,_excluded);var navigate=useNavigate();var handleSelectConversation=function handleSelectConversation(conversationId){var conversationKey='';var conversation=conversations.byId[conversationId];if(conversation.type==='GROUP'){conversationKey=conversation.id;}else{var otherParticipant=conversation.participants.find(function(participant){return participant.id!=='8864c717-587d-472a-929a-8e5f298024da-0';});if(otherParticipant===null||otherParticipant===void 0?void 0:otherParticipant.username){conversationKey=otherParticipant===null||otherParticipant===void 0?void 0:otherParticipant.username;}}navigate(\"\".concat(PATH_DASHBOARD.chat.root,\"/\").concat(conversationKey));};var loading=!conversations.allIds.length;return/*#__PURE__*/_jsx(List,_objectSpread(_objectSpread({disablePadding:true,sx:sx},other),{},{children:(loading?_toConsumableArray(Array(12)):conversations.allIds).map(function(conversationId,index){return conversationId?/*#__PURE__*/_jsx(ChatConversationItem,{isOpenSidebar:isOpenSidebar,conversation:conversations.byId[conversationId],isSelected:activeConversationId===conversationId,onSelectConversation:function onSelectConversation(){return handleSelectConversation(conversationId);}},conversationId):/*#__PURE__*/_jsx(SkeletonConversationItem,{},index);})}));}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatConversationList.js"],"names":["useNavigate","List","PATH_DASHBOARD","SkeletonConversationItem","ChatConversationItem","ChatConversationList","conversations","isOpenSidebar","activeConversationId","sx","other","navigate","handleSelectConversation","conversationId","conversationKey","conversation","byId","type","id","otherParticipant","participants","find","participant","username","chat","root","loading","allIds","length","Array","map","index"],"mappings":"ukBACA,OAASA,WAAT,KAA4B,kBAA5B,CACA;AACA,OAASC,IAAT,KAAqB,eAArB,CACA;AACA,OAASC,cAAT,KAA+B,uBAA/B,CACA;AACA,OAASC,wBAAT,KAAyC,8BAAzC,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CAEA;2CASA,cAAe,SAASC,CAAAA,oBAAT,MAAoG,IAApEC,CAAAA,aAAoE,MAApEA,aAAoE,CAArDC,aAAqD,MAArDA,aAAqD,CAAtCC,oBAAsC,MAAtCA,oBAAsC,CAAhBC,EAAgB,MAAhBA,EAAgB,CAATC,KAAS,0CACjH,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CAEA,GAAMY,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,cAAD,CAAoB,CACnD,GAAIC,CAAAA,eAAe,CAAG,EAAtB,CACA,GAAMC,CAAAA,YAAY,CAAGT,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CAArB,CACA,GAAIE,YAAY,CAACE,IAAb,GAAsB,OAA1B,CAAmC,CACjCH,eAAe,CAAGC,YAAY,CAACG,EAA/B,CACD,CAFD,IAEO,CACL,GAAMC,CAAAA,gBAAgB,CAAGJ,YAAY,CAACK,YAAb,CAA0BC,IAA1B,CACvB,SAACC,WAAD,QAAiBA,CAAAA,WAAW,CAACJ,EAAZ,GAAmB,wCAApC,EADuB,CAAzB,CAGA,GAAIC,gBAAJ,SAAIA,gBAAJ,iBAAIA,gBAAgB,CAAEI,QAAtB,CAAgC,CAC9BT,eAAe,CAAGK,gBAAH,SAAGA,gBAAH,iBAAGA,gBAAgB,CAAEI,QAApC,CACD,CACF,CACDZ,QAAQ,WAAIT,cAAc,CAACsB,IAAf,CAAoBC,IAAxB,aAAgCX,eAAhC,EAAR,CACD,CAdD,CAgBA,GAAMY,CAAAA,OAAO,CAAG,CAACpB,aAAa,CAACqB,MAAd,CAAqBC,MAAtC,CAEA,mBACE,KAAC,IAAD,8BAAM,cAAc,KAApB,CAAqB,EAAE,CAAEnB,EAAzB,EAAiCC,KAAjC,eACG,CAACgB,OAAO,oBAAOG,KAAK,CAAC,EAAD,CAAZ,EAAoBvB,aAAa,CAACqB,MAA1C,EAAkDG,GAAlD,CAAsD,SAACjB,cAAD,CAAiBkB,KAAjB,QACrDlB,CAAAA,cAAc,cACZ,KAAC,oBAAD,EAEE,aAAa,CAAEN,aAFjB,CAGE,YAAY,CAAED,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CAHhB,CAIE,UAAU,CAAEL,oBAAoB,GAAKK,cAJvC,CAKE,oBAAoB,CAAE,sCAAMD,CAAAA,wBAAwB,CAACC,cAAD,CAA9B,EALxB,EACOA,cADP,CADY,cASZ,KAAC,wBAAD,IAA+BkB,KAA/B,CAVmD,EAAtD,CADH,GADF,CAiBD","sourcesContent":["import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\n// @mui\nimport { List } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport { SkeletonConversationItem } from '../../../components/skeleton';\n//\nimport ChatConversationItem from './ChatConversationItem';\n\n// ----------------------------------------------------------------------\n\nChatConversationList.propTypes = {\n  conversations: PropTypes.object,\n  isOpenSidebar: PropTypes.bool,\n  activeConversationId: PropTypes.string,\n  sx: PropTypes.object,\n};\n\nexport default function ChatConversationList({ conversations, isOpenSidebar, activeConversationId, sx, ...other }) {\n  const navigate = useNavigate();\n\n  const handleSelectConversation = (conversationId) => {\n    let conversationKey = '';\n    const conversation = conversations.byId[conversationId];\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(\n        (participant) => participant.id !== '8864c717-587d-472a-929a-8e5f298024da-0'\n      );\n      if (otherParticipant?.username) {\n        conversationKey = otherParticipant?.username;\n      }\n    }\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\n  };\n\n  const loading = !conversations.allIds.length;\n\n  return (\n    <List disablePadding sx={sx} {...other}>\n      {(loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) =>\n        conversationId ? (\n          <ChatConversationItem\n            key={conversationId}\n            isOpenSidebar={isOpenSidebar}\n            conversation={conversations.byId[conversationId]}\n            isSelected={activeConversationId === conversationId}\n            onSelectConversation={() => handleSelectConversation(conversationId)}\n          />\n        ) : (\n          <SkeletonConversationItem key={index} />\n        )\n      )}\n    </List>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}