{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\auth\\\\register\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik'; // @mui\n\nimport { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport { IconButtonAnimate } from '../../../components/animate'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const {\n    register\n  } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        setErrors,\n        setSubmitting\n      } = _ref;\n\n      try {\n        await register(values.email, values.password, values.firstName, values.lastName);\n        enqueueSnackbar('Register success', {\n          variant: 'success',\n          action: key => /*#__PURE__*/_jsxDEV(IconButtonAnimate, {\n            size: \"small\",\n            onClick: () => closeSnackbar(key),\n            children: /*#__PURE__*/_jsxDEV(Iconify, {\n              icon: 'eva:close-fill'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        });\n\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (isMountedRef.current) {\n          setErrors({\n            afterSubmit: error.message\n          });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [errors.afterSubmit && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: errors.afterSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Iconify, {\n                  icon: showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterForm, \"VHjZCmfcBdMrp+vw/VCyPJGEu6w=\", false, function () {\n  return [useAuth, useIsMountedRef, useSnackbar, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/auth/register/RegisterForm.js"],"names":["Yup","useState","useSnackbar","useFormik","Form","FormikProvider","Stack","TextField","IconButton","InputAdornment","Alert","LoadingButton","useAuth","useIsMountedRef","Iconify","IconButtonAnimate","RegisterForm","register","isMountedRef","enqueueSnackbar","closeSnackbar","showPassword","setShowPassword","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","email","password","formik","initialValues","validationSchema","onSubmit","values","setErrors","setSubmitting","variant","action","key","current","error","console","afterSubmit","message","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// @mui\nimport { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport Iconify from '../../../components/Iconify';\nimport { IconButtonAnimate } from '../../../components/animate';\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterForm() {\n  const { register } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await register(values.email, values.password, values.firstName, values.lastName);\n        enqueueSnackbar('Register success', {\n          variant: 'success',\n          action: (key) => (\n            <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n              <Iconify icon={'eva:close-fill'} />\n            </IconButtonAnimate>\n          ),\n        });\n        if (isMountedRef.current) {\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    },\n  });\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps('firstName')}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps('lastName')}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n                    <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n            Register\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}