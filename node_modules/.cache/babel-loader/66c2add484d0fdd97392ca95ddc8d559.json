{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\geojson\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { range } from 'd3-array';\nimport { scaleQuantile } from 'd3-scale';\nimport MapGL, { Source, Layer } from 'react-map-gl';\nimport { useState, useEffect, useMemo, useCallback } from 'react'; // @mui\n\nimport { useTheme, alpha } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material'; // components\n\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../../components/map'; //\n\nimport ControlPanel from './ControlPanel'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction updatePercentiles(featureCollection, accessor) {\n  const {\n    features\n  } = featureCollection;\n  const scale = scaleQuantile().domain(features.map(accessor)).range(range(9));\n  return {\n    type: 'FeatureCollection',\n    features: features.map(f => {\n      const value = accessor(f);\n      const properties = { ...f.properties,\n        value,\n        percentile: scale(value)\n      };\n      return { ...f,\n        properties\n      };\n    })\n  };\n}\n\nexport default function MapGeojson(_ref) {\n  _s();\n\n  let { ...other\n  } = _ref;\n  const theme = useTheme();\n  const [viewport, setViewport] = useState({\n    latitude: 40,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  });\n  const [year, setYear] = useState(2010);\n  const [allData, setAllData] = useState(null);\n  const [hoverInfo, setHoverInfo] = useState(null);\n  const dataLayer = {\n    id: 'data',\n    type: 'fill',\n    paint: {\n      'fill-color': {\n        property: 'percentile',\n        stops: [[0, theme.palette.primary.light], [1, theme.palette.primary.main], [2, theme.palette.info.light], [3, theme.palette.info.main], [4, theme.palette.warning.light], [5, theme.palette.warning.main], [6, theme.palette.error.light], [7, theme.palette.error.light], [8, theme.palette.primary.dark]]\n      },\n      'fill-opacity': 0.72\n    }\n  };\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/uber/react-map-gl/master/examples/.data/us-income.geojson').then(resp => resp.json()).then(json => setAllData(json));\n  }, []);\n  const onHover = useCallback(event => {\n    const {\n      features,\n      srcEvent: {\n        offsetX,\n        offsetY\n      }\n    } = event;\n    const hoveredFeature = features && features[0];\n    setHoverInfo(hoveredFeature ? {\n      feature: hoveredFeature,\n      x: offsetX,\n      y: offsetY\n    } : null);\n  }, []);\n  const data = useMemo(() => allData && updatePercentiles(allData, f => f.properties.income[year]), [allData, year]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n      onViewportChange: setViewport,\n      interactiveLayerIds: ['data'],\n      onHover: onHover,\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(MapControlScale, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlNavigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlFullscreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlGeolocate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        type: \"geojson\",\n        data: data,\n        children: /*#__PURE__*/_jsxDEV(Layer, { ...dataLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), hoverInfo && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 1,\n          zIndex: 99,\n          borderRadius: 1,\n          position: 'absolute',\n          pointerEvents: 'none',\n          color: 'common.white',\n          backgroundColor: alpha(theme.palette.grey[900], 0.8)\n        },\n        style: {\n          left: hoverInfo.x,\n          top: hoverInfo.y\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          component: \"div\",\n          variant: \"caption\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"State:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), \" \", hoverInfo.feature.properties.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"div\",\n          variant: \"caption\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Median Household Income: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), hoverInfo.feature.properties.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"div\",\n          variant: \"caption\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Percentile:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), hoverInfo.feature.properties.percentile / 8 * 100]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      year: year,\n      onChange: event => setYear(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MapGeojson, \"0ermNGRrpKkxfZ4aJvbU8GUUq9U=\", false, function () {\n  return [useTheme];\n});\n\n_c = MapGeojson;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapGeojson\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/geojson/index.js"],"names":["range","scaleQuantile","MapGL","Source","Layer","useState","useEffect","useMemo","useCallback","useTheme","alpha","Box","Typography","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","ControlPanel","updatePercentiles","featureCollection","accessor","features","scale","domain","map","type","f","value","properties","percentile","MapGeojson","other","theme","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","year","setYear","allData","setAllData","hoverInfo","setHoverInfo","dataLayer","id","paint","property","stops","palette","primary","light","main","info","warning","error","dark","fetch","then","resp","json","onHover","event","srcEvent","offsetX","offsetY","hoveredFeature","feature","x","y","data","income","p","zIndex","borderRadius","position","pointerEvents","color","backgroundColor","grey","left","top","name","target"],"mappings":"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","sourcesContent":["import { range } from 'd3-array';\nimport { scaleQuantile } from 'd3-scale';\nimport MapGL, { Source, Layer } from 'react-map-gl';\nimport { useState, useEffect, useMemo, useCallback } from 'react';\n// @mui\nimport { useTheme, alpha } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\n// components\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen,\n} from '../../../components/map';\n//\nimport ControlPanel from './ControlPanel';\n\n// ----------------------------------------------------------------------\n\nfunction updatePercentiles(featureCollection, accessor) {\n  const { features } = featureCollection;\n  const scale = scaleQuantile().domain(features.map(accessor)).range(range(9));\n  return {\n    type: 'FeatureCollection',\n    features: features.map((f) => {\n      const value = accessor(f);\n      const properties = {\n        ...f.properties,\n        value,\n        percentile: scale(value),\n      };\n      return { ...f, properties };\n    }),\n  };\n}\n\nexport default function MapGeojson({ ...other }) {\n  const theme = useTheme();\n\n  const [viewport, setViewport] = useState({\n    latitude: 40,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [year, setYear] = useState(2010);\n  const [allData, setAllData] = useState(null);\n  const [hoverInfo, setHoverInfo] = useState(null);\n\n  const dataLayer = {\n    id: 'data',\n    type: 'fill',\n    paint: {\n      'fill-color': {\n        property: 'percentile',\n        stops: [\n          [0, theme.palette.primary.light],\n          [1, theme.palette.primary.main],\n          [2, theme.palette.info.light],\n          [3, theme.palette.info.main],\n          [4, theme.palette.warning.light],\n          [5, theme.palette.warning.main],\n          [6, theme.palette.error.light],\n          [7, theme.palette.error.light],\n          [8, theme.palette.primary.dark],\n        ],\n      },\n      'fill-opacity': 0.72,\n    },\n  };\n\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/uber/react-map-gl/master/examples/.data/us-income.geojson')\n      .then((resp) => resp.json())\n      .then((json) => setAllData(json));\n  }, []);\n\n  const onHover = useCallback((event) => {\n    const {\n      features,\n      srcEvent: { offsetX, offsetY },\n    } = event;\n    const hoveredFeature = features && features[0];\n\n    setHoverInfo(\n      hoveredFeature\n        ? {\n            feature: hoveredFeature,\n            x: offsetX,\n            y: offsetY,\n          }\n        : null\n    );\n  }, []);\n\n  const data = useMemo(() => allData && updatePercentiles(allData, (f) => f.properties.income[year]), [allData, year]);\n\n  return (\n    <>\n      <MapGL {...viewport} onViewportChange={setViewport} interactiveLayerIds={['data']} onHover={onHover} {...other}>\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n\n        <Source type=\"geojson\" data={data}>\n          <Layer {...dataLayer} />\n        </Source>\n\n        {hoverInfo && (\n          <Box\n            sx={{\n              p: 1,\n              zIndex: 99,\n              borderRadius: 1,\n              position: 'absolute',\n              pointerEvents: 'none',\n              color: 'common.white',\n              backgroundColor: alpha(theme.palette.grey[900], 0.8),\n            }}\n            style={{ left: hoverInfo.x, top: hoverInfo.y }}\n          >\n            <Typography component=\"div\" variant=\"caption\">\n              <strong>State:</strong> {hoverInfo.feature.properties.name}\n            </Typography>\n            <Typography component=\"div\" variant=\"caption\">\n              <strong> Median Household Income: </strong>\n              {hoverInfo.feature.properties.value}\n            </Typography>\n            <Typography component=\"div\" variant=\"caption\">\n              <strong>Percentile:</strong>\n              {(hoverInfo.feature.properties.percentile / 8) * 100}\n            </Typography>\n          </Box>\n        )}\n      </MapGL>\n\n      <ControlPanel year={year} onChange={(event) => setYear(event.target.value)} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}