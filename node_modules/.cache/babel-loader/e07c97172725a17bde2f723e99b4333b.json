{"ast":null,"code":"/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\nfunction markdown(hljs) {\n  var regex = hljs.regex;\n  var INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  var HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  var CODE = {\n    className: 'code',\n    variants: [// TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    }, // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  var LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  var LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  var URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  var LINK = {\n    variants: [// too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    }, // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    }, // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    }, // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.*?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      // empty strings for alt or link text\n      match: /\\[(?=\\])/\n    }, {\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  var BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  var ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n  var CONTAINABLE = [INLINE_HTML, LINK];\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  var HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  var BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\n\nmodule.exports = markdown;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/highlight.js/lib/languages/markdown.js"],"names":["markdown","hljs","regex","INLINE_HTML","begin","end","subLanguage","relevance","HORIZONTAL_RULE","CODE","className","variants","contains","LIST","excludeEnd","LINK_REFERENCE","returnBegin","excludeBegin","URL_SCHEME","LINK","concat","match","returnEnd","BOLD","ITALIC","push","CONTAINABLE","HEADER","BLOCKQUOTE","name","aliases","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      {\n        begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n      },\n      {\n        begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n      },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      {\n        begin: '`.+?`'\n      },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/\n      },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          {\n            begin: '^[=-]*$'\n          },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"]},"metadata":{},"sourceType":"script"}