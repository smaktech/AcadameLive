{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\chat\\\\ChatMessageList.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { findIndex } from 'lodash';\nimport { useEffect, useState, useRef } from 'react'; //\n\nimport Scrollbar from '../../../components/Scrollbar';\nimport LightboxModal from '../../../components/LightboxModal';\nimport ChatMessageItem from './ChatMessageItem'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChatMessageList.propTypes = {\n  conversation: PropTypes.object.isRequired\n};\nexport default function ChatMessageList(_ref) {\n  _s();\n\n  let {\n    conversation\n  } = _ref;\n  const scrollRef = useRef(null);\n  const [openLightbox, setOpenLightbox] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(0);\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n  const imagesLightbox = conversation.messages.filter(messages => messages.contentType === 'image').map(messages => messages.body);\n\n  const handleOpenLightbox = url => {\n    const selectedImage = findIndex(imagesLightbox, index => index === url);\n    setOpenLightbox(true);\n    setSelectedImage(selectedImage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Scrollbar, {\n      scrollableNodeProps: {\n        ref: scrollRef\n      },\n      sx: {\n        p: 3,\n        height: 1\n      },\n      children: conversation.messages.map(message => /*#__PURE__*/_jsxDEV(ChatMessageItem, {\n        message: message,\n        conversation: conversation,\n        onOpenLightbox: handleOpenLightbox\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LightboxModal, {\n      images: imagesLightbox,\n      mainSrc: imagesLightbox[selectedImage],\n      photoIndex: selectedImage,\n      setPhotoIndex: setSelectedImage,\n      isOpen: openLightbox,\n      onCloseRequest: () => setOpenLightbox(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChatMessageList, \"mBZeTLyYgKbpPVg0bQiMJqUJp3s=\");\n\n_c = ChatMessageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessageList\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatMessageList.js"],"names":["PropTypes","findIndex","useEffect","useState","useRef","Scrollbar","LightboxModal","ChatMessageItem","ChatMessageList","propTypes","conversation","object","isRequired","scrollRef","openLightbox","setOpenLightbox","selectedImage","setSelectedImage","scrollMessagesToBottom","current","scrollTop","scrollHeight","messages","imagesLightbox","filter","contentType","map","body","handleOpenLightbox","url","index","ref","p","height","message","id"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;;;;AAEAC,eAAe,CAACC,SAAhB,GAA4B;AAC1BC,EAAAA,YAAY,EAAEV,SAAS,CAACW,MAAV,CAAiBC;AADL,CAA5B;AAIA,eAAe,SAASJ,eAAT,OAA2C;AAAA;;AAAA,MAAlB;AAAEE,IAAAA;AAAF,GAAkB;AACxD,QAAMG,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,CAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,sBAAsB,GAAG,MAAM;AACnC,UAAIL,SAAS,CAACM,OAAd,EAAuB;AACrBN,QAAAA,SAAS,CAACM,OAAV,CAAkBC,SAAlB,GAA8BP,SAAS,CAACM,OAAV,CAAkBE,YAAhD;AACD;AACF,KAJD;;AAKAH,IAAAA,sBAAsB;AACvB,GAPQ,EAON,CAACR,YAAY,CAACY,QAAd,CAPM,CAAT;AASA,QAAMC,cAAc,GAAGb,YAAY,CAACY,QAAb,CACpBE,MADoB,CACZF,QAAD,IAAcA,QAAQ,CAACG,WAAT,KAAyB,OAD1B,EAEpBC,GAFoB,CAEfJ,QAAD,IAAcA,QAAQ,CAACK,IAFP,CAAvB;;AAIA,QAAMC,kBAAkB,GAAIC,GAAD,IAAS;AAClC,UAAMb,aAAa,GAAGf,SAAS,CAACsB,cAAD,EAAkBO,KAAD,IAAWA,KAAK,KAAKD,GAAtC,CAA/B;AACAd,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAJD;;AAMA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,mBAAmB,EAAE;AAAEe,QAAAA,GAAG,EAAElB;AAAP,OAAhC;AAAoD,MAAA,EAAE,EAAE;AAAEmB,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,MAAM,EAAE;AAAhB,OAAxD;AAAA,gBACGvB,YAAY,CAACY,QAAb,CAAsBI,GAAtB,CAA2BQ,OAAD,iBACzB,QAAC,eAAD;AAEE,QAAA,OAAO,EAAEA,OAFX;AAGE,QAAA,YAAY,EAAExB,YAHhB;AAIE,QAAA,cAAc,EAAEkB;AAJlB,SACOM,OAAO,CAACC,EADf;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,aAAD;AACE,MAAA,MAAM,EAAEZ,cADV;AAEE,MAAA,OAAO,EAAEA,cAAc,CAACP,aAAD,CAFzB;AAGE,MAAA,UAAU,EAAEA,aAHd;AAIE,MAAA,aAAa,EAAEC,gBAJjB;AAKE,MAAA,MAAM,EAAEH,YALV;AAME,MAAA,cAAc,EAAE,MAAMC,eAAe,CAAC,KAAD;AANvC;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA,kBADF;AAuBD;;GAjDuBP,e;;KAAAA,e","sourcesContent":["import PropTypes from 'prop-types';\nimport { findIndex } from 'lodash';\nimport { useEffect, useState, useRef } from 'react';\n//\nimport Scrollbar from '../../../components/Scrollbar';\nimport LightboxModal from '../../../components/LightboxModal';\nimport ChatMessageItem from './ChatMessageItem';\n\n// ----------------------------------------------------------------------\n\nChatMessageList.propTypes = {\n  conversation: PropTypes.object.isRequired,\n};\n\nexport default function ChatMessageList({ conversation }) {\n  const scrollRef = useRef(null);\n\n  const [openLightbox, setOpenLightbox] = useState(false);\n\n  const [selectedImage, setSelectedImage] = useState(0);\n\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n\n  const imagesLightbox = conversation.messages\n    .filter((messages) => messages.contentType === 'image')\n    .map((messages) => messages.body);\n\n  const handleOpenLightbox = (url) => {\n    const selectedImage = findIndex(imagesLightbox, (index) => index === url);\n    setOpenLightbox(true);\n    setSelectedImage(selectedImage);\n  };\n\n  return (\n    <>\n      <Scrollbar scrollableNodeProps={{ ref: scrollRef }} sx={{ p: 3, height: 1 }}>\n        {conversation.messages.map((message) => (\n          <ChatMessageItem\n            key={message.id}\n            message={message}\n            conversation={conversation}\n            onOpenLightbox={handleOpenLightbox}\n          />\n        ))}\n      </Scrollbar>\n\n      <LightboxModal\n        images={imagesLightbox}\n        mainSrc={imagesLightbox[selectedImage]}\n        photoIndex={selectedImage}\n        setPhotoIndex={setSelectedImage}\n        isOpen={openLightbox}\n        onCloseRequest={() => setOpenLightbox(false)}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}