{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all topic data using Course ID\n\nasync function getCourseTopics(courseID) {\n  console.log('hello', courseID);\n  const data = await fetch(apiUrl + '/topic/getCourseTopics/' + courseID, {// method: 'GET',\n    // headers: {\n    //     Accept: 'application/json',\n    //     'Content-Type': 'application/json',\n    // },\n  }).then(res => res.json());\n  return data;\n} //Fetch all topic data using offset and limit!\n\n\nasync function getAllTopics(page, limit) {\n  const queryString = objToQueryString({\n    //   searchString: searchString,\n    //   startDate: startDate,\n    //   endDate: endDate,\n    page: page,\n    limit: limit //   sortByDate: sortByDate\n\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/topic/filterTopic';else apiLink = apiUrl + '/topic/filterTopic?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //Fetch all topic data using offset and limit!\n\n\nasync function getCourseAllTopics(courseId) {\n  var apiLink;\n  apiLink = apiUrl + '/topic/getCourseTopics/' + courseId;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api function for update a topic \n\n\nasync function editTopic(topicID, name, description, status, topicIcon) {\n  // var details = {\n  //     \"name\": name,\n  //     \"status\": status,\n  //     \"description\": description\n  // };\n  var formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", topicIcon); // var formBody = [];\n  // for (var property in details) {\n  //     var encodedKey = encodeURIComponent(property);\n  //     var encodedValue = encodeURIComponent(details[property]);\n  //     formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n\n  const data = await fetch(apiUrl + '/topic/editTopic/' + topicID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a topic \n\n\nasync function createTopic(name, description, status, courseID, icon) {\n  var formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", icon);\n  const data = await fetch(apiUrl + '/topic/createTopic', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: formData\n  }).then(res => res.json());\n\n  if (data.status) {\n    const topicID = data.topic._id;\n    const addTopicData = await fetch(apiUrl + '/course/addTopicToCourse/' + courseID, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify({\n        topicIDs: [topicID]\n      })\n    }).then(res => res.json());\n    console.log(addTopicData);\n  }\n\n  return data;\n} //api to delete the topic from the database\n\n\nasync function deleteTopic(topicID, courseID) {\n  const removeFromCourse = await fetch(apiUrl + '/course/removeTopicFromCourse/' + courseID + \"?topicID=\" + topicID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  const data = await fetch(apiUrl + '/topic/deleteTopicById/' + topicID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular topic by sending the topicId\n\n\nasync function getTopicById(topicID) {\n  const data = await fetch(apiUrl + '/topic/getTopicById/' + topicID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getTopicByFilter(searchString, startDate, endDate, page, limit, sortByDate, status) {\n  let obj = {\n    searchString: searchString,\n    startDate: startDate,\n    endDate: endDate,\n    page: page,\n    limit: limit,\n    sortByDate: sortByDate,\n    status: status\n  };\n  const queryString = objToQueryString(obj);\n  console.log(queryString);\n  var apiLink;\n\n  if (queryString == null) {\n    apiLink = apiUrl + '/topic/filterTopic';\n  } else {\n    apiLink = apiUrl + '/topic/filterTopic?' + queryString;\n  }\n\n  console.log(\"test call back\", queryString, obj);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getCourseTopics, getCourseAllTopics, getAllTopics, editTopic, deleteTopic, getTopicByFilter, getTopicById, createTopic };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Topic/Topic.js"],"names":["apiUrl","objToQueryString","getCourseTopics","courseID","console","log","data","fetch","then","res","json","getAllTopics","page","limit","queryString","apiLink","method","headers","Accept","getCourseAllTopics","courseId","editTopic","topicID","name","description","status","topicIcon","formData","FormData","append","body","createTopic","icon","topic","_id","addTopicData","JSON","stringify","topicIDs","deleteTopic","removeFromCourse","getTopicById","getTopicByFilter","searchString","startDate","endDate","sortByDate","obj"],"mappings":"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","sourcesContent":["import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all topic data using Course ID\nasync function getCourseTopics(courseID) {\n    console.log('hello', courseID)\n    const data = await fetch(apiUrl + '/topic/getCourseTopics/' + courseID, {\n        // method: 'GET',\n        // headers: {\n        //     Accept: 'application/json',\n        //     'Content-Type': 'application/json',\n        // },\n    }).then((res) => res.json());\n    return data;\n}\n\n//Fetch all topic data using offset and limit!\nasync function getAllTopics(page, limit) {\n    const queryString = objToQueryString({\n        //   searchString: searchString,\n        //   startDate: startDate,\n        //   endDate: endDate,\n        page: page,\n        limit: limit,\n        //   sortByDate: sortByDate\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/topic/filterTopic'\n    else\n        apiLink = apiUrl + '/topic/filterTopic?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//Fetch all topic data using offset and limit!\nasync function getCourseAllTopics(courseId) {\n\n    var apiLink;\n    apiLink = apiUrl + '/topic/getCourseTopics/' + courseId\n\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api function for update a topic \n\nasync function editTopic(topicID, name, description, status,topicIcon) {\n\n    // var details = {\n    //     \"name\": name,\n    //     \"status\": status,\n    //     \"description\": description\n    // };\n\n    var formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", topicIcon)\n\n    // var formBody = [];\n    // for (var property in details) {\n    //     var encodedKey = encodeURIComponent(property);\n    //     var encodedValue = encodeURIComponent(details[property]);\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\n    // }\n    // formBody = formBody.join(\"&\");\n    const data = await fetch(apiUrl + '/topic/editTopic/' + topicID, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData,\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api function for adding a topic \nasync function createTopic(name, description, status, courseID, icon) {\n    var formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", icon)\n\n\n    const data = await fetch(apiUrl + '/topic/createTopic', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData,\n    }).then((res) => res.json());\n    if (data.status) {\n        const topicID = data.topic._id\n        const addTopicData = await fetch(apiUrl + '/course/addTopicToCourse/' + courseID, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify({ topicIDs: [topicID] }),\n        }).then((res) => res.json());\n        console.log(addTopicData)\n\n    }\n    return data;\n}\n\n//api to delete the topic from the database\nasync function deleteTopic(topicID, courseID) {\n\n\n\n    const removeFromCourse = await fetch(apiUrl + '/course/removeTopicFromCourse/' + courseID + \"?topicID=\" + topicID, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n\n    const data = await fetch(apiUrl + '/topic/deleteTopicById/' + topicID, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n\n    return data;\n}\n\n//api to get the details of a particular topic by sending the topicId\nasync function getTopicById(topicID) {\n    const data = await fetch(apiUrl + '/topic/getTopicById/' + topicID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\n\n\nasync function getTopicByFilter(searchString, startDate, endDate, page, limit, sortByDate, status) {\n    let obj = {\n        searchString: searchString,\n        startDate: startDate,\n        endDate: endDate,\n        page: page,\n        limit: limit,\n        sortByDate: sortByDate,\n        status: status\n    }\n    const queryString = objToQueryString(obj)\n    console.log(queryString)\n    var apiLink;\n    if (queryString == null) {\n        apiLink = apiUrl + '/topic/filterTopic'\n    }\n    else {\n        apiLink = apiUrl + '/topic/filterTopic?' + queryString\n    }\n\n    console.log(\"test call back\", queryString, obj)\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\nexport { getCourseTopics, getCourseAllTopics, getAllTopics, editTopic, deleteTopic, getTopicByFilter, getTopicById, createTopic }"]},"metadata":{},"sourceType":"module"}