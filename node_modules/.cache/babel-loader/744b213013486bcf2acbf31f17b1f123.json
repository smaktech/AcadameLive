{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\e-commerce\\\\checkout\\\\CheckoutNewAddressForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useFormik, Form, FormikProvider } from 'formik'; // @mui\n\nimport { Stack, Radio, Button, Divider, Checkbox, TextField, RadioGroup, DialogTitle, DialogActions, FormControlLabel } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // _mock\n\nimport { countries } from '../../../../_mock'; // components\n\nimport { DialogAnimate } from '../../../../components/animate'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCheckoutNewAddressForm.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  onNextStep: PropTypes.func,\n  onCreateBilling: PropTypes.func\n};\nexport default function CheckoutNewAddressForm(_ref) {\n  _s();\n\n  let {\n    open,\n    onClose,\n    onNextStep,\n    onCreateBilling\n  } = _ref;\n  const NewAddressSchema = Yup.object().shape({\n    receiver: Yup.string().required('Fullname is required'),\n    phone: Yup.string().required('Phone is required'),\n    address: Yup.string().required('Address is required'),\n    city: Yup.string().required('City is required'),\n    state: Yup.string().required('State is required'),\n    country: Yup.string().required('State is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      addressType: 'Home',\n      receiver: '',\n      phone: '',\n      address: '',\n      city: '',\n      state: '',\n      country: countries[0].label,\n      zipcode: '',\n      isDefault: true\n    },\n    validationSchema: NewAddressSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        setSubmitting\n      } = _ref2;\n\n      try {\n        onNextStep();\n        setSubmitting(true);\n        onCreateBilling({\n          receiver: values.receiver,\n          phone: values.phone,\n          fullAddress: `${values.address}, ${values.city}, ${values.state}, ${values.country}, ${values.zipcode}`,\n          addressType: values.addressType,\n          isDefault: values.isDefault\n        });\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(DialogAnimate, {\n    maxWidth: \"sm\",\n    open: open,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Add new address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        autoComplete: \"off\",\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          spacing: {\n            xs: 2,\n            sm: 3\n          },\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(RadioGroup, {\n            row: true,\n            ...getFieldProps('addressType'),\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"Home\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 55\n              }, this),\n              label: \"Home\",\n              sx: {\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"Office\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 57\n              }, this),\n              label: \"Office\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: {\n              xs: 'column',\n              sm: 'row'\n            },\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Full Name\",\n              ...getFieldProps('receiver'),\n              error: Boolean(touched.receiver && errors.receiver),\n              helperText: touched.receiver && errors.receiver\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Phone Number\",\n              ...getFieldProps('phone'),\n              error: Boolean(touched.phone && errors.phone),\n              helperText: touched.phone && errors.phone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Address\",\n            ...getFieldProps('address'),\n            error: Boolean(touched.address && errors.address),\n            helperText: touched.address && errors.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: {\n              xs: 'column',\n              sm: 'row'\n            },\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Town / City\",\n              ...getFieldProps('city'),\n              error: Boolean(touched.city && errors.city),\n              helperText: touched.city && errors.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"State\",\n              ...getFieldProps('state'),\n              error: Boolean(touched.state && errors.state),\n              helperText: touched.state && errors.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Zip / Postal Code\",\n              ...getFieldProps('zipcode'),\n              error: Boolean(touched.zipcode && errors.zipcode),\n              helperText: touched.zipcode && errors.zipcode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            fullWidth: true,\n            label: \"Country\",\n            placeholder: \"Country\",\n            ...getFieldProps('country'),\n            SelectProps: {\n              native: true\n            },\n            error: Boolean(touched.country && errors.country),\n            helperText: touched.country && errors.country,\n            children: countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: values.isDefault,\n              ...getFieldProps('isDefault')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 24\n            }, this),\n            label: \"Use this address as default.\",\n            sx: {\n              mt: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(LoadingButton, {\n            type: \"submit\",\n            variant: \"contained\",\n            loading: isSubmitting,\n            children: \"Deliver to this Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            color: \"inherit\",\n            variant: \"outlined\",\n            onClick: onClose,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutNewAddressForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = CheckoutNewAddressForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutNewAddressForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/e-commerce/checkout/CheckoutNewAddressForm.js"],"names":["Yup","PropTypes","useFormik","Form","FormikProvider","Stack","Radio","Button","Divider","Checkbox","TextField","RadioGroup","DialogTitle","DialogActions","FormControlLabel","LoadingButton","countries","DialogAnimate","CheckoutNewAddressForm","propTypes","open","bool","onClose","func","onNextStep","onCreateBilling","NewAddressSchema","object","shape","receiver","string","required","phone","address","city","state","country","formik","initialValues","addressType","label","zipcode","isDefault","validationSchema","onSubmit","values","setSubmitting","fullAddress","error","console","errors","touched","isSubmitting","handleSubmit","getFieldProps","xs","sm","p","mr","Boolean","native","map","option","code","mt"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// @mui\nimport {\n  Stack,\n  Radio,\n  Button,\n  Divider,\n  Checkbox,\n  TextField,\n  RadioGroup,\n  DialogTitle,\n  DialogActions,\n  FormControlLabel,\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// _mock\nimport { countries } from '../../../../_mock';\n// components\nimport { DialogAnimate } from '../../../../components/animate';\n\n// ----------------------------------------------------------------------\n\nCheckoutNewAddressForm.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  onNextStep: PropTypes.func,\n  onCreateBilling: PropTypes.func,\n};\n\nexport default function CheckoutNewAddressForm({ open, onClose, onNextStep, onCreateBilling }) {\n  const NewAddressSchema = Yup.object().shape({\n    receiver: Yup.string().required('Fullname is required'),\n    phone: Yup.string().required('Phone is required'),\n    address: Yup.string().required('Address is required'),\n    city: Yup.string().required('City is required'),\n    state: Yup.string().required('State is required'),\n    country: Yup.string().required('State is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      addressType: 'Home',\n      receiver: '',\n      phone: '',\n      address: '',\n      city: '',\n      state: '',\n      country: countries[0].label,\n      zipcode: '',\n      isDefault: true,\n    },\n    validationSchema: NewAddressSchema,\n    onSubmit: async (values, { setSubmitting }) => {\n      try {\n        onNextStep();\n        setSubmitting(true);\n        onCreateBilling({\n          receiver: values.receiver,\n          phone: values.phone,\n          fullAddress: `${values.address}, ${values.city}, ${values.state}, ${values.country}, ${values.zipcode}`,\n          addressType: values.addressType,\n          isDefault: values.isDefault,\n        });\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n      }\n    },\n  });\n\n  const { errors, values, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <DialogAnimate maxWidth=\"sm\" open={open} onClose={onClose}>\n      <DialogTitle>Add new address</DialogTitle>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={{ xs: 2, sm: 3 }} sx={{ p: 3 }}>\n            <RadioGroup row {...getFieldProps('addressType')}>\n              <FormControlLabel value=\"Home\" control={<Radio />} label=\"Home\" sx={{ mr: 2 }} />\n              <FormControlLabel value=\"Office\" control={<Radio />} label=\"Office\" />\n            </RadioGroup>\n\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                {...getFieldProps('receiver')}\n                error={Boolean(touched.receiver && errors.receiver)}\n                helperText={touched.receiver && errors.receiver}\n              />\n              <TextField\n                fullWidth\n                label=\"Phone Number\"\n                {...getFieldProps('phone')}\n                error={Boolean(touched.phone && errors.phone)}\n                helperText={touched.phone && errors.phone}\n              />\n            </Stack>\n\n            <TextField\n              fullWidth\n              label=\"Address\"\n              {...getFieldProps('address')}\n              error={Boolean(touched.address && errors.address)}\n              helperText={touched.address && errors.address}\n            />\n\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n              <TextField\n                fullWidth\n                label=\"Town / City\"\n                {...getFieldProps('city')}\n                error={Boolean(touched.city && errors.city)}\n                helperText={touched.city && errors.city}\n              />\n\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...getFieldProps('state')}\n                error={Boolean(touched.state && errors.state)}\n                helperText={touched.state && errors.state}\n              />\n\n              <TextField\n                fullWidth\n                label=\"Zip / Postal Code\"\n                {...getFieldProps('zipcode')}\n                error={Boolean(touched.zipcode && errors.zipcode)}\n                helperText={touched.zipcode && errors.zipcode}\n              />\n            </Stack>\n\n            <TextField\n              select\n              fullWidth\n              label=\"Country\"\n              placeholder=\"Country\"\n              {...getFieldProps('country')}\n              SelectProps={{ native: true }}\n              error={Boolean(touched.country && errors.country)}\n              helperText={touched.country && errors.country}\n            >\n              {countries.map((option) => (\n                <option key={option.code} value={option.label}>\n                  {option.label}\n                </option>\n              ))}\n            </TextField>\n\n            <FormControlLabel\n              control={<Checkbox checked={values.isDefault} {...getFieldProps('isDefault')} />}\n              label=\"Use this address as default.\"\n              sx={{ mt: 3 }}\n            />\n          </Stack>\n\n          <Divider />\n\n          <DialogActions>\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Deliver to this Address\n            </LoadingButton>\n            <Button type=\"button\" color=\"inherit\" variant=\"outlined\" onClick={onClose}>\n              Cancel\n            </Button>\n          </DialogActions>\n        </Form>\n      </FormikProvider>\n    </DialogAnimate>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}