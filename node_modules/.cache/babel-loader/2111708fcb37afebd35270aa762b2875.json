{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\auth\\\\reset-password\\\\ResetPasswordForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik'; // @mui\n\nimport { TextField, Alert, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\nimport { sendOTP } from 'src/api/Auth/Auth'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func\n};\nexport default function ResetPasswordForm(_ref) {\n  _s();\n\n  let {\n    onSent,\n    onGetEmail\n  } = _ref;\n  const {\n    resetPassword\n  } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: ''\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        setErrors,\n        setSubmitting\n      } = _ref2;\n\n      try {\n        await sendOTP(values.email);\n\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (isMountedRef.current) {\n          setErrors({\n            afterSubmit: error.message\n          });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n  const {\n    errors,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [errors.afterSubmit && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: errors.afterSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          ...getFieldProps('email'),\n          type: \"email\",\n          label: \"Email address\",\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPasswordForm, \"NCwnAE0VLtR9TAnIzAR7nHe/DOQ=\", false, function () {\n  return [useAuth, useIsMountedRef, useFormik];\n});\n\n_c = ResetPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/auth/reset-password/ResetPasswordForm.js"],"names":["Yup","PropTypes","Form","FormikProvider","useFormik","TextField","Alert","Stack","LoadingButton","useAuth","useIsMountedRef","sendOTP","ResetPasswordForm","propTypes","onSent","func","onGetEmail","resetPassword","isMountedRef","ResetPasswordSchema","object","shape","email","string","required","formik","initialValues","validationSchema","onSubmit","values","setErrors","setSubmitting","current","error","console","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","Boolean"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// @mui\nimport { TextField, Alert, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\nimport { sendOTP } from 'src/api/Auth/Auth';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func,\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await sendOTP(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    },\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            {...getFieldProps('email')}\n            type=\"email\"\n            label=\"Email address\"\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n            Reset Password\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}