{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\MapGeoJSONAnimation.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl'; // @mui\n\nimport { useTheme } from '@mui/material/styles'; // components\n\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../components/map'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction pointOnCircle(_ref) {\n  let {\n    center,\n    angle,\n    radius\n  } = _ref;\n  return {\n    type: 'Point',\n    coordinates: [center[0] + Math.cos(angle) * radius, center[1] + Math.sin(angle) * radius]\n  };\n}\n\nexport default function MapGeoJSONAnimation(_ref2) {\n  _s();\n\n  let { ...other\n  } = _ref2;\n  const theme = useTheme();\n  const [pointData, setPointData] = useState(null);\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  });\n  const pointLayer = {\n    type: 'circle',\n    paint: {\n      'circle-radius': 10,\n      'circle-color': theme.palette.error.main\n    }\n  };\n  useEffect(() => {\n    const animation = window.requestAnimationFrame(() => setPointData(pointOnCircle({\n      center: [-100, 0],\n      angle: Date.now() / 1000,\n      radius: 20\n    })));\n    return () => window.cancelAnimationFrame(animation);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n      onViewportChange: setViewport,\n      ...other,\n      children: [/*#__PURE__*/_jsxDEV(MapControlScale, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlNavigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlFullscreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapControlGeolocate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), pointData && /*#__PURE__*/_jsxDEV(Source, {\n        type: \"geojson\",\n        data: pointData,\n        children: /*#__PURE__*/_jsxDEV(Layer, { ...pointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MapGeoJSONAnimation, \"0y+S6tc/uuRbfCjp2WOS7dwEq2Y=\", false, function () {\n  return [useTheme];\n});\n\n_c = MapGeoJSONAnimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapGeoJSONAnimation\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/MapGeoJSONAnimation.js"],"names":["useState","useEffect","MapGL","Layer","Source","useTheme","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","pointOnCircle","center","angle","radius","type","coordinates","Math","cos","sin","MapGeoJSONAnimation","other","theme","pointData","setPointData","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","pointLayer","paint","palette","error","main","animation","window","requestAnimationFrame","Date","now","cancelAnimationFrame"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,IAAgBC,KAAhB,EAAuBC,MAAvB,QAAqC,cAArC,C,CACA;;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CACA;;AACA,SAASC,eAAT,EAA0BC,mBAA1B,EAA+CC,oBAA/C,EAAqEC,oBAArE,QAAiG,sBAAjG,C,CAEA;;;;;AAEA,SAASC,aAAT,OAAkD;AAAA,MAA3B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAA2B;AAChD,SAAO;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,WAAW,EAAE,CAACJ,MAAM,CAAC,CAAD,CAAN,GAAYK,IAAI,CAACC,GAAL,CAASL,KAAT,IAAkBC,MAA/B,EAAuCF,MAAM,CAAC,CAAD,CAAN,GAAYK,IAAI,CAACE,GAAL,CAASN,KAAT,IAAkBC,MAArE;AAFR,GAAP;AAID;;AAED,eAAe,SAASM,mBAAT,QAA2C;AAAA;;AAAA,MAAd,EAAE,GAAGC;AAAL,GAAc;AACxD,QAAMC,KAAK,GAAGhB,QAAQ,EAAtB;AAEA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC;AACvC0B,IAAAA,QAAQ,EAAE,CAD6B;AAEvCC,IAAAA,SAAS,EAAE,CAAC,GAF2B;AAGvCC,IAAAA,IAAI,EAAE,CAHiC;AAIvCC,IAAAA,OAAO,EAAE,CAJ8B;AAKvCC,IAAAA,KAAK,EAAE;AALgC,GAAD,CAAxC;AAQA,QAAMC,UAAU,GAAG;AACjBjB,IAAAA,IAAI,EAAE,QADW;AAEjBkB,IAAAA,KAAK,EAAE;AACL,uBAAiB,EADZ;AAEL,sBAAgBX,KAAK,CAACY,OAAN,CAAcC,KAAd,CAAoBC;AAF/B;AAFU,GAAnB;AAQAlC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmC,SAAS,GAAGC,MAAM,CAACC,qBAAP,CAA6B,MAC7Cf,YAAY,CACVb,aAAa,CAAC;AACZC,MAAAA,MAAM,EAAE,CAAC,CAAC,GAAF,EAAO,CAAP,CADI;AAEZC,MAAAA,KAAK,EAAE2B,IAAI,CAACC,GAAL,KAAa,IAFR;AAGZ3B,MAAAA,MAAM,EAAE;AAHI,KAAD,CADH,CADI,CAAlB;AASA,WAAO,MAAMwB,MAAM,CAACI,oBAAP,CAA4BL,SAA5B,CAAb;AACD,GAXQ,CAAT;AAaA,sBACE;AAAA,2BACE,QAAC,KAAD,OAAWZ,QAAX;AAAqB,MAAA,gBAAgB,EAAEC,WAAvC;AAAA,SAAwDL,KAAxD;AAAA,8BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,cAJF,EAMGE,SAAS,iBACR,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,IAAI,EAAEA,SAA7B;AAAA,+BACE,QAAC,KAAD,OAAWS;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD;;GAjDuBZ,mB;UACRd,Q;;;KADQc,mB","sourcesContent":["import { useState, useEffect } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\n// @mui\nimport { useTheme } from '@mui/material/styles';\n// components\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../components/map';\n\n// ----------------------------------------------------------------------\n\nfunction pointOnCircle({ center, angle, radius }) {\n  return {\n    type: 'Point',\n    coordinates: [center[0] + Math.cos(angle) * radius, center[1] + Math.sin(angle) * radius],\n  };\n}\n\nexport default function MapGeoJSONAnimation({ ...other }) {\n  const theme = useTheme();\n\n  const [pointData, setPointData] = useState(null);\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  const pointLayer = {\n    type: 'circle',\n    paint: {\n      'circle-radius': 10,\n      'circle-color': theme.palette.error.main,\n    },\n  };\n\n  useEffect(() => {\n    const animation = window.requestAnimationFrame(() =>\n      setPointData(\n        pointOnCircle({\n          center: [-100, 0],\n          angle: Date.now() / 1000,\n          radius: 20,\n        })\n      )\n    );\n    return () => window.cancelAnimationFrame(animation);\n  });\n\n  return (\n    <>\n      <MapGL {...viewport} onViewportChange={setViewport} {...other}>\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n\n        {pointData && (\n          <Source type=\"geojson\" data={pointData}>\n            <Layer {...pointLayer} />\n          </Source>\n        )}\n      </MapGL>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}