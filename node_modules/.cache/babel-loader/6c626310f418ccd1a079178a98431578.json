{"ast":null,"code":"/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\nfunction r(hljs) {\n  var regex = hljs.regex; // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n\n  var IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  var NUMBER_TYPES_RE = regex.either( // Special case: only hexadecimal binary powers can contain fractions\n  /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/, // Hexadecimal numbers without fraction and optional binary power\n  /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/, // Decimal numbers\n  /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/);\n  var OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  var PUNCTUATION_RE = regex.either(/[()]/, /[{}]/, /\\[\\[/, /[[\\]]/, /\\\\/, /,/);\n  return {\n    name: 'R',\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword: 'function if in break next repeat else for while',\n      literal: 'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' + 'NA_character_|10 NA_complex_|10',\n      built_in: // Builtin constants\n      'LETTERS letters month.abb month.name pi T F ' + // Primitive functions\n      // These are all the functions in `base` that are implemented as a\n      // `.Primitive`, minus those functions that are also keywords.\n      'abs acos acosh all any anyNA Arg as.call as.character ' + 'as.complex as.double as.environment as.integer as.logical ' + 'as.null.default as.numeric as.raw asin asinh atan atanh attr ' + 'attributes baseenv browser c call ceiling class Conj cos cosh ' + 'cospi cummax cummin cumprod cumsum digamma dim dimnames ' + 'emptyenv exp expression floor forceAndCall gamma gc.time ' + 'globalenv Im interactive invisible is.array is.atomic is.call ' + 'is.character is.complex is.double is.environment is.expression ' + 'is.finite is.function is.infinite is.integer is.language ' + 'is.list is.logical is.matrix is.na is.name is.nan is.null ' + 'is.numeric is.object is.pairlist is.raw is.recursive is.single ' + 'is.symbol lazyLoadDBfetch length lgamma list log max min ' + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' + 'proc.time prod quote range Re rep retracemem return round ' + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' + 'standardGeneric substitute sum switch tan tanh tanpi tracemem ' + 'trigamma trunc unclass untracemem UseMethod xtfrm'\n    },\n    contains: [// Roxygen comments\n    hljs.COMMENT(/#'/, /$/, {\n      contains: [{\n        // Handle `@examples` separately to cause all subsequent code\n        // until the next `@`-tag on its own line to be kept as-is,\n        // preventing highlighting. This code is example R code, so nested\n        // doctags shouldn’t be treated as such. See\n        // `test/markup/r/roxygen.txt` for an example.\n        scope: 'doctag',\n        match: /@examples/,\n        starts: {\n          end: regex.lookahead(regex.either( // end if another doc comment\n          /\\n^#'\\s*(?=@[a-zA-Z]+)/, // or a line with no comment\n          /\\n^(?!#')/)),\n          endsParent: true\n        }\n      }, {\n        // Handle `@param` to highlight the parameter name following\n        // after.\n        scope: 'doctag',\n        begin: '@param',\n        end: /$/,\n        contains: [{\n          scope: 'variable',\n          variants: [{\n            match: IDENT_RE\n          }, {\n            match: /`(?:\\\\.|[^`\\\\])+`/\n          }],\n          endsParent: true\n        }]\n      }, {\n        scope: 'doctag',\n        match: /@[a-zA-Z]+/\n      }, {\n        scope: 'keyword',\n        match: /\\\\[a-zA-Z]+/\n      }]\n    }), hljs.HASH_COMMENT_MODE, {\n      scope: 'string',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      variants: [hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\(/,\n        end: /\\)(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\{/,\n        end: /\\}(-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]\"(-*)\\[/,\n        end: /\\](-*)\"/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\(/,\n        end: /\\)(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\{/,\n        end: /\\}(-*)'/\n      }), hljs.END_SAME_AS_BEGIN({\n        begin: /[rR]'(-*)\\[/,\n        end: /\\](-*)'/\n      }), {\n        begin: '\"',\n        end: '\"',\n        relevance: 0\n      }, {\n        begin: \"'\",\n        end: \"'\",\n        relevance: 0\n      }]\n    }, // Matching numbers immediately following punctuation and operators is\n    // tricky since we need to look at the character ahead of a number to\n    // ensure the number is not part of an identifier, and we cannot use\n    // negative look-behind assertions. So instead we explicitly handle all\n    // possible combinations of (operator|punctuation), number.\n    // TODO: replace with negative look-behind when available\n    // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n    // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n    // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n    {\n      relevance: 0,\n      variants: [{\n        scope: {\n          1: 'operator',\n          2: 'number'\n        },\n        match: [OPERATORS_RE, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          1: 'operator',\n          2: 'number'\n        },\n        match: [/%[^%]*%/, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          1: 'punctuation',\n          2: 'number'\n        },\n        match: [PUNCTUATION_RE, NUMBER_TYPES_RE]\n      }, {\n        scope: {\n          2: 'number'\n        },\n        match: [/[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n        NUMBER_TYPES_RE]\n      }]\n    }, // Operators/punctuation when they're not directly followed by numbers\n    {\n      // Relevance boost for the most common assignment form.\n      scope: {\n        3: 'operator'\n      },\n      match: [IDENT_RE, /\\s+/, /<-/, /\\s+/]\n    }, {\n      scope: 'operator',\n      relevance: 0,\n      variants: [{\n        match: OPERATORS_RE\n      }, {\n        match: /%[^%]*%/\n      }]\n    }, {\n      scope: 'punctuation',\n      relevance: 0,\n      match: PUNCTUATION_RE\n    }, {\n      // Escaped identifier\n      begin: '`',\n      end: '`',\n      contains: [{\n        begin: /\\\\./\n      }]\n    }]\n  };\n}\n\nmodule.exports = r;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/highlight.js/lib/languages/r.js"],"names":["r","hljs","regex","IDENT_RE","NUMBER_TYPES_RE","either","OPERATORS_RE","PUNCTUATION_RE","name","keywords","$pattern","keyword","literal","built_in","contains","COMMENT","scope","match","starts","end","lookahead","endsParent","begin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","relevance","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\nfunction r(hljs) {\n  const regex = hljs.regex;\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`…`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const NUMBER_TYPES_RE = regex.either(\n    // Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n    // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/,\n    // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/\n  );\n  const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  const PUNCTUATION_RE = regex.either(\n    /[()]/,\n    /[{}]/,\n    /\\[\\[/,\n    /[[\\]]/,\n    /\\\\/,\n    /,/\n  );\n\n  return {\n    name: 'R',\n\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' +\n        'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F ' +\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        'abs acos acosh all any anyNA Arg as.call as.character ' +\n        'as.complex as.double as.environment as.integer as.logical ' +\n        'as.null.default as.numeric as.raw asin asinh atan atanh attr ' +\n        'attributes baseenv browser c call ceiling class Conj cos cosh ' +\n        'cospi cummax cummin cumprod cumsum digamma dim dimnames ' +\n        'emptyenv exp expression floor forceAndCall gamma gc.time ' +\n        'globalenv Im interactive invisible is.array is.atomic is.call ' +\n        'is.character is.complex is.double is.environment is.expression ' +\n        'is.finite is.function is.infinite is.integer is.language ' +\n        'is.list is.logical is.matrix is.na is.name is.nan is.null ' +\n        'is.numeric is.object is.pairlist is.raw is.recursive is.single ' +\n        'is.symbol lazyLoadDBfetch length lgamma list log max min ' +\n        'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' +\n        'proc.time prod quote range Re rep retracemem return round ' +\n        'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' +\n        'standardGeneric substitute sum switch tan tanh tanpi tracemem ' +\n        'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        {\n          contains: [\n            {\n              // Handle `@examples` separately to cause all subsequent code\n              // until the next `@`-tag on its own line to be kept as-is,\n              // preventing highlighting. This code is example R code, so nested\n              // doctags shouldn’t be treated as such. See\n              // `test/markup/r/roxygen.txt` for an example.\n              scope: 'doctag',\n              match: /@examples/,\n              starts: {\n                end: regex.lookahead(regex.either(\n                  // end if another doc comment\n                  /\\n^#'\\s*(?=@[a-zA-Z]+)/,\n                  // or a line with no comment\n                  /\\n^(?!#')/\n                )),\n                endsParent: true\n              }\n            },\n            {\n              // Handle `@param` to highlight the parameter name following\n              // after.\n              scope: 'doctag',\n              begin: '@param',\n              end: /$/,\n              contains: [\n                {\n                  scope: 'variable',\n                  variants: [\n                    { match: IDENT_RE },\n                    { match: /`(?:\\\\.|[^`\\\\])+`/ }\n                  ],\n                  endsParent: true\n                }\n              ]\n            },\n            {\n              scope: 'doctag',\n              match: /@[a-zA-Z]+/\n            },\n            {\n              scope: 'keyword',\n              match: /\\\\[a-zA-Z]+/\n            }\n          ]\n        }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        scope: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }),\n          {begin: '\"', end: '\"', relevance: 0},\n          {begin: \"'\", end: \"'\", relevance: 0}\n        ],\n      },\n\n      // Matching numbers immediately following punctuation and operators is\n      // tricky since we need to look at the character ahead of a number to\n      // ensure the number is not part of an identifier, and we cannot use\n      // negative look-behind assertions. So instead we explicitly handle all\n      // possible combinations of (operator|punctuation), number.\n      // TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      {\n        relevance: 0,\n        variants: [\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              OPERATORS_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              /%[^%]*%/,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'punctuation',\n              2: 'number'\n            },\n            match: [\n              PUNCTUATION_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: { 2: 'number' },\n            match: [\n              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n              NUMBER_TYPES_RE\n            ]\n          }\n        ]\n      },\n\n      // Operators/punctuation when they're not directly followed by numbers\n      {\n        // Relevance boost for the most common assignment form.\n        scope: { 3: 'operator' },\n        match: [\n          IDENT_RE,\n          /\\s+/,\n          /<-/,\n          /\\s+/\n        ]\n      },\n\n      {\n        scope: 'operator',\n        relevance: 0,\n        variants: [\n          { match: OPERATORS_RE },\n          { match: /%[^%]*%/ }\n        ]\n      },\n\n      {\n        scope: 'punctuation',\n        relevance: 0,\n        match: PUNCTUATION_RE\n      },\n\n      {\n        // Escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [\n          { begin: /\\\\./ }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n"]},"metadata":{},"sourceType":"script"}