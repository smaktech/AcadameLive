{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\pages\\\\Payment.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Box, Grid, Container, Typography } from '@mui/material'; // hooks\n\nimport useResponsive from '../hooks/useResponsive'; // components\n\nimport Page from '../components/Page'; // sections\n\nimport { PaymentSummary, PaymentMethods, PaymentBillingAddress } from '../sections/payment'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    minHeight: '100%',\n    paddingTop: theme.spacing(15),\n    paddingBottom: theme.spacing(10)\n  };\n}); // ----------------------------------------------------------------------\n\nexport default function Payment() {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const isDesktop = useResponsive('up', 'md');\n  const PaymentSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    phone: Yup.string().required('Phone is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    address: Yup.string().required('Address is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      phone: '',\n      email: '',\n      address: '',\n      subscription: 'premium',\n      isMonthly: false,\n      method: 'paypal',\n      card: 'mastercard',\n      newCardName: '',\n      newCardNumber: '',\n      newCardExpired: '',\n      newCardCvv: ''\n    },\n    validationSchema: PaymentSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        resetForm\n      } = _ref2;\n      const submitData = {\n        name: values.name,\n        phone: values.phone,\n        email: values.email,\n        address: values.address,\n        subscription: 'premium'\n      };\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      if (values.method === 'paypal') {\n        alert(JSON.stringify({ ...submitData,\n          method: values.method\n        }, null, 2));\n      } else if (values.method !== 'paypal' && !values.newCardName) {\n        alert(JSON.stringify({ ...submitData,\n          method: values.method,\n          card: values.card\n        }, null, 2));\n      }\n\n      if (values.newCardName) {\n        alert(JSON.stringify({ ...submitData,\n          method: values.method,\n          newCardName: values.newCardName,\n          newCardNumber: values.newCardNumber,\n          newCardExpired: values.newCardExpired,\n          newCardCvv: values.newCardCvv\n        }, null, 2));\n      }\n\n      resetForm();\n      enqueueSnackbar('Payment success', {\n        variant: 'success'\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Payment\",\n    children: /*#__PURE__*/_jsxDEV(RootStyle, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            align: \"center\",\n            paragraph: true,\n            children: \"Let's finish powering you up!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            align: \"center\",\n            sx: {\n              color: 'text.secondary'\n            },\n            children: \"Professional plan is right for you.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormikProvider, {\n          value: formik,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            noValidate: true,\n            autoComplete: \"off\",\n            onSubmit: formik.handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: isDesktop ? 3 : 5,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 8,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'grid',\n                    gap: 5,\n                    p: {\n                      md: 5\n                    },\n                    borderRadius: 2,\n                    border: theme => ({\n                      md: `dashed 1px ${theme.palette.divider}`\n                    }),\n                    gridTemplateColumns: {\n                      xs: 'repeat(1, 1fr)',\n                      md: 'repeat(2, 1fr)'\n                    }\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(PaymentBillingAddress, {\n                    formik: formik\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(PaymentMethods, {\n                    formik: formik\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: /*#__PURE__*/_jsxDEV(PaymentSummary, {\n                  formik: formik\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payment, \"mRYCpkELquob/1cX/afK2jodbgE=\", false, function () {\n  return [useSnackbar, useResponsive, useFormik];\n});\n\n_c = Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/Payment.js"],"names":["Yup","useSnackbar","useFormik","Form","FormikProvider","styled","Box","Grid","Container","Typography","useResponsive","Page","PaymentSummary","PaymentMethods","PaymentBillingAddress","RootStyle","theme","minHeight","paddingTop","spacing","paddingBottom","Payment","enqueueSnackbar","isDesktop","PaymentSchema","object","shape","name","string","required","phone","email","address","formik","initialValues","subscription","isMonthly","method","card","newCardName","newCardNumber","newCardExpired","newCardCvv","validationSchema","onSubmit","values","resetForm","submitData","Promise","resolve","setTimeout","alert","JSON","stringify","variant","mb","color","handleSubmit","display","gap","p","md","borderRadius","border","palette","divider","gridTemplateColumns","xs"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Grid, Container, Typography } from '@mui/material';\n// hooks\nimport useResponsive from '../hooks/useResponsive';\n// components\nimport Page from '../components/Page';\n// sections\nimport { PaymentSummary, PaymentMethods, PaymentBillingAddress } from '../sections/payment';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  minHeight: '100%',\n  paddingTop: theme.spacing(15),\n  paddingBottom: theme.spacing(10),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function Payment() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const isDesktop = useResponsive('up', 'md');\n\n  const PaymentSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    phone: Yup.string().required('Phone is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    address: Yup.string().required('Address is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      phone: '',\n      email: '',\n      address: '',\n      subscription: 'premium',\n      isMonthly: false,\n      method: 'paypal',\n      card: 'mastercard',\n      newCardName: '',\n      newCardNumber: '',\n      newCardExpired: '',\n      newCardCvv: '',\n    },\n    validationSchema: PaymentSchema,\n    onSubmit: async (values, { resetForm }) => {\n      const submitData = {\n        name: values.name,\n        phone: values.phone,\n        email: values.email,\n        address: values.address,\n        subscription: 'premium',\n      };\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      if (values.method === 'paypal') {\n        alert(\n          JSON.stringify(\n            {\n              ...submitData,\n              method: values.method,\n            },\n            null,\n            2\n          )\n        );\n      } else if (values.method !== 'paypal' && !values.newCardName) {\n        alert(\n          JSON.stringify(\n            {\n              ...submitData,\n              method: values.method,\n              card: values.card,\n            },\n            null,\n            2\n          )\n        );\n      }\n      if (values.newCardName) {\n        alert(\n          JSON.stringify(\n            {\n              ...submitData,\n              method: values.method,\n              newCardName: values.newCardName,\n              newCardNumber: values.newCardNumber,\n              newCardExpired: values.newCardExpired,\n              newCardCvv: values.newCardCvv,\n            },\n            null,\n            2\n          )\n        );\n      }\n      resetForm();\n      enqueueSnackbar('Payment success', { variant: 'success' });\n    },\n  });\n\n  return (\n    <Page title=\"Payment\">\n      <RootStyle>\n        <Container>\n          <Box sx={{ mb: 5 }}>\n            <Typography variant=\"h3\" align=\"center\" paragraph>\n              Let's finish powering you up!\n            </Typography>\n            <Typography align=\"center\" sx={{ color: 'text.secondary' }}>\n              Professional plan is right for you.\n            </Typography>\n          </Box>\n\n          <FormikProvider value={formik}>\n            <Form noValidate autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n              <Grid container spacing={isDesktop ? 3 : 5}>\n                <Grid item xs={12} md={8}>\n                  <Box\n                    sx={{\n                      display: 'grid',\n                      gap: 5,\n                      p: { md: 5 },\n                      borderRadius: 2,\n                      border: (theme) => ({ md: `dashed 1px ${theme.palette.divider}` }),\n                      gridTemplateColumns: { xs: 'repeat(1, 1fr)', md: 'repeat(2, 1fr)' },\n                    }}\n                  >\n                    <PaymentBillingAddress formik={formik} />\n                    <PaymentMethods formik={formik} />\n                  </Box>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <PaymentSummary formik={formik} />\n                </Grid>\n              </Grid>\n            </Form>\n          </FormikProvider>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}