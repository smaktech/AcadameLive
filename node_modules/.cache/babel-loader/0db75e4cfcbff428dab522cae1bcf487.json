{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\chat\\\\ChatConversationList.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom'; // @mui\n\nimport { List } from '@mui/material'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // components\n\nimport { SkeletonConversationItem } from '../../../components/skeleton'; //\n\nimport ChatConversationItem from './ChatConversationItem'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChatConversationList.propTypes = {\n  conversations: PropTypes.object,\n  isOpenSidebar: PropTypes.bool,\n  activeConversationId: PropTypes.string,\n  sx: PropTypes.object\n};\nexport default function ChatConversationList(_ref) {\n  _s();\n\n  let {\n    conversations,\n    isOpenSidebar,\n    activeConversationId,\n    sx,\n    ...other\n  } = _ref;\n  const navigate = useNavigate();\n\n  const handleSelectConversation = conversationId => {\n    let conversationKey = '';\n    const conversation = conversations.byId[conversationId];\n\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(participant => participant.id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n      if (otherParticipant === null || otherParticipant === void 0 ? void 0 : otherParticipant.username) {\n        conversationKey = otherParticipant === null || otherParticipant === void 0 ? void 0 : otherParticipant.username;\n      }\n    }\n\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\n  };\n\n  const loading = !conversations.allIds.length;\n  return /*#__PURE__*/_jsxDEV(List, {\n    disablePadding: true,\n    sx: sx,\n    ...other,\n    children: (loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) => conversationId ? /*#__PURE__*/_jsxDEV(ChatConversationItem, {\n      isOpenSidebar: isOpenSidebar,\n      conversation: conversations.byId[conversationId],\n      isSelected: activeConversationId === conversationId,\n      onSelectConversation: () => handleSelectConversation(conversationId)\n    }, conversationId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(SkeletonConversationItem, {}, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatConversationList, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ChatConversationList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatConversationList\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatConversationList.js"],"names":["PropTypes","useNavigate","List","PATH_DASHBOARD","SkeletonConversationItem","ChatConversationItem","ChatConversationList","propTypes","conversations","object","isOpenSidebar","bool","activeConversationId","string","sx","other","navigate","handleSelectConversation","conversationId","conversationKey","conversation","byId","type","id","otherParticipant","participants","find","participant","username","chat","root","loading","allIds","length","Array","map","index"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,IAAT,QAAqB,eAArB,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CACA;;AACA,SAASC,wBAAT,QAAyC,8BAAzC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,wBAAjC,C,CAEA;;;AAEAC,oBAAoB,CAACC,SAArB,GAAiC;AAC/BC,EAAAA,aAAa,EAAER,SAAS,CAACS,MADM;AAE/BC,EAAAA,aAAa,EAAEV,SAAS,CAACW,IAFM;AAG/BC,EAAAA,oBAAoB,EAAEZ,SAAS,CAACa,MAHD;AAI/BC,EAAAA,EAAE,EAAEd,SAAS,CAACS;AAJiB,CAAjC;AAOA,eAAe,SAASH,oBAAT,OAAoG;AAAA;;AAAA,MAAtE;AAAEE,IAAAA,aAAF;AAAiBE,IAAAA,aAAjB;AAAgCE,IAAAA,oBAAhC;AAAsDE,IAAAA,EAAtD;AAA0D,OAAGC;AAA7D,GAAsE;AACjH,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;;AAEA,QAAMgB,wBAAwB,GAAIC,cAAD,IAAoB;AACnD,QAAIC,eAAe,GAAG,EAAtB;AACA,UAAMC,YAAY,GAAGZ,aAAa,CAACa,IAAd,CAAmBH,cAAnB,CAArB;;AACA,QAAIE,YAAY,CAACE,IAAb,KAAsB,OAA1B,EAAmC;AACjCH,MAAAA,eAAe,GAAGC,YAAY,CAACG,EAA/B;AACD,KAFD,MAEO;AACL,YAAMC,gBAAgB,GAAGJ,YAAY,CAACK,YAAb,CAA0BC,IAA1B,CACtBC,WAAD,IAAiBA,WAAW,CAACJ,EAAZ,KAAmB,wCADb,CAAzB;;AAGA,UAAIC,gBAAJ,aAAIA,gBAAJ,uBAAIA,gBAAgB,CAAEI,QAAtB,EAAgC;AAC9BT,QAAAA,eAAe,GAAGK,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEI,QAApC;AACD;AACF;;AACDZ,IAAAA,QAAQ,CAAE,GAAEb,cAAc,CAAC0B,IAAf,CAAoBC,IAAK,IAAGX,eAAgB,EAAhD,CAAR;AACD,GAdD;;AAgBA,QAAMY,OAAO,GAAG,CAACvB,aAAa,CAACwB,MAAd,CAAqBC,MAAtC;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,cAAc,MAApB;AAAqB,IAAA,EAAE,EAAEnB,EAAzB;AAAA,OAAiCC,KAAjC;AAAA,cACG,CAACgB,OAAO,GAAG,CAAC,GAAGG,KAAK,CAAC,EAAD,CAAT,CAAH,GAAoB1B,aAAa,CAACwB,MAA1C,EAAkDG,GAAlD,CAAsD,CAACjB,cAAD,EAAiBkB,KAAjB,KACrDlB,cAAc,gBACZ,QAAC,oBAAD;AAEE,MAAA,aAAa,EAAER,aAFjB;AAGE,MAAA,YAAY,EAAEF,aAAa,CAACa,IAAd,CAAmBH,cAAnB,CAHhB;AAIE,MAAA,UAAU,EAAEN,oBAAoB,KAAKM,cAJvC;AAKE,MAAA,oBAAoB,EAAE,MAAMD,wBAAwB,CAACC,cAAD;AALtD,OACOA,cADP;AAAA;AAAA;AAAA;AAAA,YADY,gBASZ,QAAC,wBAAD,MAA+BkB,KAA/B;AAAA;AAAA;AAAA;AAAA,YAVH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAtCuB9B,oB;UACLL,W;;;KADKK,oB","sourcesContent":["import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\n// @mui\nimport { List } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport { SkeletonConversationItem } from '../../../components/skeleton';\n//\nimport ChatConversationItem from './ChatConversationItem';\n\n// ----------------------------------------------------------------------\n\nChatConversationList.propTypes = {\n  conversations: PropTypes.object,\n  isOpenSidebar: PropTypes.bool,\n  activeConversationId: PropTypes.string,\n  sx: PropTypes.object,\n};\n\nexport default function ChatConversationList({ conversations, isOpenSidebar, activeConversationId, sx, ...other }) {\n  const navigate = useNavigate();\n\n  const handleSelectConversation = (conversationId) => {\n    let conversationKey = '';\n    const conversation = conversations.byId[conversationId];\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(\n        (participant) => participant.id !== '8864c717-587d-472a-929a-8e5f298024da-0'\n      );\n      if (otherParticipant?.username) {\n        conversationKey = otherParticipant?.username;\n      }\n    }\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\n  };\n\n  const loading = !conversations.allIds.length;\n\n  return (\n    <List disablePadding sx={sx} {...other}>\n      {(loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) =>\n        conversationId ? (\n          <ChatConversationItem\n            key={conversationId}\n            isOpenSidebar={isOpenSidebar}\n            conversation={conversations.byId[conversationId]}\n            isSelected={activeConversationId === conversationId}\n            onSelectConversation={() => handleSelectConversation(conversationId)}\n          />\n        ) : (\n          <SkeletonConversationItem key={index} />\n        )\n      )}\n    </List>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}