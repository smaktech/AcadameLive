{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\pages\\\\dashboard\\\\BlogPosts.js\",\n    _s = $RefreshSig$();\n\nimport { orderBy } from 'lodash';\nimport { Link as RouterLink } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useEffect, useCallback, useState } from 'react'; // @mui\n\nimport { Grid, Button, Container, Stack } from '@mui/material'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getPostsInitial, getMorePosts } from '../../redux/slices/blog'; // hooks\n\nimport useSettings from '../../hooks/useSettings'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // components\n\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\nimport { SkeletonPosts } from '../../components/skeleton';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs'; // sections\n\nimport { BlogPostCard, BlogPostsSort, BlogPostsSearch } from '../../sections/@dashboard/blog'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SORT_OPTIONS = [{\n  value: 'latest',\n  label: 'Latest'\n}, {\n  value: 'popular',\n  label: 'Popular'\n}, {\n  value: 'oldest',\n  label: 'Oldest'\n}]; // ----------------------------------------------------------------------\n\nconst applySort = (posts, sortBy) => {\n  if (sortBy === 'latest') {\n    return orderBy(posts, ['createdAt'], ['desc']);\n  }\n\n  if (sortBy === 'oldest') {\n    return orderBy(posts, ['createdAt'], ['asc']);\n  }\n\n  if (sortBy === 'popular') {\n    return orderBy(posts, ['view'], ['desc']);\n  }\n\n  return posts;\n};\n\nexport default function BlogPosts() {\n  _s();\n\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const [filters, setFilters] = useState('latest');\n  const {\n    posts,\n    hasMore,\n    index,\n    step\n  } = useSelector(state => state.blog);\n  const sortedPosts = applySort(posts, filters);\n  const onScroll = useCallback(() => dispatch(getMorePosts()), [dispatch]);\n  useEffect(() => {\n    dispatch(getPostsInitial(index, step));\n  }, [dispatch, index, step]);\n\n  const handleChangeSort = value => {\n    if (value) {\n      setFilters(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Blog: Posts\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'lg',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Blog\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Blog',\n          href: PATH_DASHBOARD.blog.root\n        }, {\n          name: 'Posts'\n        }],\n        action: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          component: RouterLink,\n          to: PATH_DASHBOARD.blog.newPost,\n          startIcon: /*#__PURE__*/_jsxDEV(Iconify, {\n            icon: 'eva:plus-fill'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 26\n          }, this),\n          children: \"New Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        mb: 5,\n        direction: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(BlogPostsSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BlogPostsSort, {\n          query: filters,\n          options: SORT_OPTIONS,\n          onSort: handleChangeSort\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        next: onScroll,\n        hasMore: hasMore,\n        loader: /*#__PURE__*/_jsxDEV(SkeletonPosts, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }, this),\n        dataLength: posts.length,\n        style: {\n          overflow: 'inherit'\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: sortedPosts.map((post, index) => /*#__PURE__*/_jsxDEV(BlogPostCard, {\n            post: post,\n            index: index\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BlogPosts, \"qjHuy1k19+8YhwNNAD/BZTdtjQU=\", false, function () {\n  return [useSettings, useDispatch, useSelector];\n});\n\n_c = BlogPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPosts\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/dashboard/BlogPosts.js"],"names":["orderBy","Link","RouterLink","InfiniteScroll","useEffect","useCallback","useState","Grid","Button","Container","Stack","useDispatch","useSelector","getPostsInitial","getMorePosts","useSettings","PATH_DASHBOARD","Page","Iconify","SkeletonPosts","HeaderBreadcrumbs","BlogPostCard","BlogPostsSort","BlogPostsSearch","SORT_OPTIONS","value","label","applySort","posts","sortBy","BlogPosts","themeStretch","dispatch","filters","setFilters","hasMore","index","step","state","blog","sortedPosts","onScroll","handleChangeSort","name","href","root","newPost","length","overflow","map","post","id"],"mappings":"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","sourcesContent":["import { orderBy } from 'lodash';\nimport { Link as RouterLink } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useEffect, useCallback, useState } from 'react';\n// @mui\nimport { Grid, Button, Container, Stack } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getPostsInitial, getMorePosts } from '../../redux/slices/blog';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\nimport { SkeletonPosts } from '../../components/skeleton';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\n// sections\nimport { BlogPostCard, BlogPostsSort, BlogPostsSearch } from '../../sections/@dashboard/blog';\n\n// ----------------------------------------------------------------------\n\nconst SORT_OPTIONS = [\n  { value: 'latest', label: 'Latest' },\n  { value: 'popular', label: 'Popular' },\n  { value: 'oldest', label: 'Oldest' },\n];\n\n// ----------------------------------------------------------------------\n\nconst applySort = (posts, sortBy) => {\n  if (sortBy === 'latest') {\n    return orderBy(posts, ['createdAt'], ['desc']);\n  }\n  if (sortBy === 'oldest') {\n    return orderBy(posts, ['createdAt'], ['asc']);\n  }\n  if (sortBy === 'popular') {\n    return orderBy(posts, ['view'], ['desc']);\n  }\n  return posts;\n};\n\nexport default function BlogPosts() {\n  const { themeStretch } = useSettings();\n  const dispatch = useDispatch();\n  const [filters, setFilters] = useState('latest');\n  const { posts, hasMore, index, step } = useSelector((state) => state.blog);\n\n  const sortedPosts = applySort(posts, filters);\n  const onScroll = useCallback(() => dispatch(getMorePosts()), [dispatch]);\n\n  useEffect(() => {\n    dispatch(getPostsInitial(index, step));\n  }, [dispatch, index, step]);\n\n  const handleChangeSort = (value) => {\n    if (value) {\n      setFilters(value);\n    }\n  };\n\n  return (\n    <Page title=\"Blog: Posts\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Blog\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'Blog', href: PATH_DASHBOARD.blog.root },\n            { name: 'Posts' },\n          ]}\n          action={\n            <Button\n              variant=\"contained\"\n              component={RouterLink}\n              to={PATH_DASHBOARD.blog.newPost}\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n            >\n              New Post\n            </Button>\n          }\n        />\n\n        <Stack mb={5} direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n          <BlogPostsSearch />\n          <BlogPostsSort query={filters} options={SORT_OPTIONS} onSort={handleChangeSort} />\n        </Stack>\n\n        <InfiniteScroll\n          next={onScroll}\n          hasMore={hasMore}\n          loader={<SkeletonPosts />}\n          dataLength={posts.length}\n          style={{ overflow: 'inherit' }}\n        >\n          <Grid container spacing={3}>\n            {sortedPosts.map((post, index) => (\n              <BlogPostCard key={post.id} post={post} index={index} />\n            ))}\n          </Grid>\n        </InfiniteScroll>\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}