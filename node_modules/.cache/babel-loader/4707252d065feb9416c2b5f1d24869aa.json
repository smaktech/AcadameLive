{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\contexts\\\\SettingsContext.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { createContext } from 'react'; // hooks\n\nimport useLocalStorage from '../hooks/useLocalStorage'; // utils\n\nimport getColorPresets, { colorPresets, defaultPreset } from '../utils/getColorPresets'; // config\n\nimport { defaultSettings } from '../config'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = { ...defaultSettings,\n  onChangeMode: () => {},\n  onToggleMode: () => {},\n  onChangeDirection: () => {},\n  onChangeColor: () => {},\n  onToggleStretch: () => {},\n  onResetSetting: () => {},\n  setColor: defaultPreset,\n  colorOption: []\n};\nconst SettingsContext = /*#__PURE__*/createContext(initialState);\nSettingsProvider.propTypes = {\n  children: PropTypes.node\n};\n\nfunction SettingsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [settings, setSettings] = useLocalStorage('settings', {\n    themeMode: initialState.themeMode,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets,\n    themeStretch: initialState.themeStretch\n  });\n\n  const onChangeMode = event => {\n    setSettings({ ...settings,\n      themeMode: event.target.value\n    });\n  };\n\n  const onToggleMode = () => {\n    setSettings({ ...settings,\n      themeMode: settings.themeMode === 'light' ? 'dark' : 'light'\n    });\n  };\n\n  const onChangeDirection = event => {\n    setSettings({ ...settings,\n      themeDirection: event.target.value\n    });\n  };\n\n  const onChangeColor = event => {\n    setSettings({ ...settings,\n      themeColorPresets: event.target.value\n    });\n  };\n\n  const onToggleStretch = () => {\n    setSettings({ ...settings,\n      themeStretch: !settings.themeStretch\n    });\n  };\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets,\n      themeStretch: initialState.themeStretch\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: { ...settings,\n      // Mode\n      onChangeMode,\n      onToggleMode,\n      // Direction\n      onChangeDirection,\n      // Color\n      onChangeColor,\n      setColor: getColorPresets(settings.themeColorPresets),\n      colorOption: colorPresets.map(color => ({\n        name: color.name,\n        value: color.main\n      })),\n      // Stretch\n      onToggleStretch,\n      // Reset Setting\n      onResetSetting\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SettingsProvider, \"zUV0jt8H91QSu9U3MGRBQ1WCbEg=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = SettingsProvider;\nexport { SettingsProvider, SettingsContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/contexts/SettingsContext.js"],"names":["PropTypes","createContext","useLocalStorage","getColorPresets","colorPresets","defaultPreset","defaultSettings","initialState","onChangeMode","onToggleMode","onChangeDirection","onChangeColor","onToggleStretch","onResetSetting","setColor","colorOption","SettingsContext","SettingsProvider","propTypes","children","node","settings","setSettings","themeMode","themeDirection","themeColorPresets","themeStretch","event","target","value","map","color","name","main"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { createContext } from 'react';\n// hooks\nimport useLocalStorage from '../hooks/useLocalStorage';\n// utils\nimport getColorPresets, { colorPresets, defaultPreset } from '../utils/getColorPresets';\n// config\nimport { defaultSettings } from '../config';\n\n// ----------------------------------------------------------------------\n\nconst initialState = {\n  ...defaultSettings,\n  onChangeMode: () => {},\n  onToggleMode: () => {},\n  onChangeDirection: () => {},\n  onChangeColor: () => {},\n  onToggleStretch: () => {},\n  onResetSetting: () => {},\n  setColor: defaultPreset,\n  colorOption: [],\n};\n\nconst SettingsContext = createContext(initialState);\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nfunction SettingsProvider({ children }) {\n  const [settings, setSettings] = useLocalStorage('settings', {\n    themeMode: initialState.themeMode,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets,\n    themeStretch: initialState.themeStretch,\n  });\n\n  const onChangeMode = (event) => {\n    setSettings({\n      ...settings,\n      themeMode: event.target.value,\n    });\n  };\n\n  const onToggleMode = () => {\n    setSettings({\n      ...settings,\n      themeMode: settings.themeMode === 'light' ? 'dark' : 'light',\n    });\n  };\n\n  const onChangeDirection = (event) => {\n    setSettings({\n      ...settings,\n      themeDirection: event.target.value,\n    });\n  };\n\n  const onChangeColor = (event) => {\n    setSettings({\n      ...settings,\n      themeColorPresets: event.target.value,\n    });\n  };\n\n  const onToggleStretch = () => {\n    setSettings({\n      ...settings,\n      themeStretch: !settings.themeStretch,\n    });\n  };\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets,\n      themeStretch: initialState.themeStretch,\n    });\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        ...settings,\n        // Mode\n        onChangeMode,\n        onToggleMode,\n        // Direction\n        onChangeDirection,\n        // Color\n        onChangeColor,\n        setColor: getColorPresets(settings.themeColorPresets),\n        colorOption: colorPresets.map((color) => ({\n          name: color.name,\n          value: color.main,\n        })),\n        // Stretch\n        onToggleStretch,\n        // Reset Setting\n        onResetSetting,\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport { SettingsProvider, SettingsContext };\n"]},"metadata":{},"sourceType":"module"}