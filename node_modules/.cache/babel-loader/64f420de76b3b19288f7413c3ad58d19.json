{"ast":null,"code":"import Courses from 'src/pages/courses/Courses';\nimport { description } from 'src/_mock/text';\nimport { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config';\n\nasync function getQuestion(id) {\n  console.log('request from client done');\n  var apiLink;\n  apiLink = apiUrl + '/question/getQuestion?id=' + id;\n  console.log(id, 'get Question Table iD');\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  console.log('Get Question Table iD', data);\n  return data;\n} //Fetch all course data using offset and limit!\n\n\nasync function getAllCourse(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/course/filterCourse';else apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api function for update a course \n\n\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status, courseImage) {\n  // var details = {\n  //     \"name\": name,\n  //     \"description\": description,\n  //     \"board\": board,\n  //     \"classes\": classes,\n  //     \"subject\": subject,\n  //     \"topic\": topic,\n  //     // \"coursePicture\": coursePicture,\n  //     'status':status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //     var encodedKey = encodeURIComponent(property);\n  //     var encodedValue = encodeURIComponent(details[property]);\n  //     formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"boardID\", boardID);\n\n  if (subBoardID) {\n    formData.append(\"subBoardID\", subBoardID);\n  }\n\n  formData.append(\"classesID\", classesID);\n  formData.append(\"subjectID\", subjectID); // formData.append(\"topicIDs\", topicIDs)\n\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", courseImage);\n  const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n      // 'Content-Type': 'multipart/form-data',\n\n    },\n    // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a course \n\n\nasync function createQuestion(id, question, media) {\n  //ne\n  const formData = new FormData();\n  formData.append('ID', id);\n  formData.append('question', question);\n  formData.append('media', media); // var details = {\n  //     \"ID\":id,\n  //     \"question\":question,\n  //     \"media\":media,                      \n  //   };\n\n  console.log('requsted to server');\n  console.log(formData);\n  var formBody = [];\n\n  for (var property in formData) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(formData[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/question/createQuestion', {\n    method: 'POST',\n    headers: {//   Accept: 'application/json',\n      //   'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData\n  }).then(res => res.json());\n  console.log(data);\n  return data;\n} //api to delete the course from the database\n\n\nasync function deleteCourse(courseID) {\n  const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular topic by sending the courdseId\n\n\nasync function getCourseById(courseID) {\n  const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\n  let obj = {\n    boardID: boardID,\n    subjectID: subjectID,\n    searchString: searchString,\n    startDate: startDate,\n    endDate: endDate,\n    sortByDate: sortByDate,\n    status: status\n  };\n  const queryString = objToQueryString(obj);\n  var apiLink;\n\n  if (queryString == null) {\n    apiLink = apiUrl + '/course/filterCourse';\n  } else {\n    apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  }\n\n  console.log(\"test call back\", queryString, obj);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get all courses of user\n\n\nasync function getAllUserCourses(userID) {\n  const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { createQuestion, getQuestion };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Question/Question.js"],"names":["Courses","description","apiUrl","objToQueryString","getQuestion","id","console","log","apiLink","data","fetch","method","headers","Accept","then","res","json","getAllCourse","page","limit","queryString","editCourse","courseID","name","boardID","subBoardID","classesID","subjectID","status","courseImage","formData","FormData","append","body","createQuestion","question","media","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deleteCourse","getCourseById","getCourseByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserCourses","userID"],"mappings":"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","sourcesContent":["import Courses from 'src/pages/courses/Courses';\r\nimport { description } from 'src/_mock/text';\r\nimport { apiUrl } from '../../config';\r\nimport { objToQueryString } from '../../config'\r\n\r\n\r\nasync function getQuestion(id) {\r\n    console.log('request from client done');\r\n\r\n    var apiLink;\r\n    \r\n        apiLink = apiUrl + '/question/getQuestion?id='+ id\r\n   \r\n        console.log( id, 'get Question Table iD' )\r\n\r\n    const data = await fetch(apiLink,  {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n\r\n    }).then((res) => res.json());\r\n\r\n    \r\n\r\n   console.log('Get Question Table iD', data)\r\n    return data;\r\n}\r\n//Fetch all course data using offset and limit!\r\nasync function getAllCourse(page, limit) {\r\n    const queryString = objToQueryString({\r\n        page: page,\r\n        limit: limit,\r\n    })\r\n    var apiLink;\r\n    if (queryString == null)\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    else\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n//api function for update a course \r\n\r\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status,courseImage) {\r\n    // var details = {\r\n    //     \"name\": name,\r\n    //     \"description\": description,\r\n    //     \"board\": board,\r\n    //     \"classes\": classes,\r\n    //     \"subject\": subject,\r\n    //     \"topic\": topic,\r\n    //     // \"coursePicture\": coursePicture,\r\n    //     'status':status\r\n    // };\r\n\r\n    // var formBody = [];\r\n    // for (var property in details) {\r\n    //     var encodedKey = encodeURIComponent(property);\r\n    //     var encodedValue = encodeURIComponent(details[property]);\r\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\r\n    // }\r\n    // formBody = formBody.join(\"&\");\r\n    const formData = new FormData();\r\n    formData.append(\"name\", name)\r\n    formData.append(\"boardID\", boardID)\r\n    if (subBoardID) {\r\n        formData.append(\"subBoardID\", subBoardID)\r\n    }\r\n    formData.append(\"classesID\", classesID)\r\n    formData.append(\"subjectID\", subjectID)\r\n    // formData.append(\"topicIDs\", topicIDs)\r\n    formData.append(\"description\", description)\r\n    formData.append(\"status\", status)\r\n    formData.append(\"image\", courseImage)\r\n    const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n            // 'Content-Type': 'multipart/form-data',\r\n        },\r\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\r\n        body:formData\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api function for adding a course \r\nasync function createQuestion( id,question, media) {\r\n\r\n    //ne\r\n    const formData = new FormData()\r\n  formData.append('ID', id)\r\n  formData.append('question', question)\r\n  formData.append('media', media)\r\n    // var details = {\r\n    //     \"ID\":id,\r\n    //     \"question\":question,\r\n    //     \"media\":media,                      \r\n        \r\n    //   };\r\n  console.log('requsted to server');\r\n  console.log(formData);\r\n      var formBody = [];\r\n      for (var property in formData) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(formData[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n      }\r\n      formBody = formBody.join(\"&\");\r\n      const data = await fetch(apiUrl + '/question/createQuestion', {\r\n        method: 'POST',\r\n        headers: {\r\n        //   Accept: 'application/json',\r\n        //   'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body:formData,\r\n      }).then((res) => res.json());\r\n\r\n      console.log(data);\r\n      return data;\r\n      \r\n}\r\n\r\n//api to delete the course from the database\r\nasync function deleteCourse(courseID) {\r\n    const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n//api to get the details of a particular topic by sending the courdseId\r\nasync function getCourseById(courseID) {\r\n    const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\n\r\n\r\n\r\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\r\n    let obj = {\r\n        boardID: boardID,\r\n        subjectID: subjectID,\r\n        searchString: searchString,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n        sortByDate: sortByDate,\r\n        status: status\r\n    }\r\n    const queryString = objToQueryString(obj)\r\n    var apiLink;\r\n    if (queryString == null) {\r\n        apiLink = apiUrl + '/course/filterCourse'\r\n    }\r\n    else {\r\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\r\n    }\r\n\r\n    console.log(\"test call back\", queryString, obj)\r\n    const data = await fetch(apiLink, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            // 'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n\r\n}\r\n\r\n//api to get all courses of user\r\nasync function getAllUserCourses(userID) {\r\n    const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\r\n        method: 'GET',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then((res) => res.json());\r\n    return data;\r\n}\r\n\r\nexport {createQuestion, getQuestion}"]},"metadata":{},"sourceType":"module"}