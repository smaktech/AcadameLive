{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all Resourse data using offset and limit!\n\nasync function getAllResourse(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/resource/filterResource';else apiLink = apiUrl + '/resource/filterResource?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api function for update a resourse \n\n\nasync function editResourse(resourceID, name, description, linkType, linkString, resourceFile, status) {\n  var formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"description\", description);\n  formData.append(\"linkType\", linkType);\n  formData.append(\"linkString\", linkString);\n  formData.append(\"resourceFile\", resourceFile);\n  formData.append(\"status\", status);\n  const data = await fetch(apiUrl + '/resource/editResource/' + resourceID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a resourse \n\n\nasync function createResourse(name, description, linkType, linkString, resourceFile, status) {\n  var formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"description\", description);\n  formData.append(\"linkType\", linkType);\n  formData.append(\"linkString\", linkString);\n  formData.append(\"resourceFile\", resourceFile);\n  formData.append(\"status\", status);\n  const data = await fetch(apiUrl + '/resource/createResource', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json'\n    },\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api to delete the resourse from the database\n\n\nasync function deleteResourse(resourseID) {\n  const data = await fetch(apiUrl + '/resource/deleteResourceById/' + resourseID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular Resourse by sending the courdseId\n\n\nasync function getResourseById(resourseID) {\n  const data = await fetch(apiUrl + '/resource/getResourceById/' + resourseID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getResourseByFilter(searchString, status, startDate, endDate, page, limit, sortByDate) {\n  const queryString = objToQueryString({\n    searchString: searchString,\n    status: status,\n    startDate: startDate,\n    endDate: endDate,\n    page: page,\n    limit: limit,\n    sortByDate: sortByDate\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/resource/filterResource';else apiLink = apiUrl + '/resource/filterResource?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllResourse, editResourse, deleteResourse, getResourseByFilter, getResourseById, createResourse };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Resourses/Resourses.js"],"names":["apiUrl","objToQueryString","getAllResourse","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","editResourse","resourceID","name","description","linkType","linkString","resourceFile","status","formData","FormData","append","body","createResourse","deleteResourse","resourseID","getResourseById","getResourseByFilter","searchString","startDate","endDate","sortByDate"],"mappings":"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","sourcesContent":["  import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all Resourse data using offset and limit!\nasync function getAllResourse(page, limit) {\n    const queryString = objToQueryString({\n        page: page,\n        limit: limit,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/resource/filterResource'\n    else\n        apiLink = apiUrl + '/resource/filterResource?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//api function for update a resourse \nasync function editResourse(resourceID, name, description,linkType, linkString, resourceFile,status) {\n    var formData   = new FormData();  \n    formData.append(\"name\", name) \n    formData.append(\"description\", description) \n    formData.append(\"linkType\", linkType) \n    formData.append(\"linkString\", linkString)\n    formData.append(\"resourceFile\", resourceFile) \n    formData.append(\"status\", status)\n\n    const data = await fetch(apiUrl + '/resource/editResource/' + resourceID , {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: formData,\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api function for adding a resourse \nasync function createResourse(name, description, linkType, linkString, resourceFile, status) {\n    var formData   = new FormData();  \n    formData.append(\"name\", name) \n    formData.append(\"description\", description) \n    formData.append(\"linkType\", linkType) \n    formData.append(\"linkString\", linkString) \n    formData.append(\"resourceFile\", resourceFile) \n    formData.append(\"status\", status)\n    const data = await fetch(apiUrl + '/resource/createResource', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n        },\n        body: formData,\n    }).then((res) => res.json());\n    return data;\n}\n\n\n//api to delete the resourse from the database\nasync function deleteResourse(resourseID) {\n    const data = await fetch(apiUrl + '/resource/deleteResourceById/' + resourseID, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//api to get the details of a particular Resourse by sending the courdseId\nasync function getResourseById(resourseID) {\n    const data = await fetch(apiUrl + '/resource/getResourceById/' + resourseID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\nasync function getResourseByFilter(searchString, status, startDate, endDate, page, limit, sortByDate) {\n    const queryString = objToQueryString({\n        searchString: searchString,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        page: page,\n        limit: limit,\n        sortByDate: sortByDate,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/resource/filterResource'\n    else\n        apiLink = apiUrl + '/resource/filterResource?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\nexport { getAllResourse, editResourse, deleteResourse, getResourseByFilter, getResourseById, createResourse }"]},"metadata":{},"sourceType":"module"}