{"ast":null,"code":"import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createContext}from'react';// hooks\nimport useLocalStorage from'../hooks/useLocalStorage';// utils\nimport getColorPresets,{colorPresets,defaultPreset}from'../utils/getColorPresets';// config\nimport{defaultSettings}from'../config';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState=_objectSpread(_objectSpread({},defaultSettings),{},{onChangeMode:function onChangeMode(){},onToggleMode:function onToggleMode(){},onChangeDirection:function onChangeDirection(){},onChangeColor:function onChangeColor(){},onToggleStretch:function onToggleStretch(){},onResetSetting:function onResetSetting(){},setColor:defaultPreset,colorOption:[]});var SettingsContext=/*#__PURE__*/createContext(initialState);function SettingsProvider(_ref){var children=_ref.children;var _useLocalStorage=useLocalStorage('settings',{themeMode:initialState.themeMode,themeDirection:initialState.themeDirection,themeColorPresets:initialState.themeColorPresets,themeStretch:initialState.themeStretch}),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),settings=_useLocalStorage2[0],setSettings=_useLocalStorage2[1];var onChangeMode=function onChangeMode(event){setSettings(_objectSpread(_objectSpread({},settings),{},{themeMode:event.target.value}));};var onToggleMode=function onToggleMode(){setSettings(_objectSpread(_objectSpread({},settings),{},{themeMode:settings.themeMode==='light'?'dark':'light'}));};var onChangeDirection=function onChangeDirection(event){setSettings(_objectSpread(_objectSpread({},settings),{},{themeDirection:event.target.value}));};var onChangeColor=function onChangeColor(event){setSettings(_objectSpread(_objectSpread({},settings),{},{themeColorPresets:event.target.value}));};var onToggleStretch=function onToggleStretch(){setSettings(_objectSpread(_objectSpread({},settings),{},{themeStretch:!settings.themeStretch}));};var onResetSetting=function onResetSetting(){setSettings({themeMode:initialState.themeMode,themeDirection:initialState.themeDirection,themeColorPresets:initialState.themeColorPresets,themeStretch:initialState.themeStretch});};return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:_objectSpread(_objectSpread({},settings),{},{// Mode\nonChangeMode:onChangeMode,onToggleMode:onToggleMode,// Direction\nonChangeDirection:onChangeDirection,// Color\nonChangeColor:onChangeColor,setColor:getColorPresets(settings.themeColorPresets),colorOption:colorPresets.map(function(color){return{name:color.name,value:color.main};}),// Stretch\nonToggleStretch:onToggleStretch,// Reset Setting\nonResetSetting:onResetSetting}),children:children});}export{SettingsProvider,SettingsContext};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/contexts/SettingsContext.js"],"names":["createContext","useLocalStorage","getColorPresets","colorPresets","defaultPreset","defaultSettings","initialState","onChangeMode","onToggleMode","onChangeDirection","onChangeColor","onToggleStretch","onResetSetting","setColor","colorOption","SettingsContext","SettingsProvider","children","themeMode","themeDirection","themeColorPresets","themeStretch","settings","setSettings","event","target","value","map","color","name","main"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { createContext } from 'react';\n// hooks\nimport useLocalStorage from '../hooks/useLocalStorage';\n// utils\nimport getColorPresets, { colorPresets, defaultPreset } from '../utils/getColorPresets';\n// config\nimport { defaultSettings } from '../config';\n\n// ----------------------------------------------------------------------\n\nconst initialState = {\n  ...defaultSettings,\n  onChangeMode: () => {},\n  onToggleMode: () => {},\n  onChangeDirection: () => {},\n  onChangeColor: () => {},\n  onToggleStretch: () => {},\n  onResetSetting: () => {},\n  setColor: defaultPreset,\n  colorOption: [],\n};\n\nconst SettingsContext = createContext(initialState);\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nfunction SettingsProvider({ children }) {\n  const [settings, setSettings] = useLocalStorage('settings', {\n    themeMode: initialState.themeMode,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets,\n    themeStretch: initialState.themeStretch,\n  });\n\n  const onChangeMode = (event) => {\n    setSettings({\n      ...settings,\n      themeMode: event.target.value,\n    });\n  };\n\n  const onToggleMode = () => {\n    setSettings({\n      ...settings,\n      themeMode: settings.themeMode === 'light' ? 'dark' : 'light',\n    });\n  };\n\n  const onChangeDirection = (event) => {\n    setSettings({\n      ...settings,\n      themeDirection: event.target.value,\n    });\n  };\n\n  const onChangeColor = (event) => {\n    setSettings({\n      ...settings,\n      themeColorPresets: event.target.value,\n    });\n  };\n\n  const onToggleStretch = () => {\n    setSettings({\n      ...settings,\n      themeStretch: !settings.themeStretch,\n    });\n  };\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets,\n      themeStretch: initialState.themeStretch,\n    });\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        ...settings,\n        // Mode\n        onChangeMode,\n        onToggleMode,\n        // Direction\n        onChangeDirection,\n        // Color\n        onChangeColor,\n        setColor: getColorPresets(settings.themeColorPresets),\n        colorOption: colorPresets.map((color) => ({\n          name: color.name,\n          value: color.main,\n        })),\n        // Stretch\n        onToggleStretch,\n        // Reset Setting\n        onResetSetting,\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport { SettingsProvider, SettingsContext };\n"]},"metadata":{},"sourceType":"module"}