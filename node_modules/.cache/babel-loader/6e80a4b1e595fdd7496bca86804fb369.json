{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\chat\\\\ChatWindow.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'; // @mui\n\nimport { Box, Divider, Stack } from '@mui/material'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { addRecipients, onSendMessage, getConversation, getParticipants, markConversationAsRead, resetActiveConversation } from '../../../redux/slices/chat'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst conversationSelector = state => {\n  const {\n    conversations,\n    activeConversationId\n  } = state.chat;\n  const conversation = activeConversationId ? conversations.byId[activeConversationId] : null;\n\n  if (conversation) {\n    return conversation;\n  }\n\n  const initState = {\n    id: '',\n    messages: [],\n    participants: [],\n    unreadCount: 0,\n    type: ''\n  };\n  return initState;\n};\n\nexport default function ChatWindow() {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    conversationKey\n  } = useParams();\n  const {\n    contacts,\n    recipients,\n    participants,\n    activeConversationId\n  } = useSelector(state => state.chat);\n  const conversation = useSelector(state => conversationSelector(state));\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter(item => item.id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(conversationKey));\n\n      try {\n        await dispatch(getConversation(conversationKey));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [conversationKey]);\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipients = recipients => {\n    dispatch(addRecipients(recipients));\n  };\n\n  const handleSendMessage = async value => {\n    try {\n      dispatch(onSendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    sx: {\n      flexGrow: 1,\n      minWidth: '1px'\n    },\n    children: [mode === 'DETAIL' ? /*#__PURE__*/_jsxDEV(ChatHeaderDetail, {\n      participants: displayParticipants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChatHeaderCompose, {\n      recipients: recipients,\n      contacts: Object.values(contacts.byId),\n      onAddRecipients: handleAddRecipients\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        display: 'flex',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        sx: {\n          flexGrow: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatMessageList, {\n          conversation: conversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatMessageInput, {\n          conversationId: activeConversationId,\n          onSend: handleSendMessage,\n          disabled: pathname === PATH_DASHBOARD.chat.new\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), mode === 'DETAIL' && /*#__PURE__*/_jsxDEV(ChatRoom, {\n        conversation: conversation,\n        participants: displayParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatWindow, \"fIdKWOdiNW6cZ695yGPTuC76Jlk=\", false, function () {\n  return [useDispatch, useNavigate, useLocation, useParams, useSelector, useSelector];\n});\n\n_c = ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","Stack","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","PATH_DASHBOARD","ChatRoom","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","conversationSelector","state","conversations","activeConversationId","chat","conversation","byId","initState","id","messages","participants","unreadCount","type","ChatWindow","dispatch","navigate","pathname","conversationKey","contacts","recipients","mode","displayParticipants","filter","item","getDetails","error","console","new","handleAddRecipients","handleSendMessage","value","flexGrow","minWidth","Object","values","display","overflow"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\n// @mui\nimport { Box, Divider, Stack } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  addRecipients,\n  onSendMessage,\n  getConversation,\n  getParticipants,\n  markConversationAsRead,\n  resetActiveConversation,\n} from '../../../redux/slices/chat';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose';\n\n// ----------------------------------------------------------------------\n\nconst conversationSelector = (state) => {\n  const { conversations, activeConversationId } = state.chat;\n  const conversation = activeConversationId ? conversations.byId[activeConversationId] : null;\n  if (conversation) {\n    return conversation;\n  }\n  const initState = {\n    id: '',\n    messages: [],\n    participants: [],\n    unreadCount: 0,\n    type: '',\n  };\n  return initState;\n};\n\nexport default function ChatWindow() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const { conversationKey } = useParams();\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.chat);\n  const conversation = useSelector((state) => conversationSelector(state));\n\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter((item) => item.id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(conversationKey));\n      try {\n        await dispatch(getConversation(conversationKey));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conversationKey]);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipients = (recipients) => {\n    dispatch(addRecipients(recipients));\n  };\n\n  const handleSendMessage = async (value) => {\n    try {\n      dispatch(onSendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Stack sx={{ flexGrow: 1, minWidth: '1px' }}>\n      {mode === 'DETAIL' ? (\n        <ChatHeaderDetail participants={displayParticipants} />\n      ) : (\n        <ChatHeaderCompose\n          recipients={recipients}\n          contacts={Object.values(contacts.byId)}\n          onAddRecipients={handleAddRecipients}\n        />\n      )}\n\n      <Divider />\n\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\n        <Stack sx={{ flexGrow: 1 }}>\n          <ChatMessageList conversation={conversation} />\n\n          <Divider />\n\n          <ChatMessageInput\n            conversationId={activeConversationId}\n            onSend={handleSendMessage}\n            disabled={pathname === PATH_DASHBOARD.chat.new}\n          />\n        </Stack>\n\n        {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />}\n      </Box>\n    </Stack>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}