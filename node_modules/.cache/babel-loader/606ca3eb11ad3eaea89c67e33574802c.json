{"ast":null,"code":"import _objectSpread from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import MapGL,{Source,Layer}from'react-map-gl';import{useEffect,useState,useMemo}from'react';// components\nimport{MapControlScale,MapControlGeolocate,MapControlNavigation,MapControlFullscreen}from'../../../components/map';//\nimport ControlPanel from'./ControlPanel';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var HEATMAP_LAYER={maxzoom:9,type:'heatmap',paint:{'heatmap-weight':['interpolate',['linear'],['get','mag'],0,0,6,1],'heatmap-intensity':['interpolate',['linear'],['zoom'],0,1,9,3],'heatmap-color':['interpolate',['linear'],['heatmap-density'],0,'rgba(33,102,172,0)',0.2,'rgb(103,169,207)',0.4,'rgb(209,229,240)',0.6,'rgb(253,219,199)',0.8,'rgb(239,138,98)',0.9,'rgb(255,201,101)'],'heatmap-radius':['interpolate',['linear'],['zoom'],0,2,9,20],'heatmap-opacity':['interpolate',['linear'],['zoom'],7,1,9,0]}};// ----------------------------------------------------------------------\nfunction filterFeaturesByDay(featureCollection,time){var date=new Date(time);var year=date.getFullYear();var month=date.getMonth();var day=date.getDate();var features=featureCollection.features.filter(function(feature){var featureDate=new Date(feature.properties.time);return featureDate.getFullYear()===year&&featureDate.getMonth()===month&&featureDate.getDate()===day;});return{type:'FeatureCollection',features:features};}export default function MapHeatmap(_ref){var other=Object.assign({},_ref);var _useState=useState(true),_useState2=_slicedToArray(_useState,2),allDays=_useState2[0],useAllDays=_useState2[1];var _useState3=useState([0,0]),_useState4=_slicedToArray(_useState3,2),timeRange=_useState4[0],setTimeRange=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),selectedTime=_useState6[0],selectTime=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),earthquakes=_useState8[0],setEarthQuakes=_useState8[1];var _useState9=useState({latitude:40,longitude:-100,zoom:3,bearing:0,pitch:0}),_useState10=_slicedToArray(_useState9,2),viewport=_useState10[0],setViewport=_useState10[1];useEffect(function(){fetch('https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson').then(function(resp){return resp.json();}).then(function(json){var features=json.features;var endTime=features[0].properties.time;var startTime=features[features.length-1].properties.time;setTimeRange([startTime,endTime]);setEarthQuakes(json);selectTime(endTime);});},[]);var data=useMemo(function(){return allDays?earthquakes:filterFeaturesByDay(earthquakes,selectedTime);},[earthquakes,allDays,selectedTime]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(MapGL,_objectSpread(_objectSpread(_objectSpread({},viewport),{},{onViewportChange:setViewport},other),{},{children:[/*#__PURE__*/_jsx(MapControlScale,{}),/*#__PURE__*/_jsx(MapControlNavigation,{}),/*#__PURE__*/_jsx(MapControlFullscreen,{}),/*#__PURE__*/_jsx(MapControlGeolocate,{}),data&&/*#__PURE__*/_jsx(Source,{type:\"geojson\",data:data,children:/*#__PURE__*/_jsx(Layer,_objectSpread({},HEATMAP_LAYER))})]})),/*#__PURE__*/_jsx(ControlPanel,{startTime:timeRange[0],endTime:timeRange[1],allDays:allDays,selectedTime:selectedTime,onChangeTime:selectTime,onChangeAllDays:useAllDays})]});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/heatmap/index.js"],"names":["MapGL","Source","Layer","useEffect","useState","useMemo","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","ControlPanel","HEATMAP_LAYER","maxzoom","type","paint","filterFeaturesByDay","featureCollection","time","date","Date","year","getFullYear","month","getMonth","day","getDate","features","filter","feature","featureDate","properties","MapHeatmap","other","allDays","useAllDays","timeRange","setTimeRange","selectedTime","selectTime","earthquakes","setEarthQuakes","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","fetch","then","resp","json","endTime","startTime","length","data"],"mappings":"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","sourcesContent":["import MapGL, { Source, Layer } from 'react-map-gl';\nimport { useEffect, useState, useMemo } from 'react';\n// components\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen,\n} from '../../../components/map';\n//\nimport ControlPanel from './ControlPanel';\n\n// ----------------------------------------------------------------------\n\nconst HEATMAP_LAYER = {\n  maxzoom: 9,\n  type: 'heatmap',\n  paint: {\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n    'heatmap-color': [\n      'interpolate',\n      ['linear'],\n      ['heatmap-density'],\n      0,\n      'rgba(33,102,172,0)',\n      0.2,\n      'rgb(103,169,207)',\n      0.4,\n      'rgb(209,229,240)',\n      0.6,\n      'rgb(253,219,199)',\n      0.8,\n      'rgb(239,138,98)',\n      0.9,\n      'rgb(255,201,101)',\n    ],\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0],\n  },\n};\n\n// ----------------------------------------------------------------------\n\nfunction filterFeaturesByDay(featureCollection, time) {\n  const date = new Date(time);\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n  const features = featureCollection.features.filter((feature) => {\n    const featureDate = new Date(feature.properties.time);\n    return featureDate.getFullYear() === year && featureDate.getMonth() === month && featureDate.getDate() === day;\n  });\n  return { type: 'FeatureCollection', features };\n}\n\nexport default function MapHeatmap({ ...other }) {\n  const [allDays, useAllDays] = useState(true);\n  const [timeRange, setTimeRange] = useState([0, 0]);\n  const [selectedTime, selectTime] = useState(0);\n  const [earthquakes, setEarthQuakes] = useState(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40,\n    longitude: -100,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  useEffect(() => {\n    fetch('https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson')\n      .then((resp) => resp.json())\n      .then((json) => {\n        const { features } = json;\n        const endTime = features[0].properties.time;\n        const startTime = features[features.length - 1].properties.time;\n\n        setTimeRange([startTime, endTime]);\n        setEarthQuakes(json);\n        selectTime(endTime);\n      });\n  }, []);\n\n  const data = useMemo(\n    () => (allDays ? earthquakes : filterFeaturesByDay(earthquakes, selectedTime)),\n    [earthquakes, allDays, selectedTime]\n  );\n\n  return (\n    <>\n      <MapGL {...viewport} onViewportChange={setViewport} {...other}>\n        <MapControlScale />\n        <MapControlNavigation />\n        <MapControlFullscreen />\n        <MapControlGeolocate />\n\n        {data && (\n          <Source type=\"geojson\" data={data}>\n            <Layer {...HEATMAP_LAYER} />\n          </Source>\n        )}\n      </MapGL>\n\n      <ControlPanel\n        startTime={timeRange[0]}\n        endTime={timeRange[1]}\n        allDays={allDays}\n        selectedTime={selectedTime}\n        onChangeTime={selectTime}\n        onChangeAllDays={useAllDays}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}