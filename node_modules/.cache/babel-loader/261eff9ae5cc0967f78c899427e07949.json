{"ast":null,"code":"import _createForOfIteratorHelper from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{apiUrl}from'../../config';import{objToQueryString}from'../../config';//Fetch all course data using offset and limit!\nfunction getAllCourse(_x,_x2){return _getAllCourse.apply(this,arguments);}//api function for update a course \nfunction _getAllCourse(){_getAllCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page,limit){var queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:queryString=objToQueryString({page:page,limit:limit});if(queryString==null)apiLink=apiUrl+'/course/filterCourse';else apiLink=apiUrl+'/course/filterCourse?'+queryString;_context.next=4;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 4:data=_context.sent;return _context.abrupt(\"return\",data);case 6:case\"end\":return _context.stop();}}},_callee);}));return _getAllCourse.apply(this,arguments);}function editCourse(_x3,_x4,_x5,_x6,_x7,_x8,_x9,_x10,_x11){return _editCourse.apply(this,arguments);}//api function for adding a course \nfunction _editCourse(){_editCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(courseID,name,boardID,subBoardID,classesID,subjectID,description,status,courseImage){var formData,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// var details = {\n//     \"name\": name,\n//     \"description\": description,\n//     \"board\": board,\n//     \"classes\": classes,\n//     \"subject\": subject,\n//     \"topic\": topic,\n//     // \"coursePicture\": coursePicture,\n//     'status':status\n// };\n// var formBody = [];\n// for (var property in details) {\n//     var encodedKey = encodeURIComponent(property);\n//     var encodedValue = encodeURIComponent(details[property]);\n//     formBody.push(encodedKey + \"=\" + encodedValue);\n// }\n// formBody = formBody.join(\"&\");\nformData=new FormData();formData.append(\"name\",name);formData.append(\"boardID\",boardID);if(subBoardID){formData.append(\"subBoardID\",subBoardID);}formData.append(\"classesID\",classesID);formData.append(\"subjectID\",subjectID);// formData.append(\"topicIDs\", topicIDs)\nformData.append(\"description\",description);formData.append(\"status\",status);formData.append(\"image\",courseImage);_context2.next=11;return fetch(apiUrl+'/course/editCourse/'+courseID,{method:'PATCH',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n// 'Content-Type': 'multipart/form-data',\n},// body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\nbody:formData}).then(function(res){return res.json();});case 11:data=_context2.sent;return _context2.abrupt(\"return\",data);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return _editCourse.apply(this,arguments);}function createCourse(_x12,_x13,_x14,_x15,_x16,_x17,_x18,_x19){return _createCourse.apply(this,arguments);}//api to delete the course from the database\nfunction _createCourse(){_createCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name,boardID,subBoardID,classesID,subjectID,description,status,image){var formData,_iterator,_step,pair,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:formData=new FormData();formData.append(\"name\",name);formData.append(\"boardID\",boardID);if(subBoardID){formData.append(\"subBoardID\",subBoardID);}formData.append(\"classesID\",classesID);formData.append(\"subjectID\",subjectID);// formData.append(\"topicIDs\", topicIDs)\nformData.append(\"description\",description);formData.append(\"status\",status);formData.append(\"image\",image);_iterator=_createForOfIteratorHelper(formData.entries());try{for(_iterator.s();!(_step=_iterator.n()).done;){pair=_step.value;console.log(pair[0]+', '+pair[1]);}}catch(err){_iterator.e(err);}finally{_iterator.f();}_context3.next=13;return fetch(apiUrl+'/course/createCourse',{method:'POST',// headers: {\n//     Accept: 'application/json',\n//     'Content-Type': 'application/json',\n//     'Content-Type': 'multipart/form-data',\n// },\n// body: JSON.stringify({ name, subBoardID, classesID, boardID, subjectID, description, status }),\nbody:formData}).then(function(res){return res.json();});case 13:data=_context3.sent;return _context3.abrupt(\"return\",data);case 15:case\"end\":return _context3.stop();}}},_callee3);}));return _createCourse.apply(this,arguments);}function deleteCourse(_x20){return _deleteCourse.apply(this,arguments);}//api to get the details of a particular topic by sending the courdseId\nfunction _deleteCourse(){_deleteCourse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(courseID){var data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetch(apiUrl+'/course/deleteCourseById/'+courseID,{method:'DELETE',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n}}).then(function(res){return res.json();});case 2:data=_context4.sent;return _context4.abrupt(\"return\",data);case 4:case\"end\":return _context4.stop();}}},_callee4);}));return _deleteCourse.apply(this,arguments);}function getCourseById(_x21){return _getCourseById.apply(this,arguments);}function _getCourseById(){_getCourseById=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(courseID){var data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetch(apiUrl+'/course/getCourseById/'+courseID,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 2:data=_context5.sent;return _context5.abrupt(\"return\",data);case 4:case\"end\":return _context5.stop();}}},_callee5);}));return _getCourseById.apply(this,arguments);}function getCourseByFilter(_x22,_x23,_x24,_x25,_x26,_x27,_x28){return _getCourseByFilter.apply(this,arguments);}//api to get all courses of user\nfunction _getCourseByFilter(){_getCourseByFilter=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(searchString,startDate,endDate,sortByDate,status,boardID,subjectID){var obj,queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:obj={boardID:boardID,subjectID:subjectID,searchString:searchString,startDate:startDate,endDate:endDate,sortByDate:sortByDate,status:status};queryString=objToQueryString(obj);if(queryString==null){apiLink=apiUrl+'/course/filterCourse';}else{apiLink=apiUrl+'/course/filterCourse?'+queryString;}console.log(\"test call back\",queryString,obj);_context6.next=6;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json'// 'Content-Type': 'application/json',\n}}).then(function(res){return res.json();});case 6:data=_context6.sent;return _context6.abrupt(\"return\",data);case 8:case\"end\":return _context6.stop();}}},_callee6);}));return _getCourseByFilter.apply(this,arguments);}function getAllUserCourses(_x29){return _getAllUserCourses.apply(this,arguments);}function _getAllUserCourses(){_getAllUserCourses=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(userID){var data;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return fetch(apiUrl+'/userCourse/getAllUserCourses/'+userID,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 2:data=_context7.sent;return _context7.abrupt(\"return\",data);case 4:case\"end\":return _context7.stop();}}},_callee7);}));return _getAllUserCourses.apply(this,arguments);}export{getAllCourse,editCourse,deleteCourse,getCourseByFilter,getCourseById,getAllUserCourses,createCourse};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Courses/Courses.js"],"names":["apiUrl","objToQueryString","getAllCourse","page","limit","queryString","apiLink","fetch","method","headers","Accept","then","res","json","data","editCourse","courseID","name","boardID","subBoardID","classesID","subjectID","description","status","courseImage","formData","FormData","append","body","createCourse","image","entries","pair","console","log","deleteCourse","getCourseById","getCourseByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserCourses","userID"],"mappings":"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","sourcesContent":["import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all course data using offset and limit!\nasync function getAllCourse(page, limit) {\n    const queryString = objToQueryString({\n        page: page,\n        limit: limit,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/course/filterCourse'\n    else\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//api function for update a course \n\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status,courseImage) {\n    // var details = {\n    //     \"name\": name,\n    //     \"description\": description,\n    //     \"board\": board,\n    //     \"classes\": classes,\n    //     \"subject\": subject,\n    //     \"topic\": topic,\n    //     // \"coursePicture\": coursePicture,\n    //     'status':status\n    // };\n\n    // var formBody = [];\n    // for (var property in details) {\n    //     var encodedKey = encodeURIComponent(property);\n    //     var encodedValue = encodeURIComponent(details[property]);\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\n    // }\n    // formBody = formBody.join(\"&\");\n    const formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"boardID\", boardID)\n    if (subBoardID) {\n        formData.append(\"subBoardID\", subBoardID)\n    }\n    formData.append(\"classesID\", classesID)\n    formData.append(\"subjectID\", subjectID)\n    // formData.append(\"topicIDs\", topicIDs)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", courseImage)\n    const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n            // 'Content-Type': 'multipart/form-data',\n        },\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n        body:formData\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api function for adding a course \nasync function createCourse(name, boardID, subBoardID, classesID, subjectID, description, status, image) {\n    const formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"boardID\", boardID)\n    if (subBoardID) {\n        formData.append(\"subBoardID\", subBoardID)\n    }\n    formData.append(\"classesID\", classesID)\n    formData.append(\"subjectID\", subjectID)\n    // formData.append(\"topicIDs\", topicIDs)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", image)\n\n    for (var pair of formData.entries()) {\n        console.log(pair[0] + ', ' + pair[1]);\n    }\n\n    const data = await fetch(apiUrl + '/course/createCourse', {\n        method: 'POST',\n        // headers: {\n        //     Accept: 'application/json',\n        //     'Content-Type': 'application/json',\n        //     'Content-Type': 'multipart/form-data',\n        // },\n        // body: JSON.stringify({ name, subBoardID, classesID, boardID, subjectID, description, status }),\n        body: formData\n    })\n    .then((res) => res.json());\n    return data;\n}\n\n//api to delete the course from the database\nasync function deleteCourse(courseID) {\n    const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n   \n    return data;\n}\n\n//api to get the details of a particular topic by sending the courdseId\nasync function getCourseById(courseID) {\n    const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\n\n\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\n    let obj = {\n        boardID: boardID,\n        subjectID: subjectID,\n        searchString: searchString,\n        startDate: startDate,\n        endDate: endDate,\n        sortByDate: sortByDate,\n        status: status\n    }\n    const queryString = objToQueryString(obj)\n    var apiLink;\n    if (queryString == null) {\n        apiLink = apiUrl + '/course/filterCourse'\n    }\n    else {\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\n    }\n\n    console.log(\"test call back\", queryString, obj)\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api to get all courses of user\nasync function getAllUserCourses(userID) {\n    const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\nexport { getAllCourse, editCourse, deleteCourse, getCourseByFilter, getCourseById, getAllUserCourses, createCourse }"]},"metadata":{},"sourceType":"module"}