{"ast":null,"code":"import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as Yup from'yup';import{useFormik}from'formik';import{useState}from'react';import{useSnackbar}from'notistack';// @mui\nimport{Box,Grid,Card,Button,Typography,Stack}from'@mui/material';//\nimport AccountBillingAddressBook from'./AccountBillingAddressBook';import AccountBillingPaymentMethod from'./AccountBillingPaymentMethod';import AccountBillingInvoiceHistory from'./AccountBillingInvoiceHistory';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function AccountBilling(_ref){var cards=_ref.cards,addressBook=_ref.addressBook,invoices=_ref.invoices;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var NewCardSchema=Yup.object().shape({cardName:Yup.string().required('Name is required'),cardNumber:Yup.string().required('Card number is required'),cardExpired:Yup.string().required('Card expired is required'),cardCvv:Yup.string().required('Cvv is required')});var formik=useFormik({initialValues:{cardName:'',cardNumber:'',cardExpired:'',cardCvv:''},validationSchema:NewCardSchema,onSubmit:function(){var _onSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,_ref2){var setSubmitting,resetForm;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSubmitting=_ref2.setSubmitting,resetForm=_ref2.resetForm;_context.next=3;return new Promise(function(resolve){return setTimeout(resolve,500);});case 3:handleCancel();resetForm();setSubmitting(false);enqueueSnackbar('Add card success',{variant:'success'});case 7:case\"end\":return _context.stop();}}},_callee);}));function onSubmit(_x,_x2){return _onSubmit.apply(this,arguments);}return onSubmit;}()});var handleOpenAddCard=function handleOpenAddCard(){setOpen(function(prevOpen){return!prevOpen;});};var handleCancel=function handleCancel(){setOpen(false);formik.resetForm();};return/*#__PURE__*/_jsxs(Grid,{container:true,spacing:5,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:8,children:/*#__PURE__*/_jsxs(Stack,{spacing:3,children:[/*#__PURE__*/_jsxs(Card,{sx:{p:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"overline\",sx:{mb:3,display:'block',color:'text.secondary'},children:\"Your Plan\"}),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",children:\"Premium\"}),/*#__PURE__*/_jsxs(Box,{sx:{mt:{xs:2,sm:0},position:{sm:'absolute'},top:{sm:24},right:{sm:24}},children:[/*#__PURE__*/_jsx(Button,{size:\"small\",color:\"inherit\",variant:\"outlined\",sx:{mr:1},children:\"Cancel plan\"}),/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outlined\",children:\"Upgrade plan\"})]})]}),/*#__PURE__*/_jsx(AccountBillingPaymentMethod,{cards:cards,formik:formik,isOpen:open,onOpen:handleOpenAddCard,onCancel:handleCancel}),/*#__PURE__*/_jsx(AccountBillingAddressBook,{addressBook:addressBook})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:4,children:/*#__PURE__*/_jsx(AccountBillingInvoiceHistory,{invoices:invoices})})]});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/user/account/AccountBilling.js"],"names":["Yup","useFormik","useState","useSnackbar","Box","Grid","Card","Button","Typography","Stack","AccountBillingAddressBook","AccountBillingPaymentMethod","AccountBillingInvoiceHistory","AccountBilling","cards","addressBook","invoices","open","setOpen","enqueueSnackbar","NewCardSchema","object","shape","cardName","string","required","cardNumber","cardExpired","cardCvv","formik","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","Promise","resolve","setTimeout","handleCancel","variant","handleOpenAddCard","prevOpen","p","mb","display","color","mt","xs","sm","position","top","right","mr"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\n// @mui\nimport { Box, Grid, Card, Button, Typography, Stack } from '@mui/material';\n//\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory';\n\n// ----------------------------------------------------------------------\n\nAccountBilling.propTypes = {\n  addressBook: PropTypes.array,\n  cards: PropTypes.array,\n  invoices: PropTypes.array,\n};\n\nexport default function AccountBilling({ cards, addressBook, invoices }) {\n  const [open, setOpen] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewCardSchema = Yup.object().shape({\n    cardName: Yup.string().required('Name is required'),\n    cardNumber: Yup.string().required('Card number is required'),\n    cardExpired: Yup.string().required('Card expired is required'),\n    cardCvv: Yup.string().required('Cvv is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      cardName: '',\n      cardNumber: '',\n      cardExpired: '',\n      cardCvv: '',\n    },\n    validationSchema: NewCardSchema,\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      handleCancel();\n      resetForm();\n      setSubmitting(false);\n      enqueueSnackbar('Add card success', { variant: 'success' });\n    },\n  });\n\n  const handleOpenAddCard = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    formik.resetForm();\n  };\n\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Card sx={{ p: 3 }}>\n            <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\n              Your Plan\n            </Typography>\n            <Typography variant=\"h4\">Premium</Typography>\n            <Box\n              sx={{\n                mt: { xs: 2, sm: 0 },\n                position: { sm: 'absolute' },\n                top: { sm: 24 },\n                right: { sm: 24 },\n              }}\n            >\n              <Button size=\"small\" color=\"inherit\" variant=\"outlined\" sx={{ mr: 1 }}>\n                Cancel plan\n              </Button>\n              <Button size=\"small\" variant=\"outlined\">\n                Upgrade plan\n              </Button>\n            </Box>\n          </Card>\n\n          <AccountBillingPaymentMethod\n            cards={cards}\n            formik={formik}\n            isOpen={open}\n            onOpen={handleOpenAddCard}\n            onCancel={handleCancel}\n          />\n\n          <AccountBillingAddressBook addressBook={addressBook} />\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <AccountBillingInvoiceHistory invoices={invoices} />\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}