{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\pages\\\\overview\\\\mui\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Box, Checkbox, Container, TextField, Typography, Autocomplete } from '@mui/material';\nimport { Masonry } from '@mui/lab'; // routes\n\nimport { PATH_PAGE } from '../../../routes/paths';\nimport { top100Films, countries } from '../../../_mock'; // components\n\nimport Page from '../../../components/Page';\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs'; //\n\nimport { Block } from '../Block'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    paddingTop: theme.spacing(11),\n    paddingBottom: theme.spacing(15)\n  };\n}); // ----------------------------------------------------------------------\n\nconst options = ['Option 1', 'Option 2'];\n\nfunction countryToFlag(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined' ? isoCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397)) : isoCode;\n}\n\nexport default function AutocompleteComponent() {\n  _s();\n\n  const [value, setValue] = useState(options[0]);\n  const [inputValue, setInputValue] = useState('');\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Components: Autocomplete\",\n    children: /*#__PURE__*/_jsxDEV(RootStyle, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          pt: 6,\n          pb: 1,\n          mb: 10,\n          bgcolor: theme => theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n            heading: \"Autocomplete\",\n            links: [{\n              name: 'Components',\n              href: PATH_PAGE.components\n            }, {\n              name: 'Autocomplete'\n            }],\n            moreLink: \"https://mui.com/components/autocomplete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Masonry, {\n          columns: 3,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Block, {\n            title: \"Combo box\",\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              fullWidth: true,\n              options: top100Films,\n              getOptionLabel: option => option.title,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Combo box\",\n                margin: \"none\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \"Country Select\",\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                '& .MuiAutocomplete-option': {\n                  typography: 'body2',\n                  '& > span': {\n                    mr: 1,\n                    fontSize: 20\n                  }\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                fullWidth: true,\n                disablePortal: true,\n                autoHighlight: true,\n                options: countries,\n                getOptionLabel: option => option.label,\n                renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: countryToFlag(option.code)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 23\n                  }, this), option.label, \" (\", option.code, \") +\", option.phone]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this),\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  label: \"Choose a country\",\n                  inputProps: { ...params.inputProps,\n                    autoComplete: 'new-password'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \" Controllable states\",\n            sx: {\n              flexDirection: 'column'\n            },\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n                fullWidth: true,\n                value: value,\n                options: options,\n                onChange: (event, newValue) => {\n                  setValue(newValue);\n                },\n                inputValue: inputValue,\n                onInputChange: (event, newInputValue) => {\n                  setInputValue(newInputValue);\n                },\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  label: \"Controllable\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  mt: 2\n                },\n                children: `value: ${value !== null ? `'${value}'` : 'null'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: `inputValue: '${inputValue}'`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \"Free solo\",\n            children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n              fullWidth: true,\n              freeSolo: true,\n              options: top100Films.map(option => option.title),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"freeSolo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 42\n              }, this),\n              sx: {\n                mb: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              fullWidth: true,\n              freeSolo: true,\n              disableClearable: true,\n              options: top100Films.map(option => option.title),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Search input\",\n                InputProps: { ...params.InputProps,\n                  type: 'search'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \"Multiple Values\",\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              multiple: true,\n              fullWidth: true,\n              options: top100Films,\n              getOptionLabel: option => option.title,\n              defaultValue: [top100Films[13]],\n              filterSelectedOptions: true,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"filterSelectedOptions\",\n                placeholder: \"Favorites\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \"Checkboxes\",\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              fullWidth: true,\n              multiple: true,\n              options: top100Films,\n              disableCloseOnSelect: true,\n              getOptionLabel: option => option.title,\n              renderOption: (props, option, _ref2) => {\n                let {\n                  selected\n                } = _ref2;\n                return /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selected\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 21\n                  }, this), option.title]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 19\n                }, this);\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Checkboxes\",\n                placeholder: \"Favorites\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            title: \"Sizes\",\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n                fullWidth: true,\n                options: top100Films,\n                getOptionLabel: option => option.title,\n                defaultValue: top100Films[13],\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  label: \"Size Medium\",\n                  placeholder: \"Favorites\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n                fullWidth: true,\n                multiple: true,\n                size: \"small\",\n                options: top100Films,\n                getOptionLabel: option => option.title,\n                defaultValue: [top100Films[13]],\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  label: \"Size small\",\n                  placeholder: \"Favorites\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutocompleteComponent, \"pS+GIa0f4n/0SDHG8EibyuvGghw=\");\n\n_c = AutocompleteComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutocompleteComponent\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/overview/mui/Autocomplete.js"],"names":["useState","styled","Box","Checkbox","Container","TextField","Typography","Autocomplete","Masonry","PATH_PAGE","top100Films","countries","Page","HeaderBreadcrumbs","Block","RootStyle","theme","paddingTop","spacing","paddingBottom","options","countryToFlag","isoCode","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","AutocompleteComponent","value","setValue","inputValue","setInputValue","pt","pb","mb","bgcolor","palette","mode","name","href","components","option","title","params","width","typography","mr","fontSize","label","props","code","phone","inputProps","autoComplete","flexDirection","event","newValue","newInputValue","mt","map","InputProps","type","selected"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Checkbox, Container, TextField, Typography, Autocomplete } from '@mui/material';\nimport { Masonry } from '@mui/lab';\n// routes\nimport { PATH_PAGE } from '../../../routes/paths';\nimport { top100Films, countries } from '../../../_mock';\n// components\nimport Page from '../../../components/Page';\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs';\n//\nimport { Block } from '../Block';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  paddingTop: theme.spacing(11),\n  paddingBottom: theme.spacing(15),\n}));\n\n// ----------------------------------------------------------------------\n\nconst options = ['Option 1', 'Option 2'];\n\nfunction countryToFlag(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined'\n    ? isoCode.toUpperCase().replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n    : isoCode;\n}\n\nexport default function AutocompleteComponent() {\n  const [value, setValue] = useState(options[0]);\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <Page title=\"Components: Autocomplete\">\n      <RootStyle>\n        <Box\n          sx={{\n            pt: 6,\n            pb: 1,\n            mb: 10,\n            bgcolor: (theme) => (theme.palette.mode === 'light' ? 'grey.200' : 'grey.800'),\n          }}\n        >\n          <Container>\n            <HeaderBreadcrumbs\n              heading=\"Autocomplete\"\n              links={[{ name: 'Components', href: PATH_PAGE.components }, { name: 'Autocomplete' }]}\n              moreLink=\"https://mui.com/components/autocomplete\"\n            />\n          </Container>\n        </Box>\n\n        <Container>\n          <Masonry columns={3} spacing={3}>\n            <Block title=\"Combo box\">\n              <Autocomplete\n                fullWidth\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                renderInput={(params) => <TextField {...params} label=\"Combo box\" margin=\"none\" />}\n              />\n            </Block>\n\n            <Block title=\"Country Select\">\n              <Box\n                sx={{\n                  width: '100%',\n                  '& .MuiAutocomplete-option': {\n                    typography: 'body2',\n                    '& > span': { mr: 1, fontSize: 20 },\n                  },\n                }}\n              >\n                <Autocomplete\n                  fullWidth\n                  disablePortal\n                  autoHighlight\n                  options={countries}\n                  getOptionLabel={(option) => option.label}\n                  renderOption={(props, option) => (\n                    <li {...props}>\n                      <span>{countryToFlag(option.code)}</span>\n                      {option.label} ({option.code}) +{option.phone}\n                    </li>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Choose a country\"\n                      inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password',\n                      }}\n                    />\n                  )}\n                />\n              </Box>\n            </Block>\n\n            <Block title=\" Controllable states\" sx={{ flexDirection: 'column' }}>\n              <>\n                <Autocomplete\n                  fullWidth\n                  value={value}\n                  options={options}\n                  onChange={(event, newValue) => {\n                    setValue(newValue);\n                  }}\n                  inputValue={inputValue}\n                  onInputChange={(event, newInputValue) => {\n                    setInputValue(newInputValue);\n                  }}\n                  renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n                />\n                <Typography variant=\"body2\" sx={{ mt: 2 }}>{`value: ${\n                  value !== null ? `'${value}'` : 'null'\n                }`}</Typography>\n                <Typography variant=\"body2\">{`inputValue: '${inputValue}'`}</Typography>\n              </>\n            </Block>\n\n            <Block title=\"Free solo\">\n              <Autocomplete\n                fullWidth\n                freeSolo\n                options={top100Films.map((option) => option.title)}\n                renderInput={(params) => <TextField {...params} label=\"freeSolo\" />}\n                sx={{ mb: 2 }}\n              />\n              <Autocomplete\n                fullWidth\n                freeSolo\n                disableClearable\n                options={top100Films.map((option) => option.title)}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Search input\" InputProps={{ ...params.InputProps, type: 'search' }} />\n                )}\n              />\n            </Block>\n\n            <Block title=\"Multiple Values\">\n              <Autocomplete\n                multiple\n                fullWidth\n                options={top100Films}\n                getOptionLabel={(option) => option.title}\n                defaultValue={[top100Films[13]]}\n                filterSelectedOptions\n                renderInput={(params) => (\n                  <TextField {...params} label=\"filterSelectedOptions\" placeholder=\"Favorites\" />\n                )}\n              />\n            </Block>\n\n            <Block title=\"Checkboxes\">\n              <Autocomplete\n                fullWidth\n                multiple\n                options={top100Films}\n                disableCloseOnSelect\n                getOptionLabel={(option) => option.title}\n                renderOption={(props, option, { selected }) => (\n                  <li {...props}>\n                    <Checkbox checked={selected} />\n                    {option.title}\n                  </li>\n                )}\n                renderInput={(params) => <TextField {...params} label=\"Checkboxes\" placeholder=\"Favorites\" />}\n              />\n            </Block>\n\n            <Block title=\"Sizes\">\n              <>\n                <Autocomplete\n                  fullWidth\n                  options={top100Films}\n                  getOptionLabel={(option) => option.title}\n                  defaultValue={top100Films[13]}\n                  renderInput={(params) => <TextField {...params} label=\"Size Medium\" placeholder=\"Favorites\" />}\n                />\n                <br />\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  size=\"small\"\n                  options={top100Films}\n                  getOptionLabel={(option) => option.title}\n                  defaultValue={[top100Films[13]]}\n                  renderInput={(params) => <TextField {...params} label=\"Size small\" placeholder=\"Favorites\" />}\n                />\n              </>\n            </Block>\n          </Masonry>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}