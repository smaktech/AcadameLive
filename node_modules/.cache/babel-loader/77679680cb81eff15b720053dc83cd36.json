{"ast":null,"code":"import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{apiUrl}from'../../config';import{objToQueryString}from'../../config';//Fetch all Earnings data using offset and limit!\nfunction getAllEarnings(_x,_x2){return _getAllEarnings.apply(this,arguments);}//function for filter\nfunction _getAllEarnings(){_getAllEarnings=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(page,limit){var queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:queryString=objToQueryString({page:page,limit:limit});if(queryString==null)apiLink=apiUrl+'/earning/filterEarning';else apiLink=apiUrl+'/earning/filterEarning?'+queryString;_context.next=4;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 4:data=_context.sent;return _context.abrupt(\"return\",data);case 6:case\"end\":return _context.stop();}}},_callee);}));return _getAllEarnings.apply(this,arguments);}function getEarningsByFilter(_x3,_x4,_x5,_x6,_x7,_x8,_x9,_x10,_x11){return _getEarningsByFilter.apply(this,arguments);}//function for filter\nfunction _getEarningsByFilter(){_getEarningsByFilter=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(searchString,status,startDate,endDate,amountFrom,amountTo,page,limit,sortByDate){var queryString,apiLink,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:queryString=objToQueryString({searchString:searchString,status:status,startDate:startDate,endDate:endDate,amountFrom:amountFrom,amountTo:amountTo,page:page,limit:limit,sortByDate:sortByDate});if(queryString==null)apiLink=apiUrl+'/earning/filterEarning';else apiLink=apiUrl+'/earning/filterEarning?'+queryString;_context2.next=4;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 4:data=_context2.sent;return _context2.abrupt(\"return\",data);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return _getEarningsByFilter.apply(this,arguments);}function getEarningsByUserId(_x12){return _getEarningsByUserId.apply(this,arguments);}function _getEarningsByUserId(){_getEarningsByUserId=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId){var apiLink,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:apiLink=apiUrl+'/earning/getEarningByUserID/'+userId;_context3.next=3;return fetch(apiLink,{method:'GET',headers:{Accept:'application/json','Content-Type':'application/json'}}).then(function(res){return res.json();});case 3:data=_context3.sent;return _context3.abrupt(\"return\",data);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _getEarningsByUserId.apply(this,arguments);}export{getAllEarnings,getEarningsByFilter,getEarningsByUserId};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Earnings/Earnings.js"],"names":["apiUrl","objToQueryString","getAllEarnings","page","limit","queryString","apiLink","fetch","method","headers","Accept","then","res","json","data","getEarningsByFilter","searchString","status","startDate","endDate","amountFrom","amountTo","sortByDate","getEarningsByUserId","userId"],"mappings":"6TAAE,OAASA,MAAT,KAAuB,cAAvB,CACF,OAASC,gBAAT,KAAiC,cAAjC,CAEA;QACeC,CAAAA,c,uDAoBf;mGApBA,iBAA8BC,IAA9B,CAAoCC,KAApC,+IACUC,WADV,CACwBJ,gBAAgB,CAAC,CACjCE,IAAI,CAAEA,IAD2B,CAEjCC,KAAK,CAAEA,KAF0B,CAAD,CADxC,CAMI,GAAIC,WAAW,EAAI,IAAnB,CACIC,OAAO,CAAGN,MAAM,CAAG,wBAAnB,CADJ,IAGIM,CAAAA,OAAO,CAAGN,MAAM,CAAG,yBAAT,CAAqCK,WAA/C,CATR,sBAUuBE,CAAAA,KAAK,CAACD,OAAD,CAAU,CAC9BE,MAAM,CAAE,KADsB,CAE9BC,OAAO,CAAE,CACLC,MAAM,CAAE,kBADH,CAEL,eAAgB,kBAFX,CAFqB,CAAV,CAAL,CAMhBC,IANgB,CAMX,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EANW,CAVvB,QAUUC,IAVV,+CAiBWA,IAjBX,wD,yDAqBeC,CAAAA,mB,2FA2Bf;6GA3BA,kBAAmCC,YAAnC,CAAiDC,MAAjD,CAAyDC,SAAzD,CAAoEC,OAApE,CAA4EC,UAA5E,CAAuFC,QAAvF,CAAiGlB,IAAjG,CAAuGC,KAAvG,CAA8GkB,UAA9G,mJACUjB,WADV,CACwBJ,gBAAgB,CAAC,CACjCe,YAAY,CAAEA,YADmB,CAEjCC,MAAM,CAAEA,MAFyB,CAGjCC,SAAS,CAAEA,SAHsB,CAIjCC,OAAO,CAAEA,OAJwB,CAKjCC,UAAU,CAAEA,UALqB,CAMjCC,QAAQ,CAAEA,QANuB,CAOjClB,IAAI,CAAEA,IAP2B,CAQjCC,KAAK,CAAEA,KAR0B,CASjCkB,UAAU,CAAEA,UATqB,CAAD,CADxC,CAaI,GAAIjB,WAAW,EAAI,IAAnB,CACIC,OAAO,CAAGN,MAAM,CAAG,wBAAnB,CADJ,IAGIM,CAAAA,OAAO,CAAGN,MAAM,CAAG,yBAAT,CAAqCK,WAA/C,CAhBR,uBAiBuBE,CAAAA,KAAK,CAACD,OAAD,CAAU,CAC9BE,MAAM,CAAE,KADsB,CAE9BC,OAAO,CAAE,CACLC,MAAM,CAAE,kBADH,CAEL,eAAgB,kBAFX,CAFqB,CAAV,CAAL,CAMhBC,IANgB,CAMX,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EANW,CAjBvB,QAiBUC,IAjBV,iDAwBWA,IAxBX,0D,8DA4BeS,CAAAA,mB,uKAAf,kBAAmCC,MAAnC,uIAIQlB,OAAO,CAAGN,MAAM,CAAG,8BAAT,CAAwCwB,MAAlD,CAJR,uBAKuBjB,CAAAA,KAAK,CAACD,OAAD,CAAU,CAC9BE,MAAM,CAAE,KADsB,CAE9BC,OAAO,CAAE,CACLC,MAAM,CAAE,kBADH,CAEL,eAAgB,kBAFX,CAFqB,CAAV,CAAL,CAMhBC,IANgB,CAMX,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EANW,CALvB,QAKUC,IALV,iDAYWA,IAZX,0D,sDAgBA,OAASZ,cAAT,CAAyBa,mBAAzB,CAA6CQ,mBAA7C","sourcesContent":["  import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all Earnings data using offset and limit!\nasync function getAllEarnings(page, limit) {\n    const queryString = objToQueryString({\n        page: page,\n        limit: limit,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/earning/filterEarning'\n    else\n        apiLink = apiUrl + '/earning/filterEarning?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//function for filter\nasync function getEarningsByFilter(searchString, status, startDate, endDate,amountFrom,amountTo, page, limit, sortByDate) {\n    const queryString = objToQueryString({\n        searchString: searchString,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        amountFrom: amountFrom,\n        amountTo: amountTo,\n        page: page,\n        limit: limit,\n        sortByDate: sortByDate,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/earning/filterEarning'\n    else\n        apiLink = apiUrl + '/earning/filterEarning?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//function for filter\nasync function getEarningsByUserId(userId) {\n   \n    var apiLink;\n   \n        apiLink = apiUrl + '/earning/getEarningByUserID/'+userId\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\nexport { getAllEarnings, getEarningsByFilter,getEarningsByUserId }"]},"metadata":{},"sourceType":"module"}