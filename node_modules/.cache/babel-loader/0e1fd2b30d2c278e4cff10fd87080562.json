{"ast":null,"code":"/*\nLanguage: Coq\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\nCategory: functional\nWebsite: https://coq.inria.fr\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  const KEYWORDS = [\"_|0\", \"as\", \"at\", \"cofix\", \"else\", \"end\", \"exists\", \"exists2\", \"fix\", \"for\", \"forall\", \"fun\", \"if\", \"IF\", \"in\", \"let\", \"match\", \"mod\", \"Prop\", \"return\", \"Set\", \"then\", \"Type\", \"using\", \"where\", \"with\", \"Abort\", \"About\", \"Add\", \"Admit\", \"Admitted\", \"All\", \"Arguments\", \"Assumptions\", \"Axiom\", \"Back\", \"BackTo\", \"Backtrack\", \"Bind\", \"Blacklist\", \"Canonical\", \"Cd\", \"Check\", \"Class\", \"Classes\", \"Close\", \"Coercion\", \"Coercions\", \"CoFixpoint\", \"CoInductive\", \"Collection\", \"Combined\", \"Compute\", \"Conjecture\", \"Conjectures\", \"Constant\", \"constr\", \"Constraint\", \"Constructors\", \"Context\", \"Corollary\", \"CreateHintDb\", \"Cut\", \"Declare\", \"Defined\", \"Definition\", \"Delimit\", \"Dependencies\", \"Dependent\", \"Derive\", \"Drop\", \"eauto\", \"End\", \"Equality\", \"Eval\", \"Example\", \"Existential\", \"Existentials\", \"Existing\", \"Export\", \"exporting\", \"Extern\", \"Extract\", \"Extraction\", \"Fact\", \"Field\", \"Fields\", \"File\", \"Fixpoint\", \"Focus\", \"for\", \"From\", \"Function\", \"Functional\", \"Generalizable\", \"Global\", \"Goal\", \"Grab\", \"Grammar\", \"Graph\", \"Guarded\", \"Heap\", \"Hint\", \"HintDb\", \"Hints\", \"Hypotheses\", \"Hypothesis\", \"ident\", \"Identity\", \"If\", \"Immediate\", \"Implicit\", \"Import\", \"Include\", \"Inductive\", \"Infix\", \"Info\", \"Initial\", \"Inline\", \"Inspect\", \"Instance\", \"Instances\", \"Intro\", \"Intros\", \"Inversion\", \"Inversion_clear\", \"Language\", \"Left\", \"Lemma\", \"Let\", \"Libraries\", \"Library\", \"Load\", \"LoadPath\", \"Local\", \"Locate\", \"Ltac\", \"ML\", \"Mode\", \"Module\", \"Modules\", \"Monomorphic\", \"Morphism\", \"Next\", \"NoInline\", \"Notation\", \"Obligation\", \"Obligations\", \"Opaque\", \"Open\", \"Optimize\", \"Options\", \"Parameter\", \"Parameters\", \"Parametric\", \"Path\", \"Paths\", \"pattern\", \"Polymorphic\", \"Preterm\", \"Print\", \"Printing\", \"Program\", \"Projections\", \"Proof\", \"Proposition\", \"Pwd\", \"Qed\", \"Quit\", \"Rec\", \"Record\", \"Recursive\", \"Redirect\", \"Relation\", \"Remark\", \"Remove\", \"Require\", \"Reserved\", \"Reset\", \"Resolve\", \"Restart\", \"Rewrite\", \"Right\", \"Ring\", \"Rings\", \"Save\", \"Scheme\", \"Scope\", \"Scopes\", \"Script\", \"Search\", \"SearchAbout\", \"SearchHead\", \"SearchPattern\", \"SearchRewrite\", \"Section\", \"Separate\", \"Set\", \"Setoid\", \"Show\", \"Solve\", \"Sorted\", \"Step\", \"Strategies\", \"Strategy\", \"Structure\", \"SubClass\", \"Table\", \"Tables\", \"Tactic\", \"Term\", \"Test\", \"Theorem\", \"Time\", \"Timeout\", \"Transparent\", \"Type\", \"Typeclasses\", \"Types\", \"Undelimit\", \"Undo\", \"Unfocus\", \"Unfocused\", \"Unfold\", \"Universe\", \"Universes\", \"Unset\", \"Unshelve\", \"using\", \"Variable\", \"Variables\", \"Variant\", \"Verbose\", \"Visibility\", \"where\", \"with\"];\n  const BUILT_INS = [\"abstract\", \"absurd\", \"admit\", \"after\", \"apply\", \"as\", \"assert\", \"assumption\", \"at\", \"auto\", \"autorewrite\", \"autounfold\", \"before\", \"bottom\", \"btauto\", \"by\", \"case\", \"case_eq\", \"cbn\", \"cbv\", \"change\", \"classical_left\", \"classical_right\", \"clear\", \"clearbody\", \"cofix\", \"compare\", \"compute\", \"congruence\", \"constr_eq\", \"constructor\", \"contradict\", \"contradiction\", \"cut\", \"cutrewrite\", \"cycle\", \"decide\", \"decompose\", \"dependent\", \"destruct\", \"destruction\", \"dintuition\", \"discriminate\", \"discrR\", \"do\", \"double\", \"dtauto\", \"eapply\", \"eassumption\", \"eauto\", \"ecase\", \"econstructor\", \"edestruct\", \"ediscriminate\", \"eelim\", \"eexact\", \"eexists\", \"einduction\", \"einjection\", \"eleft\", \"elim\", \"elimtype\", \"enough\", \"equality\", \"erewrite\", \"eright\", \"esimplify_eq\", \"esplit\", \"evar\", \"exact\", \"exactly_once\", \"exfalso\", \"exists\", \"f_equal\", \"fail\", \"field\", \"field_simplify\", \"field_simplify_eq\", \"first\", \"firstorder\", \"fix\", \"fold\", \"fourier\", \"functional\", \"generalize\", \"generalizing\", \"gfail\", \"give_up\", \"has_evar\", \"hnf\", \"idtac\", \"in\", \"induction\", \"injection\", \"instantiate\", \"intro\", \"intro_pattern\", \"intros\", \"intuition\", \"inversion\", \"inversion_clear\", \"is_evar\", \"is_var\", \"lapply\", \"lazy\", \"left\", \"lia\", \"lra\", \"move\", \"native_compute\", \"nia\", \"nsatz\", \"omega\", \"once\", \"pattern\", \"pose\", \"progress\", \"proof\", \"psatz\", \"quote\", \"record\", \"red\", \"refine\", \"reflexivity\", \"remember\", \"rename\", \"repeat\", \"replace\", \"revert\", \"revgoals\", \"rewrite\", \"rewrite_strat\", \"right\", \"ring\", \"ring_simplify\", \"rtauto\", \"set\", \"setoid_reflexivity\", \"setoid_replace\", \"setoid_rewrite\", \"setoid_symmetry\", \"setoid_transitivity\", \"shelve\", \"shelve_unifiable\", \"simpl\", \"simple\", \"simplify_eq\", \"solve\", \"specialize\", \"split\", \"split_Rabs\", \"split_Rmult\", \"stepl\", \"stepr\", \"subst\", \"sum\", \"swap\", \"symmetry\", \"tactic\", \"tauto\", \"time\", \"timeout\", \"top\", \"transitivity\", \"trivial\", \"try\", \"tryif\", \"unfold\", \"unify\", \"until\", \"using\", \"vm_compute\", \"with\"];\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS\n    },\n    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'), hljs.C_NUMBER_MODE, {\n      className: 'type',\n      excludeBegin: true,\n      begin: '\\\\|\\\\s*',\n      end: '\\\\w+'\n    }, {\n      // relevance booster\n      begin: /[-=]>/\n    }]\n  };\n}\n\nmodule.exports = coq;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/highlight.js/lib/languages/coq.js"],"names":["coq","hljs","KEYWORDS","BUILT_INS","name","keywords","keyword","built_in","contains","QUOTE_STRING_MODE","COMMENT","C_NUMBER_MODE","className","excludeBegin","begin","end","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Coq\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\nCategory: functional\nWebsite: https://coq.inria.fr\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  const KEYWORDS = [\n    \"_|0\",\n    \"as\",\n    \"at\",\n    \"cofix\",\n    \"else\",\n    \"end\",\n    \"exists\",\n    \"exists2\",\n    \"fix\",\n    \"for\",\n    \"forall\",\n    \"fun\",\n    \"if\",\n    \"IF\",\n    \"in\",\n    \"let\",\n    \"match\",\n    \"mod\",\n    \"Prop\",\n    \"return\",\n    \"Set\",\n    \"then\",\n    \"Type\",\n    \"using\",\n    \"where\",\n    \"with\",\n    \"Abort\",\n    \"About\",\n    \"Add\",\n    \"Admit\",\n    \"Admitted\",\n    \"All\",\n    \"Arguments\",\n    \"Assumptions\",\n    \"Axiom\",\n    \"Back\",\n    \"BackTo\",\n    \"Backtrack\",\n    \"Bind\",\n    \"Blacklist\",\n    \"Canonical\",\n    \"Cd\",\n    \"Check\",\n    \"Class\",\n    \"Classes\",\n    \"Close\",\n    \"Coercion\",\n    \"Coercions\",\n    \"CoFixpoint\",\n    \"CoInductive\",\n    \"Collection\",\n    \"Combined\",\n    \"Compute\",\n    \"Conjecture\",\n    \"Conjectures\",\n    \"Constant\",\n    \"constr\",\n    \"Constraint\",\n    \"Constructors\",\n    \"Context\",\n    \"Corollary\",\n    \"CreateHintDb\",\n    \"Cut\",\n    \"Declare\",\n    \"Defined\",\n    \"Definition\",\n    \"Delimit\",\n    \"Dependencies\",\n    \"Dependent\",\n    \"Derive\",\n    \"Drop\",\n    \"eauto\",\n    \"End\",\n    \"Equality\",\n    \"Eval\",\n    \"Example\",\n    \"Existential\",\n    \"Existentials\",\n    \"Existing\",\n    \"Export\",\n    \"exporting\",\n    \"Extern\",\n    \"Extract\",\n    \"Extraction\",\n    \"Fact\",\n    \"Field\",\n    \"Fields\",\n    \"File\",\n    \"Fixpoint\",\n    \"Focus\",\n    \"for\",\n    \"From\",\n    \"Function\",\n    \"Functional\",\n    \"Generalizable\",\n    \"Global\",\n    \"Goal\",\n    \"Grab\",\n    \"Grammar\",\n    \"Graph\",\n    \"Guarded\",\n    \"Heap\",\n    \"Hint\",\n    \"HintDb\",\n    \"Hints\",\n    \"Hypotheses\",\n    \"Hypothesis\",\n    \"ident\",\n    \"Identity\",\n    \"If\",\n    \"Immediate\",\n    \"Implicit\",\n    \"Import\",\n    \"Include\",\n    \"Inductive\",\n    \"Infix\",\n    \"Info\",\n    \"Initial\",\n    \"Inline\",\n    \"Inspect\",\n    \"Instance\",\n    \"Instances\",\n    \"Intro\",\n    \"Intros\",\n    \"Inversion\",\n    \"Inversion_clear\",\n    \"Language\",\n    \"Left\",\n    \"Lemma\",\n    \"Let\",\n    \"Libraries\",\n    \"Library\",\n    \"Load\",\n    \"LoadPath\",\n    \"Local\",\n    \"Locate\",\n    \"Ltac\",\n    \"ML\",\n    \"Mode\",\n    \"Module\",\n    \"Modules\",\n    \"Monomorphic\",\n    \"Morphism\",\n    \"Next\",\n    \"NoInline\",\n    \"Notation\",\n    \"Obligation\",\n    \"Obligations\",\n    \"Opaque\",\n    \"Open\",\n    \"Optimize\",\n    \"Options\",\n    \"Parameter\",\n    \"Parameters\",\n    \"Parametric\",\n    \"Path\",\n    \"Paths\",\n    \"pattern\",\n    \"Polymorphic\",\n    \"Preterm\",\n    \"Print\",\n    \"Printing\",\n    \"Program\",\n    \"Projections\",\n    \"Proof\",\n    \"Proposition\",\n    \"Pwd\",\n    \"Qed\",\n    \"Quit\",\n    \"Rec\",\n    \"Record\",\n    \"Recursive\",\n    \"Redirect\",\n    \"Relation\",\n    \"Remark\",\n    \"Remove\",\n    \"Require\",\n    \"Reserved\",\n    \"Reset\",\n    \"Resolve\",\n    \"Restart\",\n    \"Rewrite\",\n    \"Right\",\n    \"Ring\",\n    \"Rings\",\n    \"Save\",\n    \"Scheme\",\n    \"Scope\",\n    \"Scopes\",\n    \"Script\",\n    \"Search\",\n    \"SearchAbout\",\n    \"SearchHead\",\n    \"SearchPattern\",\n    \"SearchRewrite\",\n    \"Section\",\n    \"Separate\",\n    \"Set\",\n    \"Setoid\",\n    \"Show\",\n    \"Solve\",\n    \"Sorted\",\n    \"Step\",\n    \"Strategies\",\n    \"Strategy\",\n    \"Structure\",\n    \"SubClass\",\n    \"Table\",\n    \"Tables\",\n    \"Tactic\",\n    \"Term\",\n    \"Test\",\n    \"Theorem\",\n    \"Time\",\n    \"Timeout\",\n    \"Transparent\",\n    \"Type\",\n    \"Typeclasses\",\n    \"Types\",\n    \"Undelimit\",\n    \"Undo\",\n    \"Unfocus\",\n    \"Unfocused\",\n    \"Unfold\",\n    \"Universe\",\n    \"Universes\",\n    \"Unset\",\n    \"Unshelve\",\n    \"using\",\n    \"Variable\",\n    \"Variables\",\n    \"Variant\",\n    \"Verbose\",\n    \"Visibility\",\n    \"where\",\n    \"with\"\n  ];\n  const BUILT_INS = [\n    \"abstract\",\n    \"absurd\",\n    \"admit\",\n    \"after\",\n    \"apply\",\n    \"as\",\n    \"assert\",\n    \"assumption\",\n    \"at\",\n    \"auto\",\n    \"autorewrite\",\n    \"autounfold\",\n    \"before\",\n    \"bottom\",\n    \"btauto\",\n    \"by\",\n    \"case\",\n    \"case_eq\",\n    \"cbn\",\n    \"cbv\",\n    \"change\",\n    \"classical_left\",\n    \"classical_right\",\n    \"clear\",\n    \"clearbody\",\n    \"cofix\",\n    \"compare\",\n    \"compute\",\n    \"congruence\",\n    \"constr_eq\",\n    \"constructor\",\n    \"contradict\",\n    \"contradiction\",\n    \"cut\",\n    \"cutrewrite\",\n    \"cycle\",\n    \"decide\",\n    \"decompose\",\n    \"dependent\",\n    \"destruct\",\n    \"destruction\",\n    \"dintuition\",\n    \"discriminate\",\n    \"discrR\",\n    \"do\",\n    \"double\",\n    \"dtauto\",\n    \"eapply\",\n    \"eassumption\",\n    \"eauto\",\n    \"ecase\",\n    \"econstructor\",\n    \"edestruct\",\n    \"ediscriminate\",\n    \"eelim\",\n    \"eexact\",\n    \"eexists\",\n    \"einduction\",\n    \"einjection\",\n    \"eleft\",\n    \"elim\",\n    \"elimtype\",\n    \"enough\",\n    \"equality\",\n    \"erewrite\",\n    \"eright\",\n    \"esimplify_eq\",\n    \"esplit\",\n    \"evar\",\n    \"exact\",\n    \"exactly_once\",\n    \"exfalso\",\n    \"exists\",\n    \"f_equal\",\n    \"fail\",\n    \"field\",\n    \"field_simplify\",\n    \"field_simplify_eq\",\n    \"first\",\n    \"firstorder\",\n    \"fix\",\n    \"fold\",\n    \"fourier\",\n    \"functional\",\n    \"generalize\",\n    \"generalizing\",\n    \"gfail\",\n    \"give_up\",\n    \"has_evar\",\n    \"hnf\",\n    \"idtac\",\n    \"in\",\n    \"induction\",\n    \"injection\",\n    \"instantiate\",\n    \"intro\",\n    \"intro_pattern\",\n    \"intros\",\n    \"intuition\",\n    \"inversion\",\n    \"inversion_clear\",\n    \"is_evar\",\n    \"is_var\",\n    \"lapply\",\n    \"lazy\",\n    \"left\",\n    \"lia\",\n    \"lra\",\n    \"move\",\n    \"native_compute\",\n    \"nia\",\n    \"nsatz\",\n    \"omega\",\n    \"once\",\n    \"pattern\",\n    \"pose\",\n    \"progress\",\n    \"proof\",\n    \"psatz\",\n    \"quote\",\n    \"record\",\n    \"red\",\n    \"refine\",\n    \"reflexivity\",\n    \"remember\",\n    \"rename\",\n    \"repeat\",\n    \"replace\",\n    \"revert\",\n    \"revgoals\",\n    \"rewrite\",\n    \"rewrite_strat\",\n    \"right\",\n    \"ring\",\n    \"ring_simplify\",\n    \"rtauto\",\n    \"set\",\n    \"setoid_reflexivity\",\n    \"setoid_replace\",\n    \"setoid_rewrite\",\n    \"setoid_symmetry\",\n    \"setoid_transitivity\",\n    \"shelve\",\n    \"shelve_unifiable\",\n    \"simpl\",\n    \"simple\",\n    \"simplify_eq\",\n    \"solve\",\n    \"specialize\",\n    \"split\",\n    \"split_Rabs\",\n    \"split_Rmult\",\n    \"stepl\",\n    \"stepr\",\n    \"subst\",\n    \"sum\",\n    \"swap\",\n    \"symmetry\",\n    \"tactic\",\n    \"tauto\",\n    \"time\",\n    \"timeout\",\n    \"top\",\n    \"transitivity\",\n    \"trivial\",\n    \"try\",\n    \"tryif\",\n    \"unfold\",\n    \"unify\",\n    \"until\",\n    \"using\",\n    \"vm_compute\",\n    \"with\"\n  ];\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'type',\n        excludeBegin: true,\n        begin: '\\\\|\\\\s*',\n        end: '\\\\w+'\n      },\n      { // relevance booster\n        begin: /[-=]>/\n      }\n    ]\n  };\n}\n\nmodule.exports = coq;\n"]},"metadata":{},"sourceType":"script"}