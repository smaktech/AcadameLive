{"ast":null,"code":"import { apiUrl } from '../../config';\n\nasync function RestLogin(credentials) {\n  const data = await fetch(apiUrl + '/auth/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  }).then(res => res.json());\n  return data;\n}\n\n_c = RestLogin;\n\nasync function ForgotPassword(credentials) {\n  const data = await fetch(apiUrl + '/auth/updatePassword', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  }).then(res => res.json());\n  return data;\n} //for verifying accessToken of user \n\n\n_c2 = ForgotPassword;\n\nasync function decryptJWT(accessToken) {\n  const data = await fetch(apiUrl + '/auth/decryptJWT', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      accessToken\n    })\n  }).then(res => res.json());\n  return data;\n} //sends otp for reseting passwords\n\n\nasync function sendOTP(email) {\n  var details = {\n    \"email\": email\n  };\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/auth/sendOTP', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  return data;\n} //function for reseting passwords using token\n\n\nasync function changePassword(userID, token, newPassword) {\n  var details = {\n    \"newPassword\": newPassword\n  };\n  var formBody = [];\n\n  for (var property in details) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  const data = await fetch(apiUrl + '/auth/password-reset/' + userID + \"/\" + token, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: formBody\n  }).then(res => res.json());\n  return data;\n}\n\nexport { RestLogin, decryptJWT, ForgotPassword, sendOTP, changePassword };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RestLogin\");\n$RefreshReg$(_c2, \"ForgotPassword\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Auth/Auth.js"],"names":["apiUrl","RestLogin","credentials","data","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","ForgotPassword","decryptJWT","accessToken","sendOTP","email","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","changePassword","userID","token","newPassword"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;;AAEA,eAAeC,SAAf,CAAyBC,WAAzB,EAAsC;AACpC,QAAMC,IAAI,GAAG,MAAMC,KAAK,CAACJ,MAAM,GAAG,aAAV,EAAyB;AAC/CK,IAAAA,MAAM,EAAE,MADuC;AAE/CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFsC;AAM/CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,WAAf;AANyC,GAAzB,CAAL,CAOhBS,IAPgB,CAOVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPE,CAAnB;AAQA,SAAOV,IAAP;AAED;;KAXcF,S;;AAaf,eAAea,cAAf,CAA8BZ,WAA9B,EAA2C;AACzC,QAAMC,IAAI,GAAG,MAAMC,KAAK,CAACJ,MAAM,GAAG,sBAAV,EAAkC;AACxDK,IAAAA,MAAM,EAAE,MADgD;AAExDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF+C;AAMxDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,WAAf;AANkD,GAAlC,CAAL,CAOhBS,IAPgB,CAOVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPE,CAAnB;AAQA,SAAOV,IAAP;AAED,C,CACD;;;MAZeW,c;;AAaf,eAAeC,UAAf,CAA0BC,WAA1B,EAAuC;AACrC,QAAMb,IAAI,GAAG,MAAMC,KAAK,CAACJ,MAAM,GAAG,kBAAV,EAA8B;AACpDK,IAAAA,MAAM,EAAE,MAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF2C;AAMpDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACM,MAAAA;AAAD,KAAf;AAN8C,GAA9B,CAAL,CAOhBL,IAPgB,CAOVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPE,CAAnB;AAQA,SAAOV,IAAP;AACD,C,CAED;;;AACA,eAAec,OAAf,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,OAAO,GAAG;AACV,aAAQD;AADE,GAAd;AAIE,MAAIE,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEF,QAAMvB,IAAI,GAAG,MAAMC,KAAK,CAACJ,MAAM,GAAG,eAAV,EAA2B;AACjDK,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFwC;AAMjDC,IAAAA,IAAI,EAAEY;AAN2C,GAA3B,CAAL,CAOhBT,IAPgB,CAOVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPE,CAAnB;AAQA,SAAOV,IAAP;AAED,C,CAED;;;AACA,eAAewB,cAAf,CAA8BC,MAA9B,EAAsCC,KAAtC,EAA6CC,WAA7C,EAA0D;AACxD,MAAIX,OAAO,GAAG;AACV,mBAAcW;AADJ,GAAd;AAIE,MAAIV,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEF,QAAMvB,IAAI,GAAI,MAAMC,KAAK,CAACJ,MAAM,GAAG,uBAAT,GAAiC4B,MAAjC,GAAwC,GAAxC,GAA4CC,KAA7C,EAAoD;AAC3ExB,IAAAA,MAAM,EAAE,MADmE;AAE3EC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFkE;AAM3EC,IAAAA,IAAI,EAAEY;AANqE,GAApD,CAAL,CAOjBT,IAPiB,CAOXC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPG,CAApB;AAQA,SAAOV,IAAP;AAED;;AAGD,SAASF,SAAT,EAAmBc,UAAnB,EAA+BD,cAA/B,EAA8CG,OAA9C,EAAsDU,cAAtD","sourcesContent":["import { apiUrl } from '../../config';\n\nasync function RestLogin(credentials) {\n  const data = await fetch(apiUrl + '/auth/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  }).then((res) => res.json());\n  return data;\n  \n}\n\nasync function ForgotPassword(credentials) {\n  const data = await fetch(apiUrl + '/auth/updatePassword', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  }).then((res) => res.json());\n  return data;\n  \n}\n//for verifying accessToken of user \nasync function decryptJWT(accessToken) {\n  const data = await fetch(apiUrl + '/auth/decryptJWT', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({accessToken}),\n  }).then((res) => res.json());\n  return data; \n}\n\n//sends otp for reseting passwords\nasync function sendOTP(email) {\n  var details = {\n      \"email\":email\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n\n  const data = await fetch(apiUrl + '/auth/sendOTP', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formBody,\n  }).then((res) => res.json());\n  return data;\n  \n}\n\n//function for reseting passwords using token\nasync function changePassword(userID, token, newPassword) {\n  var details = {\n      \"newPassword\":newPassword\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n\n  const data =  await fetch(apiUrl + '/auth/password-reset/'+userID+\"/\"+token, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formBody,\n  }).then((res) => res.json());\n  return data;\n  \n}\n\n\nexport { RestLogin,decryptJWT, ForgotPassword,sendOTP,changePassword};"]},"metadata":{},"sourceType":"module"}