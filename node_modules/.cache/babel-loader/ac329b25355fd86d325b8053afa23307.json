{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\pages\\\\users\\\\UserPaymentRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport { Avatar, Button } from '@mui/material';\nimport ToggleOnIcon from '@mui/icons-material/ToggleOn';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ToggleOffIcon from '@mui/icons-material/ToggleOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Link, useNavigate, Redirect } from 'react-router-dom';\nimport { baseUrl } from 'src/config';\nimport CancelSubscription from './CancelSubscription';\nimport { refundSubscription } from 'src/api/Subscription/Subscription';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserPaymentRow(_ref) {\n  _s();\n\n  let {\n    item,\n    index\n  } = _ref;\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const navigate = useNavigate(); //returns the created date of the record of the table\n\n  function renderDate(date) {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const newDate = new Date(date);\n    const returnDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ' ' + newDate.getFullYear();\n    return returnDate;\n  }\n\n  const [cancellationStatus, setCancellationStatus] = useState(item.cancellationStatus);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [refundLoader, setRefundLoader] = useState(false);\n\n  const refundSubscriptionHandler = async () => {\n    if (!refundLoader) {\n      setRefundLoader(true);\n      const response = await refundSubscription(item.userID._id, item.transactionID);\n\n      if (response.status) {\n        setCancellationStatus(\"refunded\");\n        setModalVisible(false);\n        enqueueSnackbar('Success', {\n          variant: 'success'\n        });\n      }\n\n      setRefundLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    setCancellationStatus(item.cancellationStatus);\n  }, [item]);\n  console.log(item.cancellationMessage, \" item\");\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    sx: {\n      '&:last-child td, &:last-child th': {\n        border: 0\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n      children: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: item.transactionID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: renderDate(item.transactionDate)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: item.status ? 'Completed' : 'Cancelled'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: item.amount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: cancellationStatus == \"canceled\" ? \"Cancelled\" : cancellationStatus == \"refunded\" ? \"Refunded\" : \"N.A.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: item.cancellationDate ? renderDate(item.cancellationDate) : \"N.A.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: item.cancellationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: cancellationStatus == \"canceled\" ? refundLoader ? /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        className: \" px-5\",\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => refundSubscriptionHandler(),\n        children: \" Mark Refunded \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this) : cancellationStatus != \"refunded\" ? /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => setModalVisible(true),\n        children: \" Cancel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), modalVisible && /*#__PURE__*/_jsxDEV(CancelSubscription, {\n      modalVisible: modalVisible,\n      setModalVisible: setModalVisible,\n      userId: item.userID._id,\n      sessionId: item.transactionID,\n      updateStatusInParent: setCancellationStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 27\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserPaymentRow, \"KD6WNiu78Llnys/QT49HOfKWxjo=\", false, function () {\n  return [useSnackbar, useNavigate];\n});\n\n_c = UserPaymentRow;\nexport default UserPaymentRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPaymentRow\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/users/UserPaymentRow.js"],"names":["React","useState","useEffect","TableRow","TableCell","Avatar","Button","ToggleOnIcon","EditIcon","ToggleOffIcon","DeleteIcon","CircularProgress","Link","useNavigate","Redirect","baseUrl","CancelSubscription","refundSubscription","useSnackbar","UserPaymentRow","item","index","enqueueSnackbar","navigate","renderDate","date","months","newDate","Date","returnDate","getMonth","getDate","getFullYear","cancellationStatus","setCancellationStatus","modalVisible","setModalVisible","refundLoader","setRefundLoader","refundSubscriptionHandler","response","userID","_id","transactionID","status","variant","console","log","cancellationMessage","border","transactionDate","amount","cancellationDate"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\n\nimport TableRow from '@mui/material/TableRow';\n\nimport TableCell from '@mui/material/TableCell';\nimport { Avatar, Button } from '@mui/material';\nimport ToggleOnIcon from '@mui/icons-material/ToggleOn';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ToggleOffIcon from '@mui/icons-material/ToggleOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { Link, useNavigate, Redirect } from 'react-router-dom'\nimport { baseUrl } from 'src/config';\nimport CancelSubscription from './CancelSubscription';\nimport { refundSubscription } from 'src/api/Subscription/Subscription';\nimport { useSnackbar } from 'notistack';\nfunction UserPaymentRow({ item, index }) {\n     \n    const { enqueueSnackbar } = useSnackbar();\n    const navigate = useNavigate()\n    //returns the created date of the record of the table\n    function renderDate(date) {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const newDate = new Date(date);\n        const returnDate = months[newDate.getMonth()] + ' ' + newDate.getDate() + ' ' + newDate.getFullYear();\n        return returnDate;\n    }\n\n    const [cancellationStatus,setCancellationStatus] = useState(item.cancellationStatus)\n    const [modalVisible, setModalVisible] = useState(false)\n    const [refundLoader,setRefundLoader] = useState(false)\n\n\n\n    const refundSubscriptionHandler=async ()=>\n    {\n            \n                if(!refundLoader)\n                {\n                    setRefundLoader(true)\n                    const response = await refundSubscription(item.userID._id,item.transactionID)\n                    if(response.status)\n                    {\n                        setCancellationStatus(\"refunded\")\n                        setModalVisible(false)\n                        enqueueSnackbar('Success', { variant: 'success' });\n                    }\n                    setRefundLoader(false)\n                }\n                \n            \n    }\n    useEffect(() => {\n        setCancellationStatus(item.cancellationStatus)\n    },[item])\n    console.log(item.cancellationMessage,\" item\")\n    return (\n        <TableRow\n            key={index}\n            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n        >\n            <TableCell>\n                {index + 1}\n            </TableCell>\n            <TableCell>\n                 {item.transactionID}\n            </TableCell>\n            <TableCell>\n                    {renderDate(item.transactionDate)}\n            </TableCell>\n            <TableCell>{item.status?('Completed') : ('Cancelled')}</TableCell>\n            <TableCell>{item.amount}</TableCell> \n            <TableCell>\n                 {cancellationStatus==\"canceled\"?(\"Cancelled\"):cancellationStatus==\"refunded\"?(\"Refunded\"):(\"N.A.\")}\n            </TableCell>\n            <TableCell>\n                {item.cancellationDate?renderDate(item.cancellationDate):(\"N.A.\")}\n            </TableCell> \n            <TableCell>\n                {item.cancellationMessage}\n            </TableCell> \n            <TableCell>\n                {cancellationStatus==\"canceled\"?(\n                     refundLoader ? (\n                        <Button variant=\"outlined\" className=\" px-5\" >\n\n                            <CircularProgress size={20} />\n                        </Button>\n                    ) :(\n                        <Button  variant=\"contained\" onClick={()=>refundSubscriptionHandler()}> Mark Refunded </Button>\n                    )\n                ):(\n                    cancellationStatus!=\"refunded\"?(\n                        <Button  variant=\"contained\" onClick={()=>setModalVisible(true)}> Cancel </Button>  \n                    ):(null)\n                    \n                )}\n                \n            </TableCell> \n             \n                                \n           {modalVisible&&<CancelSubscription\n                modalVisible={modalVisible}\n                setModalVisible={setModalVisible}\n                userId={item.userID._id}\n                sessionId={item.transactionID}\n                updateStatusInParent ={setCancellationStatus}\n            />}\n        </TableRow>\n    )\n}\n\nexport default UserPaymentRow\n"]},"metadata":{},"sourceType":"module"}