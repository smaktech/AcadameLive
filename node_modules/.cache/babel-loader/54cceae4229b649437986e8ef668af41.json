{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\user\\\\UserNewForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // @mui\n\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@mui/material'; // utils\n\nimport { fData } from '../../../utils/formatNumber'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // _mock\n\nimport { countries } from '../../../_mock'; // components\n\nimport Label from '../../../components/Label';\nimport { UploadAvatar } from '../../../components/upload'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nUserNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentUser: PropTypes.object\n};\nexport default function UserNewForm(_ref) {\n  _s();\n\n  let {\n    isEdit,\n    currentUser\n  } = _ref;\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewUserSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email(),\n    phoneNumber: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    country: Yup.string().required('country is required'),\n    company: Yup.string().required('Company is required'),\n    state: Yup.string().required('State is required'),\n    city: Yup.string().required('City is required'),\n    role: Yup.string().required('Role Number is required'),\n    avatarUrl: Yup.mixed().required('Avatar is required')\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || '',\n      email: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n      phoneNumber: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.phoneNumber) || '',\n      address: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.address) || '',\n      country: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.country) || '',\n      state: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.state) || '',\n      city: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.city) || '',\n      zipCode: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.zipCode) || '',\n      avatarUrl: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.avatarUrl) || null,\n      isVerified: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.isVerified) || true,\n      status: currentUser === null || currentUser === void 0 ? void 0 : currentUser.status,\n      company: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.company) || '',\n      role: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        setSubmitting,\n        resetForm,\n        setErrors\n      } = _ref2;\n\n      try {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', {\n          variant: 'success'\n        });\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n\n    if (file) {\n      setFieldValue('avatarUrl', { ...file,\n        preview: URL.createObjectURL(file)\n      });\n    }\n  }, [setFieldValue]);\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              py: 10,\n              px: 3\n            },\n            children: [isEdit && /*#__PURE__*/_jsxDEV(Label, {\n              color: values.status !== 'active' ? 'error' : 'success',\n              sx: {\n                textTransform: 'uppercase',\n                position: 'absolute',\n                top: 24,\n                right: 24\n              },\n              children: values.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(UploadAvatar, {\n                accept: \"image/*\",\n                file: values.avatarUrl,\n                maxSize: 3145728,\n                onDrop: handleDrop,\n                error: Boolean(touched.avatarUrl && errors.avatarUrl),\n                caption: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  sx: {\n                    mt: 2,\n                    mx: 'auto',\n                    display: 'block',\n                    textAlign: 'center',\n                    color: 'text.secondary'\n                  },\n                  children: [\"Allowed *.jpeg, *.jpg, *.png, *.gif\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 23\n                  }, this), \" max size of \", fData(3145728)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                error: true,\n                sx: {\n                  px: 2,\n                  textAlign: 'center'\n                },\n                children: touched.avatarUrl && errors.avatarUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), isEdit && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                onChange: event => setFieldValue('status', event.target.checked ? 'banned' : 'active'),\n                checked: values.status !== 'active'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mb: 0.5\n                  },\n                  children: \"Banned\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    color: 'text.secondary'\n                  },\n                  children: \"Apply disable account\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true),\n              sx: {\n                mx: 0,\n                mb: 3,\n                width: 1,\n                justifyContent: 'space-between'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(Switch, { ...getFieldProps('isVerified'),\n                checked: values.isVerified\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mb: 0.5\n                  },\n                  children: \"Email Verified\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    color: 'text.secondary'\n                  },\n                  children: \"Disabling this will automatically send the user a verification email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true),\n              sx: {\n                mx: 0,\n                width: 1,\n                justifyContent: 'space-between'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Full Name\",\n                  ...getFieldProps('name'),\n                  error: Boolean(touched.name && errors.name),\n                  helperText: touched.name && errors.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Email Address\",\n                  ...getFieldProps('email'),\n                  error: Boolean(touched.email && errors.email),\n                  helperText: touched.email && errors.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Phone Number\",\n                  ...getFieldProps('phoneNumber'),\n                  error: Boolean(touched.phoneNumber && errors.phoneNumber),\n                  helperText: touched.phoneNumber && errors.phoneNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  select: true,\n                  fullWidth: true,\n                  label: \"Country\",\n                  placeholder: \"Country\",\n                  ...getFieldProps('country'),\n                  SelectProps: {\n                    native: true\n                  },\n                  error: Boolean(touched.country && errors.country),\n                  helperText: touched.country && errors.country,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 21\n                  }, this), countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.label,\n                    children: option.label\n                  }, option.code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"State/Region\",\n                  ...getFieldProps('state'),\n                  error: Boolean(touched.state && errors.state),\n                  helperText: touched.state && errors.state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"City\",\n                  ...getFieldProps('city'),\n                  error: Boolean(touched.city && errors.city),\n                  helperText: touched.city && errors.city\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Address\",\n                  ...getFieldProps('address'),\n                  error: Boolean(touched.address && errors.address),\n                  helperText: touched.address && errors.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Zip/Code\",\n                  ...getFieldProps('zipCode')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Company\",\n                  ...getFieldProps('company'),\n                  error: Boolean(touched.company && errors.company),\n                  helperText: touched.company && errors.company\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Role\",\n                  ...getFieldProps('role'),\n                  error: Boolean(touched.role && errors.role),\n                  helperText: touched.role && errors.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  display: 'flex',\n                  justifyContent: 'flex-end'\n                },\n                children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  loading: isSubmitting,\n                  children: !isEdit ? 'Create User' : 'Save Changes'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserNewForm, \"ZK15KKFpaswBzRTU3LbPqVBA7FQ=\", false, function () {\n  return [useNavigate, useSnackbar, useFormik];\n});\n\n_c = UserNewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserNewForm\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/user/UserNewForm.js"],"names":["Yup","PropTypes","useCallback","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","fData","PATH_DASHBOARD","countries","Label","UploadAvatar","UserNewForm","propTypes","isEdit","bool","currentUser","object","navigate","enqueueSnackbar","NewUserSchema","shape","name","string","required","email","phoneNumber","address","country","company","state","city","role","avatarUrl","mixed","formik","enableReinitialize","initialValues","zipCode","isVerified","status","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","Promise","resolve","setTimeout","variant","user","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","handleDrop","acceptedFiles","file","preview","URL","createObjectURL","py","px","textTransform","position","top","right","mb","Boolean","mt","mx","display","textAlign","color","event","target","checked","width","justifyContent","p","xs","sm","native","map","option","label","code"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,SAA/B,QAAgD,QAAhD,C,CACA;;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,MAAjC,EAAyCC,SAAzC,EAAoDC,UAApD,EAAgEC,cAAhE,EAAgFC,gBAAhF,QAAwG,eAAxG,C,CACA;;AACA,SAASC,KAAT,QAAsB,6BAAtB,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CACA;;AACA,SAASC,SAAT,QAA0B,gBAA1B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,SAASC,YAAT,QAA6B,4BAA7B,C,CAEA;;;;AAEAC,WAAW,CAACC,SAAZ,GAAwB;AACtBC,EAAAA,MAAM,EAAExB,SAAS,CAACyB,IADI;AAEtBC,EAAAA,WAAW,EAAE1B,SAAS,CAAC2B;AAFD,CAAxB;AAKA,eAAe,SAASL,WAAT,OAA8C;AAAA;;AAAA,MAAzB;AAAEE,IAAAA,MAAF;AAAUE,IAAAA;AAAV,GAAyB;AAC3D,QAAME,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAsB3B,WAAW,EAAvC;AAEA,QAAM4B,aAAa,GAAG/B,GAAG,CAAC4B,MAAJ,GAAaI,KAAb,CAAmB;AACvCC,IAAAA,IAAI,EAAEjC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CADiC;AAEvCC,IAAAA,KAAK,EAAEpC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,EAA2CC,KAA3C,EAFgC;AAGvCC,IAAAA,WAAW,EAAErC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CAH0B;AAIvCG,IAAAA,OAAO,EAAEtC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAJ8B;AAKvCI,IAAAA,OAAO,EAAEvC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAL8B;AAMvCK,IAAAA,OAAO,EAAExC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAN8B;AAOvCM,IAAAA,KAAK,EAAEzC,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CAPgC;AAQvCO,IAAAA,IAAI,EAAE1C,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CARiC;AASvCQ,IAAAA,IAAI,EAAE3C,GAAG,CAACkC,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CATiC;AAUvCS,IAAAA,SAAS,EAAE5C,GAAG,CAAC6C,KAAJ,GAAYV,QAAZ,CAAqB,oBAArB;AAV4B,GAAnB,CAAtB;AAaA,QAAMW,MAAM,GAAGvC,SAAS,CAAC;AACvBwC,IAAAA,kBAAkB,EAAE,IADG;AAEvBC,IAAAA,aAAa,EAAE;AACbf,MAAAA,IAAI,EAAE,CAAAN,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,IAAb,KAAqB,EADd;AAEbG,MAAAA,KAAK,EAAE,CAAAT,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAES,KAAb,KAAsB,EAFhB;AAGbC,MAAAA,WAAW,EAAE,CAAAV,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEU,WAAb,KAA4B,EAH5B;AAIbC,MAAAA,OAAO,EAAE,CAAAX,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEW,OAAb,KAAwB,EAJpB;AAKbC,MAAAA,OAAO,EAAE,CAAAZ,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEY,OAAb,KAAwB,EALpB;AAMbE,MAAAA,KAAK,EAAE,CAAAd,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEc,KAAb,KAAsB,EANhB;AAObC,MAAAA,IAAI,EAAE,CAAAf,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEe,IAAb,KAAqB,EAPd;AAQbO,MAAAA,OAAO,EAAE,CAAAtB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEsB,OAAb,KAAwB,EARpB;AASbL,MAAAA,SAAS,EAAE,CAAAjB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEiB,SAAb,KAA0B,IATxB;AAUbM,MAAAA,UAAU,EAAE,CAAAvB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEuB,UAAb,KAA2B,IAV1B;AAWbC,MAAAA,MAAM,EAAExB,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEwB,MAXR;AAYbX,MAAAA,OAAO,EAAE,CAAAb,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEa,OAAb,KAAwB,EAZpB;AAabG,MAAAA,IAAI,EAAE,CAAAhB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEgB,IAAb,KAAqB;AAbd,KAFQ;AAiBvBS,IAAAA,gBAAgB,EAAErB,aAjBK;AAkBvBsB,IAAAA,QAAQ,EAAE,OAAOC,MAAP,YAA2D;AAAA,UAA5C;AAAEC,QAAAA,aAAF;AAAiBC,QAAAA,SAAjB;AAA4BC,QAAAA;AAA5B,OAA4C;;AACnE,UAAI;AACF,cAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;AACAH,QAAAA,SAAS;AACTD,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAzB,QAAAA,eAAe,CAAC,CAACL,MAAD,GAAU,gBAAV,GAA6B,gBAA9B,EAAgD;AAAEoC,UAAAA,OAAO,EAAE;AAAX,SAAhD,CAAf;AACAhC,QAAAA,QAAQ,CAACV,cAAc,CAAC2C,IAAf,CAAoBC,IAArB,CAAR;AACD,OAND,CAME,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAT,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,QAAAA,SAAS,CAACO,KAAD,CAAT;AACD;AACF;AA9BsB,GAAD,CAAxB;AAiCA,QAAM;AAAEE,IAAAA,MAAF;AAAUZ,IAAAA,MAAV;AAAkBa,IAAAA,OAAlB;AAA2BC,IAAAA,YAA3B;AAAyCC,IAAAA,YAAzC;AAAuDC,IAAAA,aAAvD;AAAsEC,IAAAA;AAAtE,MAAwFzB,MAA9F;AAEA,QAAM0B,UAAU,GAAGtE,WAAW,CAC3BuE,aAAD,IAAmB;AACjB,UAAMC,IAAI,GAAGD,aAAa,CAAC,CAAD,CAA1B;;AACA,QAAIC,IAAJ,EAAU;AACRJ,MAAAA,aAAa,CAAC,WAAD,EAAc,EACzB,GAAGI,IADsB;AAEzBC,QAAAA,OAAO,EAAEC,GAAG,CAACC,eAAJ,CAAoBH,IAApB;AAFgB,OAAd,CAAb;AAID;AACF,GAT2B,EAU5B,CAACJ,aAAD,CAV4B,CAA9B;AAaA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAExB,MAAvB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,UAAU,MAAhB;AAAiB,MAAA,YAAY,EAAC,KAA9B;AAAoC,MAAA,QAAQ,EAAEsB,YAA9C;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,CAAvB;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAE;AAAEU,cAAAA,EAAE,EAAE,EAAN;AAAUC,cAAAA,EAAE,EAAE;AAAd,aAAV;AAAA,uBACGtD,MAAM,iBACL,QAAC,KAAD;AACE,cAAA,KAAK,EAAE6B,MAAM,CAACH,MAAP,KAAkB,QAAlB,GAA6B,OAA7B,GAAuC,SADhD;AAEE,cAAA,EAAE,EAAE;AAAE6B,gBAAAA,aAAa,EAAE,WAAjB;AAA8BC,gBAAAA,QAAQ,EAAE,UAAxC;AAAoDC,gBAAAA,GAAG,EAAE,EAAzD;AAA6DC,gBAAAA,KAAK,EAAE;AAApE,eAFN;AAAA,wBAIG7B,MAAM,CAACH;AAJV;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAUE,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE;AAAEiC,gBAAAA,EAAE,EAAE;AAAN,eAAT;AAAA,sCACE,QAAC,YAAD;AACE,gBAAA,MAAM,EAAC,SADT;AAEE,gBAAA,IAAI,EAAE9B,MAAM,CAACV,SAFf;AAGE,gBAAA,OAAO,EAAE,OAHX;AAIE,gBAAA,MAAM,EAAE4B,UAJV;AAKE,gBAAA,KAAK,EAAEa,OAAO,CAAClB,OAAO,CAACvB,SAAR,IAAqBsB,MAAM,CAACtB,SAA7B,CALhB;AAME,gBAAA,OAAO,eACL,QAAC,UAAD;AACE,kBAAA,OAAO,EAAC,SADV;AAEE,kBAAA,EAAE,EAAE;AACF0C,oBAAAA,EAAE,EAAE,CADF;AAEFC,oBAAAA,EAAE,EAAE,MAFF;AAGFC,oBAAAA,OAAO,EAAE,OAHP;AAIFC,oBAAAA,SAAS,EAAE,QAJT;AAKFC,oBAAAA,KAAK,EAAE;AALL,mBAFN;AAAA,iFAWE;AAAA;AAAA;AAAA;AAAA,0BAXF,mBAWsBxE,KAAK,CAAC,OAAD,CAX3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,sBADF,eAuBE,QAAC,cAAD;AAAgB,gBAAA,KAAK,MAArB;AAAsB,gBAAA,EAAE,EAAE;AAAE6D,kBAAAA,EAAE,EAAE,CAAN;AAASU,kBAAAA,SAAS,EAAE;AAApB,iBAA1B;AAAA,0BACGtB,OAAO,CAACvB,SAAR,IAAqBsB,MAAM,CAACtB;AAD/B;AAAA;AAAA;AAAA;AAAA,sBAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,EAsCGnB,MAAM,iBACL,QAAC,gBAAD;AACE,cAAA,cAAc,EAAC,OADjB;AAEE,cAAA,OAAO,eACL,QAAC,MAAD;AACE,gBAAA,QAAQ,EAAGkE,KAAD,IAAWrB,aAAa,CAAC,QAAD,EAAWqB,KAAK,CAACC,MAAN,CAAaC,OAAb,GAAuB,QAAvB,GAAkC,QAA7C,CADpC;AAEE,gBAAA,OAAO,EAAEvC,MAAM,CAACH,MAAP,KAAkB;AAF7B;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAQE,cAAA,KAAK,eACH;AAAA,wCACE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,WAApB;AAAgC,kBAAA,EAAE,EAAE;AAAEiC,oBAAAA,EAAE,EAAE;AAAN,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,OAApB;AAA4B,kBAAA,EAAE,EAAE;AAAEM,oBAAAA,KAAK,EAAE;AAAT,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF;AAAA,8BATJ;AAkBE,cAAA,EAAE,EAAE;AAAEH,gBAAAA,EAAE,EAAE,CAAN;AAASH,gBAAAA,EAAE,EAAE,CAAb;AAAgBU,gBAAAA,KAAK,EAAE,CAAvB;AAA0BC,gBAAAA,cAAc,EAAE;AAA1C;AAlBN;AAAA;AAAA;AAAA;AAAA,oBAvCJ,eA6DE,QAAC,gBAAD;AACE,cAAA,cAAc,EAAC,OADjB;AAEE,cAAA,OAAO,eAAE,QAAC,MAAD,OAAYxB,aAAa,CAAC,YAAD,CAAzB;AAAyC,gBAAA,OAAO,EAAEjB,MAAM,CAACJ;AAAzD;AAAA;AAAA;AAAA;AAAA,sBAFX;AAGE,cAAA,KAAK,eACH;AAAA,wCACE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,WAApB;AAAgC,kBAAA,EAAE,EAAE;AAAEkC,oBAAAA,EAAE,EAAE;AAAN,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAIE,QAAC,UAAD;AAAY,kBAAA,OAAO,EAAC,OAApB;AAA4B,kBAAA,EAAE,EAAE;AAAEM,oBAAAA,KAAK,EAAE;AAAT,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF;AAAA,8BAJJ;AAaE,cAAA,EAAE,EAAE;AAAEH,gBAAAA,EAAE,EAAE,CAAN;AAASO,gBAAAA,KAAK,EAAE,CAAhB;AAAmBC,gBAAAA,cAAc,EAAE;AAAnC;AAbN;AAAA;AAAA;AAAA;AAAA,oBA7DF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAiFE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAmB,UAAA,EAAE,EAAE,CAAvB;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAE;AAAEC,cAAAA,CAAC,EAAE;AAAL,aAAV;AAAA,mCACE,QAAC,KAAD;AAAO,cAAA,OAAO,EAAE,CAAhB;AAAA,sCACE,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAE;AAAEC,kBAAAA,EAAE,EAAE,QAAN;AAAgBC,kBAAAA,EAAE,EAAE;AAApB,iBAAlB;AAA+C,gBAAA,OAAO,EAAE;AAAED,kBAAAA,EAAE,EAAE,CAAN;AAASC,kBAAAA,EAAE,EAAE;AAAb,iBAAxD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,WAFR;AAAA,qBAGM3B,aAAa,CAAC,MAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAClC,IAAR,IAAgBiC,MAAM,CAACjC,IAAxB,CAJhB;AAKE,kBAAA,UAAU,EAAEkC,OAAO,CAAClC,IAAR,IAAgBiC,MAAM,CAACjC;AALrC;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,eAFR;AAAA,qBAGMsC,aAAa,CAAC,OAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAC/B,KAAR,IAAiB8B,MAAM,CAAC9B,KAAzB,CAJhB;AAKE,kBAAA,UAAU,EAAE+B,OAAO,CAAC/B,KAAR,IAAiB8B,MAAM,CAAC9B;AALtC;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAkBE,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAE;AAAE6D,kBAAAA,EAAE,EAAE,QAAN;AAAgBC,kBAAAA,EAAE,EAAE;AAApB,iBAAlB;AAA+C,gBAAA,OAAO,EAAE;AAAED,kBAAAA,EAAE,EAAE,CAAN;AAASC,kBAAAA,EAAE,EAAE;AAAb,iBAAxD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,cAFR;AAAA,qBAGM3B,aAAa,CAAC,aAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAC9B,WAAR,IAAuB6B,MAAM,CAAC7B,WAA/B,CAJhB;AAKE,kBAAA,UAAU,EAAE8B,OAAO,CAAC9B,WAAR,IAAuB6B,MAAM,CAAC7B;AAL5C;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,SAAD;AACE,kBAAA,MAAM,MADR;AAEE,kBAAA,SAAS,MAFX;AAGE,kBAAA,KAAK,EAAC,SAHR;AAIE,kBAAA,WAAW,EAAC,SAJd;AAAA,qBAKMkC,aAAa,CAAC,SAAD,CALnB;AAME,kBAAA,WAAW,EAAE;AAAE4B,oBAAAA,MAAM,EAAE;AAAV,mBANf;AAOE,kBAAA,KAAK,EAAEd,OAAO,CAAClB,OAAO,CAAC5B,OAAR,IAAmB2B,MAAM,CAAC3B,OAA3B,CAPhB;AAQE,kBAAA,UAAU,EAAE4B,OAAO,CAAC5B,OAAR,IAAmB2B,MAAM,CAAC3B,OARxC;AAAA,0CAUE;AAAQ,oBAAA,KAAK,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,0BAVF,EAWGnB,SAAS,CAACgF,GAAV,CAAeC,MAAD,iBACb;AAA0B,oBAAA,KAAK,EAAEA,MAAM,CAACC,KAAxC;AAAA,8BACGD,MAAM,CAACC;AADV,qBAAaD,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA,0BADD,CAXH;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlBF,eA6CE,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAE;AAAEN,kBAAAA,EAAE,EAAE,QAAN;AAAgBC,kBAAAA,EAAE,EAAE;AAApB,iBAAlB;AAA+C,gBAAA,OAAO,EAAE;AAAED,kBAAAA,EAAE,EAAE,CAAN;AAASC,kBAAAA,EAAE,EAAE;AAAb,iBAAxD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,cAFR;AAAA,qBAGM3B,aAAa,CAAC,OAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAC1B,KAAR,IAAiByB,MAAM,CAACzB,KAAzB,CAJhB;AAKE,kBAAA,UAAU,EAAE0B,OAAO,CAAC1B,KAAR,IAAiByB,MAAM,CAACzB;AALtC;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,MAFR;AAAA,qBAGM8B,aAAa,CAAC,MAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAACzB,IAAR,IAAgBwB,MAAM,CAACxB,IAAxB,CAJhB;AAKE,kBAAA,UAAU,EAAEyB,OAAO,CAACzB,IAAR,IAAgBwB,MAAM,CAACxB;AALrC;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7CF,eA8DE,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAE;AAAEuD,kBAAAA,EAAE,EAAE,QAAN;AAAgBC,kBAAAA,EAAE,EAAE;AAApB,iBAAlB;AAA+C,gBAAA,OAAO,EAAE;AAAED,kBAAAA,EAAE,EAAE,CAAN;AAASC,kBAAAA,EAAE,EAAE;AAAb,iBAAxD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,SAFR;AAAA,qBAGM3B,aAAa,CAAC,SAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAC7B,OAAR,IAAmB4B,MAAM,CAAC5B,OAA3B,CAJhB;AAKE,kBAAA,UAAU,EAAE6B,OAAO,CAAC7B,OAAR,IAAmB4B,MAAM,CAAC5B;AALxC;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,SAAD;AAAW,kBAAA,SAAS,MAApB;AAAqB,kBAAA,KAAK,EAAC,UAA3B;AAAA,qBAA0CiC,aAAa,CAAC,SAAD;AAAvD;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA,sBA9DF,eAyEE,QAAC,KAAD;AAAO,gBAAA,SAAS,EAAE;AAAE0B,kBAAAA,EAAE,EAAE,QAAN;AAAgBC,kBAAAA,EAAE,EAAE;AAApB,iBAAlB;AAA+C,gBAAA,OAAO,EAAE;AAAED,kBAAAA,EAAE,EAAE,CAAN;AAASC,kBAAAA,EAAE,EAAE;AAAb,iBAAxD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,SAFR;AAAA,qBAGM3B,aAAa,CAAC,SAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAAC3B,OAAR,IAAmB0B,MAAM,CAAC1B,OAA3B,CAJhB;AAKE,kBAAA,UAAU,EAAE2B,OAAO,CAAC3B,OAAR,IAAmB0B,MAAM,CAAC1B;AALxC;AAAA;AAAA;AAAA;AAAA,wBADF,eAQE,QAAC,SAAD;AACE,kBAAA,SAAS,MADX;AAEE,kBAAA,KAAK,EAAC,MAFR;AAAA,qBAGM+B,aAAa,CAAC,MAAD,CAHnB;AAIE,kBAAA,KAAK,EAAEc,OAAO,CAAClB,OAAO,CAACxB,IAAR,IAAgBuB,MAAM,CAACvB,IAAxB,CAJhB;AAKE,kBAAA,UAAU,EAAEwB,OAAO,CAACxB,IAAR,IAAgBuB,MAAM,CAACvB;AALrC;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzEF,eA0FE,QAAC,GAAD;AAAK,gBAAA,EAAE,EAAE;AAAE2C,kBAAAA,EAAE,EAAE,CAAN;AAASE,kBAAAA,OAAO,EAAE,MAAlB;AAA0BO,kBAAAA,cAAc,EAAE;AAA1C,iBAAT;AAAA,uCACE,QAAC,aAAD;AAAe,kBAAA,IAAI,EAAC,QAApB;AAA6B,kBAAA,OAAO,EAAC,WAArC;AAAiD,kBAAA,OAAO,EAAE1B,YAA1D;AAAA,4BACG,CAAC5C,MAAD,GAAU,aAAV,GAA0B;AAD7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBA1FF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAjFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4LD;;GA7PuBF,W;UACLnB,W,EACWD,W,EAebI,S;;;KAjBOgB,W","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// @mui\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@mui/material';\n// utils\nimport { fData } from '../../../utils/formatNumber';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// _mock\nimport { countries } from '../../../_mock';\n// components\nimport Label from '../../../components/Label';\nimport { UploadAvatar } from '../../../components/upload';\n\n// ----------------------------------------------------------------------\n\nUserNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentUser: PropTypes.object,\n};\n\nexport default function UserNewForm({ isEdit, currentUser }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewUserSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email(),\n    phoneNumber: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    country: Yup.string().required('country is required'),\n    company: Yup.string().required('Company is required'),\n    state: Yup.string().required('State is required'),\n    city: Yup.string().required('City is required'),\n    role: Yup.string().required('Role Number is required'),\n    avatarUrl: Yup.mixed().required('Avatar is required'),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: currentUser?.name || '',\n      email: currentUser?.email || '',\n      phoneNumber: currentUser?.phoneNumber || '',\n      address: currentUser?.address || '',\n      country: currentUser?.country || '',\n      state: currentUser?.state || '',\n      city: currentUser?.city || '',\n      zipCode: currentUser?.zipCode || '',\n      avatarUrl: currentUser?.avatarUrl || null,\n      isVerified: currentUser?.isVerified || true,\n      status: currentUser?.status,\n      company: currentUser?.company || '',\n      role: currentUser?.role || '',\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      try {\n        await new Promise((resolve) => setTimeout(resolve, 500));\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('avatarUrl', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3 }}>\n              {isEdit && (\n                <Label\n                  color={values.status !== 'active' ? 'error' : 'success'}\n                  sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\n                >\n                  {values.status}\n                </Label>\n              )}\n\n              <Box sx={{ mb: 5 }}>\n                <UploadAvatar\n                  accept=\"image/*\"\n                  file={values.avatarUrl}\n                  maxSize={3145728}\n                  onDrop={handleDrop}\n                  error={Boolean(touched.avatarUrl && errors.avatarUrl)}\n                  caption={\n                    <Typography\n                      variant=\"caption\"\n                      sx={{\n                        mt: 2,\n                        mx: 'auto',\n                        display: 'block',\n                        textAlign: 'center',\n                        color: 'text.secondary',\n                      }}\n                    >\n                      Allowed *.jpeg, *.jpg, *.png, *.gif\n                      <br /> max size of {fData(3145728)}\n                    </Typography>\n                  }\n                />\n                <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                  {touched.avatarUrl && errors.avatarUrl}\n                </FormHelperText>\n              </Box>\n\n              {isEdit && (\n                <FormControlLabel\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch\n                      onChange={(event) => setFieldValue('status', event.target.checked ? 'banned' : 'active')}\n                      checked={values.status !== 'active'}\n                    />\n                  }\n                  label={\n                    <>\n                      <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                        Banned\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                        Apply disable account\n                      </Typography>\n                    </>\n                  }\n                  sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\n                />\n              )}\n\n              <FormControlLabel\n                labelPlacement=\"start\"\n                control={<Switch {...getFieldProps('isVerified')} checked={values.isVerified} />}\n                label={\n                  <>\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                      Email Verified\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                      Disabling this will automatically send the user a verification email\n                    </Typography>\n                  </>\n                }\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Full Name\"\n                    {...getFieldProps('name')}\n                    error={Boolean(touched.name && errors.name)}\n                    helperText={touched.name && errors.name}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Email Address\"\n                    {...getFieldProps('email')}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Phone Number\"\n                    {...getFieldProps('phoneNumber')}\n                    error={Boolean(touched.phoneNumber && errors.phoneNumber)}\n                    helperText={touched.phoneNumber && errors.phoneNumber}\n                  />\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"State/Region\"\n                    {...getFieldProps('state')}\n                    error={Boolean(touched.state && errors.state)}\n                    helperText={touched.state && errors.state}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"City\"\n                    {...getFieldProps('city')}\n                    error={Boolean(touched.city && errors.city)}\n                    helperText={touched.city && errors.city}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Address\"\n                    {...getFieldProps('address')}\n                    error={Boolean(touched.address && errors.address)}\n                    helperText={touched.address && errors.address}\n                  />\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Company\"\n                    {...getFieldProps('company')}\n                    error={Boolean(touched.company && errors.company)}\n                    helperText={touched.company && errors.company}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Role\"\n                    {...getFieldProps('role')}\n                    error={Boolean(touched.role && errors.role)}\n                    helperText={touched.role && errors.role}\n                  />\n                </Stack>\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    {!isEdit ? 'Create User' : 'Save Changes'}\n                  </LoadingButton>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}