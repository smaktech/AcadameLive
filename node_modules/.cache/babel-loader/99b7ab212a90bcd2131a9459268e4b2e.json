{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\pages\\\\dashboard\\\\Kanban.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react'; // @mui\n\nimport { Container, Stack } from '@mui/material';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getBoard, persistColumn, persistCard } from '../../redux/slices/kanban'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // components\n\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { SkeletonKanbanColumn } from '../../components/skeleton'; // sections\n\nimport { KanbanColumn, KanbanColumnAdd } from '../../sections/@dashboard/kanban'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kanban() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    board\n  } = useSelector(state => state.kanban);\n  useEffect(() => {\n    dispatch(getBoard());\n  }, [dispatch]);\n\n  const onDragEnd = result => {\n    // Reorder card\n    const {\n      destination,\n      source,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(board.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n      dispatch(persistColumn(newColumnOrder));\n      return;\n    }\n\n    const start = board.columns[source.droppableId];\n    const finish = board.columns[destination.droppableId];\n\n    if (start.id === finish.id) {\n      const updatedCardIds = [...start.cardIds];\n      updatedCardIds.splice(source.index, 1);\n      updatedCardIds.splice(destination.index, 0, draggableId);\n      const updatedColumn = { ...start,\n        cardIds: updatedCardIds\n      };\n      dispatch(persistCard({ ...board.columns,\n        [updatedColumn.id]: updatedColumn\n      }));\n      return;\n    }\n\n    const startCardIds = [...start.cardIds];\n    startCardIds.splice(source.index, 1);\n    const updatedStart = { ...start,\n      cardIds: startCardIds\n    };\n    const finishCardIds = [...finish.cardIds];\n    finishCardIds.splice(destination.index, 0, draggableId);\n    const updatedFinish = { ...finish,\n      cardIds: finishCardIds\n    };\n    dispatch(persistCard({ ...board.columns,\n      [updatedStart.id]: updatedStart,\n      [updatedFinish.id]: updatedFinish\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Kanban\",\n    sx: {\n      height: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: false,\n      sx: {\n        height: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Kanban\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Kanban'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"all-columns\",\n          direction: \"horizontal\",\n          type: \"column\",\n          children: provided => /*#__PURE__*/_jsxDEV(Stack, { ...provided.droppableProps,\n            ref: provided.innerRef,\n            direction: \"row\",\n            alignItems: \"flex-start\",\n            spacing: 3,\n            sx: {\n              height: 'calc(100% - 32px)',\n              overflowY: 'hidden'\n            },\n            children: [!board.columnOrder.length ? /*#__PURE__*/_jsxDEV(SkeletonKanbanColumn, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this) : board.columnOrder.map((columnId, index) => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n              index: index,\n              column: board.columns[columnId]\n            }, columnId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this)), provided.placeholder, /*#__PURE__*/_jsxDEV(KanbanColumnAdd, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Kanban, \"m6Io/WOTrkOHtTtdiRZAhbBKGgY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Kanban;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/dashboard/Kanban.js"],"names":["useEffect","Container","Stack","DragDropContext","Droppable","useDispatch","useSelector","getBoard","persistColumn","persistCard","PATH_DASHBOARD","Page","HeaderBreadcrumbs","SkeletonKanbanColumn","KanbanColumn","KanbanColumnAdd","Kanban","dispatch","board","state","kanban","onDragEnd","result","destination","source","draggableId","type","droppableId","index","newColumnOrder","Array","from","columnOrder","splice","start","columns","finish","id","updatedCardIds","cardIds","updatedColumn","startCardIds","updatedStart","finishCardIds","updatedFinish","height","name","href","root","provided","droppableProps","innerRef","overflowY","length","map","columnId","placeholder"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\n// @mui\nimport { Container, Stack } from '@mui/material';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getBoard, persistColumn, persistCard } from '../../redux/slices/kanban';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport { SkeletonKanbanColumn } from '../../components/skeleton';\n// sections\nimport { KanbanColumn, KanbanColumnAdd } from '../../sections/@dashboard/kanban';\n\n// ----------------------------------------------------------------------\n\nexport default function Kanban() {\n  const dispatch = useDispatch();\n  const { board } = useSelector((state) => state.kanban);\n\n  useEffect(() => {\n    dispatch(getBoard());\n  }, [dispatch]);\n\n  const onDragEnd = (result) => {\n    // Reorder card\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(board.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      dispatch(persistColumn(newColumnOrder));\n      return;\n    }\n\n    const start = board.columns[source.droppableId];\n    const finish = board.columns[destination.droppableId];\n\n    if (start.id === finish.id) {\n      const updatedCardIds = [...start.cardIds];\n      updatedCardIds.splice(source.index, 1);\n      updatedCardIds.splice(destination.index, 0, draggableId);\n\n      const updatedColumn = {\n        ...start,\n        cardIds: updatedCardIds,\n      };\n\n      dispatch(\n        persistCard({\n          ...board.columns,\n          [updatedColumn.id]: updatedColumn,\n        })\n      );\n      return;\n    }\n\n    const startCardIds = [...start.cardIds];\n    startCardIds.splice(source.index, 1);\n    const updatedStart = {\n      ...start,\n      cardIds: startCardIds,\n    };\n\n    const finishCardIds = [...finish.cardIds];\n    finishCardIds.splice(destination.index, 0, draggableId);\n    const updatedFinish = {\n      ...finish,\n      cardIds: finishCardIds,\n    };\n\n    dispatch(\n      persistCard({\n        ...board.columns,\n        [updatedStart.id]: updatedStart,\n        [updatedFinish.id]: updatedFinish,\n      })\n    );\n  };\n\n  return (\n    <Page title=\"Kanban\" sx={{ height: 1 }}>\n      <Container maxWidth={false} sx={{ height: 1 }}>\n        <HeaderBreadcrumbs\n          heading=\"Kanban\"\n          links={[\n            {\n              name: 'Dashboard',\n              href: PATH_DASHBOARD.root,\n            },\n            { name: 'Kanban' },\n          ]}\n        />\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <Stack\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                direction=\"row\"\n                alignItems=\"flex-start\"\n                spacing={3}\n                sx={{ height: 'calc(100% - 32px)', overflowY: 'hidden' }}\n              >\n                {!board.columnOrder.length ? (\n                  <SkeletonKanbanColumn />\n                ) : (\n                  board.columnOrder.map((columnId, index) => (\n                    <KanbanColumn index={index} key={columnId} column={board.columns[columnId]} />\n                  ))\n                )}\n\n                {provided.placeholder}\n                <KanbanColumnAdd />\n              </Stack>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </Container>\n    </Page>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}