{"ast":null,"code":"// @ts-ignore\nimport formatter from 'format';\nexport var fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n});\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\n\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-ignore\n  FormattedError.displayName = Constructor.displayName || Constructor.name;\n  return FormattedError;\n  /**\n   * @param {string} [format]\n   * @param {...unknown} values\n   * @returns {Fault}\n   */\n\n  function FormattedError(format) {\n    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n\n    /** @type {string} */\n    var reason = format ? formatter(format, ...values) : format;\n    return new Constructor(reason);\n  }\n}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/fault/index.js"],"names":["formatter","fault","Object","assign","create","Error","eval","EvalError","range","RangeError","reference","ReferenceError","syntax","SyntaxError","type","TypeError","uri","URIError","Constructor","FormattedError","displayName","name","format","values","reason"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,QAAtB;AAEA,OAAO,IAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcC,MAAM,CAACC,KAAD,CAApB,EAA6B;AAC9CC,EAAAA,IAAI,EAAEF,MAAM,CAACG,SAAD,CADkC;AAE9CC,EAAAA,KAAK,EAAEJ,MAAM,CAACK,UAAD,CAFiC;AAG9CC,EAAAA,SAAS,EAAEN,MAAM,CAACO,cAAD,CAH6B;AAI9CC,EAAAA,MAAM,EAAER,MAAM,CAACS,WAAD,CAJgC;AAK9CC,EAAAA,IAAI,EAAEV,MAAM,CAACW,SAAD,CALkC;AAM9CC,EAAAA,GAAG,EAAEZ,MAAM,CAACa,QAAD;AANmC,CAA7B,CAAZ;AASP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASb,MAAT,CAAgBc,WAAhB,EAA6B;AAClC;AACA;AACAC,EAAAA,cAAc,CAACC,WAAf,GAA6BF,WAAW,CAACE,WAAZ,IAA2BF,WAAW,CAACG,IAApE;AAEA,SAAOF,cAAP;AAEA;AACF;AACA;AACA;AACA;;AACE,WAASA,cAAT,CAAwBG,MAAxB,EAA2C;AAAA,sCAARC,MAAQ;AAARA,MAAAA,MAAQ;AAAA;;AACzC;AACA,QAAIC,MAAM,GAAGF,MAAM,GAAGtB,SAAS,CAACsB,MAAD,EAAS,GAAGC,MAAZ,CAAZ,GAAkCD,MAArD;AACA,WAAO,IAAIJ,WAAJ,CAAgBM,MAAhB,CAAP;AACD;AACF","sourcesContent":["// @ts-ignore\nimport formatter from 'format'\n\nexport var fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n})\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-ignore\n  FormattedError.displayName = Constructor.displayName || Constructor.name\n\n  return FormattedError\n\n  /**\n   * @param {string} [format]\n   * @param {...unknown} values\n   * @returns {Fault}\n   */\n  function FormattedError(format, ...values) {\n    /** @type {string} */\n    var reason = format ? formatter(format, ...values) : format\n    return new Constructor(reason)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}