{"ast":null,"code":"import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';// @mui\nimport{Table,TableRow,TableHead,TableBody,TableCell,TableContainer,TablePagination}from'@mui/material';// components\nimport Scrollbar from'../../../../components/Scrollbar';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function createData(name,code,population,size){var density=population/size;return{name:name,code:code,population:population,size:size,density:density};}var GROUPING_TABLE=[createData('India','IN',1324171354,3287263),createData('China','CN',1403500365,9596961),createData('Italy','IT',60483973,301340),createData('United States','US',327167434,9833520),createData('Canada','CA',37602103,9984670),createData('Australia','AU',25475400,7692024),createData('Germany','DE',83019200,357578),createData('Ireland','IE',4857000,70273),createData('Mexico','MX',126577691,1972550),createData('Japan','JP',126317000,377973),createData('France','FR',67022000,640679),createData('United Kingdom','GB',67545757,242495),createData('Russia','RU',146793744,17098246),createData('Nigeria','NG',200962417,923768),createData('Brazil','BR',210147125,8515767)];var COLUMNS=[{id:'name',label:'Name',minWidth:170},{id:'code',label:\"ISO\\xA0Code\",minWidth:100},{id:'population',label:'Population',minWidth:170,align:'right',format:function format(value){return value.toLocaleString('en-US');}},{id:'size',label:\"Size\\xA0(km\\xB2)\",minWidth:170,align:'right',format:function format(value){return value.toLocaleString('en-US');}},{id:'density',label:'Density',minWidth:170,align:'right',format:function format(value){return value.toFixed(2);}}];// ----------------------------------------------------------------------\nexport default function GroupingFixedHeader(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];var _useState3=useState(10),_useState4=_slicedToArray(_useState3,2),rowsPerPage=_useState4[0],setRowsPerPage=_useState4[1];var handleChangePage=function handleChangePage(event,newPage){setPage(newPage);};var handleChangeRowsPerPage=function handleChangeRowsPerPage(event){setRowsPerPage(+event.target.value);setPage(0);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Scrollbar,{children:/*#__PURE__*/_jsx(TableContainer,{sx:{minWidth:800,maxHeight:400},children:/*#__PURE__*/_jsxs(Table,{stickyHeader:true,children:[/*#__PURE__*/_jsxs(TableHead,{children:[/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{align:\"center\",colSpan:2,sx:{background:function background(theme){return theme.palette.background.paper;}},children:\"Country\"}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",colSpan:3,sx:{background:function background(theme){return theme.palette.background.paper;}},children:\"Details\"})]}),/*#__PURE__*/_jsx(TableRow,{children:COLUMNS.map(function(column){return/*#__PURE__*/_jsx(TableCell,{align:column.align,style:{top:56,minWidth:column.minWidth},children:column.label},column.id);})})]}),/*#__PURE__*/_jsx(TableBody,{children:GROUPING_TABLE.slice(page*rowsPerPage,page*rowsPerPage+rowsPerPage).map(function(row){return/*#__PURE__*/_jsx(TableRow,{hover:true,role:\"checkbox\",tabIndex:-1,children:COLUMNS.map(function(column){var value=row[column.id];return/*#__PURE__*/_jsx(TableCell,{align:column.align,children:column.format&&typeof value==='number'?column.format(value):value},column.id);})},row.code);})})]})})}),/*#__PURE__*/_jsx(TablePagination,{page:page,component:\"div\",count:GROUPING_TABLE.length,rowsPerPage:rowsPerPage,onPageChange:handleChangePage,rowsPerPageOptions:[10,25,100],onRowsPerPageChange:handleChangeRowsPerPage})]});}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/pages/overview/mui/table/GroupingFixedHeader.js"],"names":["useState","Table","TableRow","TableHead","TableBody","TableCell","TableContainer","TablePagination","Scrollbar","createData","name","code","population","size","density","GROUPING_TABLE","COLUMNS","id","label","minWidth","align","format","value","toLocaleString","toFixed","GroupingFixedHeader","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","maxHeight","background","theme","palette","paper","map","column","top","slice","row","length"],"mappings":"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","sourcesContent":["import { useState } from 'react';\n// @mui\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableContainer, TablePagination } from '@mui/material';\n// components\nimport Scrollbar from '../../../../components/Scrollbar';\n\n// ----------------------------------------------------------------------\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return { name, code, population, size, density };\n}\n\nconst GROUPING_TABLE = [\n  createData('India', 'IN', 1324171354, 3287263),\n  createData('China', 'CN', 1403500365, 9596961),\n  createData('Italy', 'IT', 60483973, 301340),\n  createData('United States', 'US', 327167434, 9833520),\n  createData('Canada', 'CA', 37602103, 9984670),\n  createData('Australia', 'AU', 25475400, 7692024),\n  createData('Germany', 'DE', 83019200, 357578),\n  createData('Ireland', 'IE', 4857000, 70273),\n  createData('Mexico', 'MX', 126577691, 1972550),\n  createData('Japan', 'JP', 126317000, 377973),\n  createData('France', 'FR', 67022000, 640679),\n  createData('United Kingdom', 'GB', 67545757, 242495),\n  createData('Russia', 'RU', 146793744, 17098246),\n  createData('Nigeria', 'NG', 200962417, 923768),\n  createData('Brazil', 'BR', 210147125, 8515767),\n];\n\nconst COLUMNS = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\n  {\n    id: 'population',\n    label: 'Population',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'size',\n    label: 'Size\\u00a0(km\\u00b2)',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'density',\n    label: 'Density',\n    minWidth: 170,\n    align: 'right',\n    format: (value) => value.toFixed(2),\n  },\n];\n\n// ----------------------------------------------------------------------\n\nexport default function GroupingFixedHeader() {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <>\n      <Scrollbar>\n        <TableContainer sx={{ minWidth: 800, maxHeight: 400 }}>\n          <Table stickyHeader>\n            <TableHead>\n              <TableRow>\n                <TableCell\n                  align=\"center\"\n                  colSpan={2}\n                  sx={{\n                    background: (theme) => theme.palette.background.paper,\n                  }}\n                >\n                  Country\n                </TableCell>\n                <TableCell align=\"center\" colSpan={3} sx={{ background: (theme) => theme.palette.background.paper }}>\n                  Details\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                {COLUMNS.map((column) => (\n                  <TableCell key={column.id} align={column.align} style={{ top: 56, minWidth: column.minWidth }}>\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {GROUPING_TABLE.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {COLUMNS.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Scrollbar>\n\n      <TablePagination\n        page={page}\n        component=\"div\"\n        count={GROUPING_TABLE.length}\n        rowsPerPage={rowsPerPage}\n        onPageChange={handleChangePage}\n        rowsPerPageOptions={[10, 25, 100]}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}