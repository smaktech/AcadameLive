{"ast":null,"code":"import _regeneratorRuntime from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{apiUrl}from'../../config';function RestLogin(_x){return _RestLogin.apply(this,arguments);}function _RestLogin(){_RestLogin=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(credentials){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(apiUrl+'/auth/login',{method:'POST',headers:{Accept:'application/json','Content-Type':'application/json'},body:JSON.stringify(credentials)}).then(function(res){return res.json();});case 2:data=_context.sent;return _context.abrupt(\"return\",data);case 4:case\"end\":return _context.stop();}}},_callee);}));return _RestLogin.apply(this,arguments);}function ForgotPassword(_x2){return _ForgotPassword.apply(this,arguments);}//for verifying accessToken of user \nfunction _ForgotPassword(){_ForgotPassword=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(credentials){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(apiUrl+'/auth/updatePassword',{method:'POST',headers:{Accept:'application/json','Content-Type':'application/json'},body:JSON.stringify(credentials)}).then(function(res){return res.json();});case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return _ForgotPassword.apply(this,arguments);}function decryptJWT(_x3){return _decryptJWT.apply(this,arguments);}//sends otp for reseting passwords\nfunction _decryptJWT(){_decryptJWT=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accessToken){var data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch(apiUrl+'/auth/decryptJWT',{method:'POST',headers:{Accept:'application/json','Content-Type':'application/json'},body:JSON.stringify({accessToken:accessToken})}).then(function(res){return res.json();});case 2:data=_context3.sent;return _context3.abrupt(\"return\",data);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _decryptJWT.apply(this,arguments);}function sendOTP(_x4){return _sendOTP.apply(this,arguments);}//function for reseting passwords using token\nfunction _sendOTP(){_sendOTP=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(email){var details,formBody,property,encodedKey,encodedValue,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:details={\"email\":email};formBody=[];for(property in details){encodedKey=encodeURIComponent(property);encodedValue=encodeURIComponent(details[property]);formBody.push(encodedKey+\"=\"+encodedValue);}formBody=formBody.join(\"&\");_context4.next=6;return fetch(apiUrl+'/auth/sendOTP',{method:'POST',headers:{Accept:'application/json','Content-Type':'application/x-www-form-urlencoded'},body:formBody}).then(function(res){return res.json();});case 6:data=_context4.sent;return _context4.abrupt(\"return\",data);case 8:case\"end\":return _context4.stop();}}},_callee4);}));return _sendOTP.apply(this,arguments);}function changePassword(_x5,_x6,_x7){return _changePassword.apply(this,arguments);}function _changePassword(){_changePassword=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(userID,token,newPassword){var details,formBody,property,encodedKey,encodedValue,data;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:details={\"newPassword\":newPassword};formBody=[];for(property in details){encodedKey=encodeURIComponent(property);encodedValue=encodeURIComponent(details[property]);formBody.push(encodedKey+\"=\"+encodedValue);}formBody=formBody.join(\"&\");_context5.next=6;return fetch(apiUrl+'/auth/password-reset/'+userID+\"/\"+token,{method:'POST',headers:{Accept:'application/json','Content-Type':'application/x-www-form-urlencoded'},body:formBody}).then(function(res){return res.json();});case 6:data=_context5.sent;return _context5.abrupt(\"return\",data);case 8:case\"end\":return _context5.stop();}}},_callee5);}));return _changePassword.apply(this,arguments);}export{RestLogin,decryptJWT,ForgotPassword,sendOTP,changePassword};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Auth/Auth.js"],"names":["apiUrl","RestLogin","credentials","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","data","ForgotPassword","decryptJWT","accessToken","sendOTP","email","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","changePassword","userID","token","newPassword"],"mappings":"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","sourcesContent":["import { apiUrl } from '../../config';\n\nasync function RestLogin(credentials) {\n  const data = await fetch(apiUrl + '/auth/login', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  }).then((res) => res.json());\n  return data;\n  \n}\n\nasync function ForgotPassword(credentials) {\n  const data = await fetch(apiUrl + '/auth/updatePassword', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  }).then((res) => res.json());\n  return data;\n  \n}\n//for verifying accessToken of user \nasync function decryptJWT(accessToken) {\n  const data = await fetch(apiUrl + '/auth/decryptJWT', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({accessToken}),\n  }).then((res) => res.json());\n  return data; \n}\n\n//sends otp for reseting passwords\nasync function sendOTP(email) {\n  var details = {\n      \"email\":email\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n\n  const data = await fetch(apiUrl + '/auth/sendOTP', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formBody,\n  }).then((res) => res.json());\n  return data;\n  \n}\n\n//function for reseting passwords using token\nasync function changePassword(userID, token, newPassword) {\n  var details = {\n      \"newPassword\":newPassword\n    };\n\n    var formBody = [];\n    for (var property in details) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(details[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n\n  const data =  await fetch(apiUrl + '/auth/password-reset/'+userID+\"/\"+token, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formBody,\n  }).then((res) => res.json());\n  return data;\n  \n}\n\n\nexport { RestLogin,decryptJWT, ForgotPassword,sendOTP,changePassword};"]},"metadata":{},"sourceType":"module"}