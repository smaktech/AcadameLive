{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [// TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    }, // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [// too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    }, // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    }, // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    }, // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.*?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      // empty strings for alt or link text\n      match: /\\[(?=\\])/\n    }, {\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\n\nmodule.exports = markdown;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/lowlight/node_modules/highlight.js/lib/languages/markdown.js"],"names":["source","re","concat","args","joined","map","x","join","markdown","hljs","INLINE_HTML","begin","end","subLanguage","relevance","HORIZONTAL_RULE","CODE","className","variants","contains","LIST","excludeEnd","LINK_REFERENCE","returnBegin","excludeBegin","URL_SCHEME","LINK","match","returnEnd","BOLD","ITALIC","push","CONTAINABLE","HEADER","BLOCKQUOTE","name","aliases","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      {\n        begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n      },\n      {\n        begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n      },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      {\n        begin: '`.+?`'\n      },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/\n      },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          {\n            begin: '^[=-]*$'\n          },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"]},"metadata":{},"sourceType":"script"}