{"ast":null,"code":"import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'; //Fetch all course data using offset and limit!\n\nasync function getAllCourse(page, limit) {\n  const queryString = objToQueryString({\n    page: page,\n    limit: limit\n  });\n  var apiLink;\n  if (queryString == null) apiLink = apiUrl + '/course/filterCourse';else apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n} //api function for update a course \n\n\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status, courseImage) {\n  // var details = {\n  //     \"name\": name,\n  //     \"description\": description,\n  //     \"board\": board,\n  //     \"classes\": classes,\n  //     \"subject\": subject,\n  //     \"topic\": topic,\n  //     // \"coursePicture\": coursePicture,\n  //     'status':status\n  // };\n  // var formBody = [];\n  // for (var property in details) {\n  //     var encodedKey = encodeURIComponent(property);\n  //     var encodedValue = encodeURIComponent(details[property]);\n  //     formBody.push(encodedKey + \"=\" + encodedValue);\n  // }\n  // formBody = formBody.join(\"&\");\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"boardID\", boardID);\n\n  if (subBoardID) {\n    formData.append(\"subBoardID\", subBoardID);\n  }\n\n  formData.append(\"classesID\", classesID);\n  formData.append(\"subjectID\", subjectID); // formData.append(\"topicIDs\", topicIDs)\n\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", courseImage);\n  const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n      // 'Content-Type': 'multipart/form-data',\n\n    },\n    // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api function for adding a course \n\n\nasync function createCourse(name, boardID, subBoardID, classesID, subjectID, description, status, image) {\n  const formData = new FormData();\n  formData.append(\"name\", name);\n  formData.append(\"boardID\", boardID);\n\n  if (subBoardID) {\n    formData.append(\"subBoardID\", subBoardID);\n  }\n\n  formData.append(\"classesID\", classesID);\n  formData.append(\"subjectID\", subjectID); // formData.append(\"topicIDs\", topicIDs)\n\n  formData.append(\"description\", description);\n  formData.append(\"status\", status);\n  formData.append(\"image\", image);\n\n  for (var pair of formData.entries()) {\n    console.log(pair[0] + ', ' + pair[1]);\n  }\n\n  const data = await fetch(apiUrl + '/course/createCourse', {\n    method: 'POST',\n    // headers: {\n    //     Accept: 'application/json',\n    //     'Content-Type': 'application/json',\n    //     'Content-Type': 'multipart/form-data',\n    // },\n    // body: JSON.stringify({ name, subBoardID, classesID, boardID, subjectID, description, status }),\n    body: formData\n  }).then(res => res.json());\n  return data;\n} //api to delete the course from the database\n\n\nasync function deleteCourse(courseID) {\n  const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get the details of a particular topic by sending the courdseId\n\n\nasync function getCourseById(courseID) {\n  const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\n  let obj = {\n    boardID: boardID,\n    subjectID: subjectID,\n    searchString: searchString,\n    startDate: startDate,\n    endDate: endDate,\n    sortByDate: sortByDate,\n    status: status\n  };\n  const queryString = objToQueryString(obj);\n  var apiLink;\n\n  if (queryString == null) {\n    apiLink = apiUrl + '/course/filterCourse';\n  } else {\n    apiLink = apiUrl + '/course/filterCourse?' + queryString;\n  }\n\n  console.log(\"test call back\", queryString, obj);\n  const data = await fetch(apiLink, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json' // 'Content-Type': 'application/json',\n\n    }\n  }).then(res => res.json());\n  return data;\n} //api to get all courses of user\n\n\nasync function getAllUserCourses(userID) {\n  const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.json());\n  return data;\n}\n\nexport { getAllCourse, editCourse, deleteCourse, getCourseByFilter, getCourseById, getAllUserCourses, createCourse };","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/api/Courses/Courses.js"],"names":["apiUrl","objToQueryString","getAllCourse","page","limit","queryString","apiLink","data","fetch","method","headers","Accept","then","res","json","editCourse","courseID","name","boardID","subBoardID","classesID","subjectID","description","status","courseImage","formData","FormData","append","body","createCourse","image","pair","entries","console","log","deleteCourse","getCourseById","getCourseByFilter","searchString","startDate","endDate","sortByDate","obj","getAllUserCourses","userID"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,gBAAT,QAAiC,cAAjC,C,CAEA;;AACA,eAAeC,YAAf,CAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AACrC,QAAMC,WAAW,GAAGJ,gBAAgB,CAAC;AACjCE,IAAAA,IAAI,EAAEA,IAD2B;AAEjCC,IAAAA,KAAK,EAAEA;AAF0B,GAAD,CAApC;AAIA,MAAIE,OAAJ;AACA,MAAID,WAAW,IAAI,IAAnB,EACIC,OAAO,GAAGN,MAAM,GAAG,sBAAnB,CADJ,KAGIM,OAAO,GAAGN,MAAM,GAAG,uBAAT,GAAmCK,WAA7C;AACJ,QAAME,IAAI,GAAG,MAAMC,KAAK,CAACF,OAAD,EAAU;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAFqB,GAAV,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH,C,CAED;;;AAEA,eAAeQ,UAAf,CAA0BC,QAA1B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmDC,UAAnD,EAA+DC,SAA/D,EAA0EC,SAA1E,EAAqFC,WAArF,EAAkGC,MAAlG,EAAyGC,WAAzG,EAAsH;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBV,IAAxB;AACAQ,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BT,OAA3B;;AACA,MAAIC,UAAJ,EAAgB;AACZM,IAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BR,UAA9B;AACH;;AACDM,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BP,SAA7B;AACAK,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BN,SAA7B,EA1BkH,CA2BlH;;AACAI,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BL,WAA/B;AACAG,EAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BJ,MAA1B;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,WAAzB;AACA,QAAMjB,IAAI,GAAG,MAAMC,KAAK,CAACR,MAAM,GAAG,qBAAT,GAAiCgB,QAAlC,EAA4C;AAChEP,IAAAA,MAAM,EAAE,OADwD;AAEhEC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH,CAEL;AACA;;AAHK,KAFuD;AAOhE;AACAiB,IAAAA,IAAI,EAACH;AAR2D,GAA5C,CAAL,CAShBb,IATgB,CASVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATE,CAAnB;AAUA,SAAOP,IAAP;AAEH,C,CAED;;;AACA,eAAesB,YAAf,CAA4BZ,IAA5B,EAAkCC,OAAlC,EAA2CC,UAA3C,EAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,WAA7E,EAA0FC,MAA1F,EAAkGO,KAAlG,EAAyG;AACrG,QAAML,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBV,IAAxB;AACAQ,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BT,OAA3B;;AACA,MAAIC,UAAJ,EAAgB;AACZM,IAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BR,UAA9B;AACH;;AACDM,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BP,SAA7B;AACAK,EAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6BN,SAA7B,EARqG,CASrG;;AACAI,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BL,WAA/B;AACAG,EAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BJ,MAA1B;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBG,KAAzB;;AAEA,OAAK,IAAIC,IAAT,IAAiBN,QAAQ,CAACO,OAAT,EAAjB,EAAqC;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV,GAAiBA,IAAI,CAAC,CAAD,CAAjC;AACH;;AAED,QAAMxB,IAAI,GAAG,MAAMC,KAAK,CAACR,MAAM,GAAG,sBAAV,EAAkC;AACtDS,IAAAA,MAAM,EAAE,MAD8C;AAEtD;AACA;AACA;AACA;AACA;AACA;AACAmB,IAAAA,IAAI,EAAEH;AARgD,GAAlC,CAAL,CAUlBb,IAVkB,CAUZC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAVI,CAAnB;AAWA,SAAOP,IAAP;AACH,C,CAED;;;AACA,eAAe4B,YAAf,CAA4BnB,QAA5B,EAAsC;AAClC,QAAMT,IAAI,GAAG,MAAMC,KAAK,CAACR,MAAM,GAAG,2BAAT,GAAuCgB,QAAxC,EAAkD;AACtEP,IAAAA,MAAM,EAAE,QAD8D;AAEtEC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH,CAEL;;AAFK;AAF6D,GAAlD,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAQA,SAAOP,IAAP;AACH,C,CAED;;;AACA,eAAe6B,aAAf,CAA6BpB,QAA7B,EAAuC;AACnC,QAAMT,IAAI,GAAG,MAAMC,KAAK,CAACR,MAAM,GAAG,wBAAT,GAAoCgB,QAArC,EAA+C;AACnEP,IAAAA,MAAM,EAAE,KAD2D;AAEnEC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAF0D,GAA/C,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH;;AAKD,eAAe8B,iBAAf,CAAiCC,YAAjC,EAA+CC,SAA/C,EAA0DC,OAA1D,EAAmEC,UAAnE,EAA+ElB,MAA/E,EAAuFL,OAAvF,EAAgGG,SAAhG,EAA2G;AACvG,MAAIqB,GAAG,GAAG;AACNxB,IAAAA,OAAO,EAAEA,OADH;AAENG,IAAAA,SAAS,EAAEA,SAFL;AAGNiB,IAAAA,YAAY,EAAEA,YAHR;AAINC,IAAAA,SAAS,EAAEA,SAJL;AAKNC,IAAAA,OAAO,EAAEA,OALH;AAMNC,IAAAA,UAAU,EAAEA,UANN;AAONlB,IAAAA,MAAM,EAAEA;AAPF,GAAV;AASA,QAAMlB,WAAW,GAAGJ,gBAAgB,CAACyC,GAAD,CAApC;AACA,MAAIpC,OAAJ;;AACA,MAAID,WAAW,IAAI,IAAnB,EAAyB;AACrBC,IAAAA,OAAO,GAAGN,MAAM,GAAG,sBAAnB;AACH,GAFD,MAGK;AACDM,IAAAA,OAAO,GAAGN,MAAM,GAAG,uBAAT,GAAmCK,WAA7C;AACH;;AAED4B,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B7B,WAA9B,EAA2CqC,GAA3C;AACA,QAAMnC,IAAI,GAAG,MAAMC,KAAK,CAACF,OAAD,EAAU;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH,CAEL;;AAFK;AAFqB,GAAV,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AAEH,C,CAED;;;AACA,eAAeoC,iBAAf,CAAiCC,MAAjC,EAAyC;AACrC,QAAMrC,IAAI,GAAG,MAAMC,KAAK,CAACR,MAAM,GAAG,gCAAT,GAA4C4C,MAA7C,EAAqD;AACzEnC,IAAAA,MAAM,EAAE,KADiE;AAEzEC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX;AAFgE,GAArD,CAAL,CAMhBC,IANgB,CAMVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANE,CAAnB;AAOA,SAAOP,IAAP;AACH;;AAED,SAASL,YAAT,EAAuBa,UAAvB,EAAmCoB,YAAnC,EAAiDE,iBAAjD,EAAoED,aAApE,EAAmFO,iBAAnF,EAAsGd,YAAtG","sourcesContent":["import { apiUrl } from '../../config';\nimport { objToQueryString } from '../../config'\n\n//Fetch all course data using offset and limit!\nasync function getAllCourse(page, limit) {\n    const queryString = objToQueryString({\n        page: page,\n        limit: limit,\n    })\n    var apiLink;\n    if (queryString == null)\n        apiLink = apiUrl + '/course/filterCourse'\n    else\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n//api function for update a course \n\nasync function editCourse(courseID, name, boardID, subBoardID, classesID, subjectID, description, status,courseImage) {\n    // var details = {\n    //     \"name\": name,\n    //     \"description\": description,\n    //     \"board\": board,\n    //     \"classes\": classes,\n    //     \"subject\": subject,\n    //     \"topic\": topic,\n    //     // \"coursePicture\": coursePicture,\n    //     'status':status\n    // };\n\n    // var formBody = [];\n    // for (var property in details) {\n    //     var encodedKey = encodeURIComponent(property);\n    //     var encodedValue = encodeURIComponent(details[property]);\n    //     formBody.push(encodedKey + \"=\" + encodedValue);\n    // }\n    // formBody = formBody.join(\"&\");\n    const formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"boardID\", boardID)\n    if (subBoardID) {\n        formData.append(\"subBoardID\", subBoardID)\n    }\n    formData.append(\"classesID\", classesID)\n    formData.append(\"subjectID\", subjectID)\n    // formData.append(\"topicIDs\", topicIDs)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", courseImage)\n    const data = await fetch(apiUrl + '/course/editCourse/' + courseID, {\n        method: 'PATCH',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n            // 'Content-Type': 'multipart/form-data',\n        },\n        // body: JSON.stringify({ name, subBoardID, boardID, classesID, subjectID, description, status }),\n        body:formData\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api function for adding a course \nasync function createCourse(name, boardID, subBoardID, classesID, subjectID, description, status, image) {\n    const formData = new FormData();\n    formData.append(\"name\", name)\n    formData.append(\"boardID\", boardID)\n    if (subBoardID) {\n        formData.append(\"subBoardID\", subBoardID)\n    }\n    formData.append(\"classesID\", classesID)\n    formData.append(\"subjectID\", subjectID)\n    // formData.append(\"topicIDs\", topicIDs)\n    formData.append(\"description\", description)\n    formData.append(\"status\", status)\n    formData.append(\"image\", image)\n\n    for (var pair of formData.entries()) {\n        console.log(pair[0] + ', ' + pair[1]);\n    }\n\n    const data = await fetch(apiUrl + '/course/createCourse', {\n        method: 'POST',\n        // headers: {\n        //     Accept: 'application/json',\n        //     'Content-Type': 'application/json',\n        //     'Content-Type': 'multipart/form-data',\n        // },\n        // body: JSON.stringify({ name, subBoardID, classesID, boardID, subjectID, description, status }),\n        body: formData\n    })\n    .then((res) => res.json());\n    return data;\n}\n\n//api to delete the course from the database\nasync function deleteCourse(courseID) {\n    const data = await fetch(apiUrl + '/course/deleteCourseById/' + courseID, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n   \n    return data;\n}\n\n//api to get the details of a particular topic by sending the courdseId\nasync function getCourseById(courseID) {\n    const data = await fetch(apiUrl + '/course/getCourseById/' + courseID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\n\n\n\nasync function getCourseByFilter(searchString, startDate, endDate, sortByDate, status, boardID, subjectID) {\n    let obj = {\n        boardID: boardID,\n        subjectID: subjectID,\n        searchString: searchString,\n        startDate: startDate,\n        endDate: endDate,\n        sortByDate: sortByDate,\n        status: status\n    }\n    const queryString = objToQueryString(obj)\n    var apiLink;\n    if (queryString == null) {\n        apiLink = apiUrl + '/course/filterCourse'\n    }\n    else {\n        apiLink = apiUrl + '/course/filterCourse?' + queryString\n    }\n\n    console.log(\"test call back\", queryString, obj)\n    const data = await fetch(apiLink, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            // 'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n\n}\n\n//api to get all courses of user\nasync function getAllUserCourses(userID) {\n    const data = await fetch(apiUrl + '/userCourse/getAllUserCourses/' + userID, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n    return data;\n}\n\nexport { getAllCourse, editCourse, deleteCourse, getCourseByFilter, getCourseById, getAllUserCourses, createCourse }"]},"metadata":{},"sourceType":"module"}