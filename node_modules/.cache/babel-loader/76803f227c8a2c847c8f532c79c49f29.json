{"ast":null,"code":"import _objectSpread from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"D:/Projects/Cdss apps/Final version/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"value\"];import{useState}from'react';import{useSnackbar}from'notistack';import{CopyToClipboard}from'react-copy-to-clipboard';// @mui\nimport{Tooltip,TextField,IconButton,InputAdornment}from'@mui/material';//\nimport Iconify from'./Iconify';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";export default function CopyClipboard(_ref){var value=_ref.value,other=_objectWithoutProperties(_ref,_excluded);var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var _useState=useState({value:value,copied:false}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var handleChange=function handleChange(event){setState({value:event.target.value,copied:false});};var onCopy=function onCopy(){setState(_objectSpread(_objectSpread({},state),{},{copied:true}));if(state.value){enqueueSnackbar('Copied',{variant:'success'});}};return/*#__PURE__*/_jsx(TextField,_objectSpread({fullWidth:true,value:state.value,onChange:handleChange,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(CopyToClipboard,{text:state.value,onCopy:onCopy,children:/*#__PURE__*/_jsx(Tooltip,{title:\"Copy\",children:/*#__PURE__*/_jsx(IconButton,{children:/*#__PURE__*/_jsx(Iconify,{icon:'eva:copy-fill',width:24,height:24})})})})})}},other));}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/components/CopyClipboard.js"],"names":["useState","useSnackbar","CopyToClipboard","Tooltip","TextField","IconButton","InputAdornment","Iconify","CopyClipboard","value","other","enqueueSnackbar","copied","state","setState","handleChange","event","target","onCopy","variant","endAdornment"],"mappings":"2gBAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,OAASC,WAAT,KAA4B,WAA5B,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA;AACA,OAASC,OAAT,CAAkBC,SAAlB,CAA6BC,UAA7B,CAAyCC,cAAzC,KAA+D,eAA/D,CACA;AACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA;2CAMA,cAAe,SAASC,CAAAA,aAAT,MAA4C,IAAnBC,CAAAA,KAAmB,MAAnBA,KAAmB,CAATC,KAAS,0CACzD,iBAA4BT,WAAW,EAAvC,CAAQU,eAAR,cAAQA,eAAR,CACA,cAA0BX,QAAQ,CAAC,CACjCS,KAAK,CAALA,KADiC,CAEjCG,MAAM,CAAE,KAFyB,CAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eAKA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9BF,QAAQ,CAAC,CAAEL,KAAK,CAAEO,KAAK,CAACC,MAAN,CAAaR,KAAtB,CAA6BG,MAAM,CAAE,KAArC,CAAD,CAAR,CACD,CAFD,CAIA,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnBJ,QAAQ,gCAAMD,KAAN,MAAaD,MAAM,CAAE,IAArB,GAAR,CACA,GAAIC,KAAK,CAACJ,KAAV,CAAiB,CACfE,eAAe,CAAC,QAAD,CAAW,CAAEQ,OAAO,CAAE,SAAX,CAAX,CAAf,CACD,CACF,CALD,CAOA,mBACE,KAAC,SAAD,gBACE,SAAS,KADX,CAEE,KAAK,CAAEN,KAAK,CAACJ,KAFf,CAGE,QAAQ,CAAEM,YAHZ,CAIE,UAAU,CAAE,CACVK,YAAY,cACV,KAAC,cAAD,EAAgB,QAAQ,CAAC,KAAzB,uBACE,KAAC,eAAD,EAAiB,IAAI,CAAEP,KAAK,CAACJ,KAA7B,CAAoC,MAAM,CAAES,MAA5C,uBACE,KAAC,OAAD,EAAS,KAAK,CAAC,MAAf,uBACE,KAAC,UAAD,wBACE,KAAC,OAAD,EAAS,IAAI,CAAE,eAAf,CAAgC,KAAK,CAAE,EAAvC,CAA2C,MAAM,CAAE,EAAnD,EADF,EADF,EADF,EADF,EAFQ,CAJd,EAiBMR,KAjBN,EADF,CAqBD","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n// @mui\nimport { Tooltip, TextField, IconButton, InputAdornment } from '@mui/material';\n//\nimport Iconify from './Iconify';\n\n// ----------------------------------------------------------------------\n\nCopyClipboard.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default function CopyClipboard({ value, ...other }) {\n  const { enqueueSnackbar } = useSnackbar();\n  const [state, setState] = useState({\n    value,\n    copied: false,\n  });\n\n  const handleChange = (event) => {\n    setState({ value: event.target.value, copied: false });\n  };\n\n  const onCopy = () => {\n    setState({ ...state, copied: true });\n    if (state.value) {\n      enqueueSnackbar('Copied', { variant: 'success' });\n    }\n  };\n\n  return (\n    <TextField\n      fullWidth\n      value={state.value}\n      onChange={handleChange}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CopyToClipboard text={state.value} onCopy={onCopy}>\n              <Tooltip title=\"Copy\">\n                <IconButton>\n                  <Iconify icon={'eva:copy-fill'} width={24} height={24} />\n                </IconButton>\n              </Tooltip>\n            </CopyToClipboard>\n          </InputAdornment>\n        ),\n      }}\n      {...other}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}