{"ast":null,"code":"/**\n * @typedef {import('lowlight').Root} LowlightRoot\n * @typedef {import('lowlight/lib/core.js').HighlightSyntax} HighlightSyntax\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n *   Configuration.\n * @property {string} [prefix='hljs-']\n *   Prefix to use before classes.\n * @property {boolean|string[]} [subset]\n *   Scope of languages to check when auto-detecting (default: all languages).\n *   Pass `false` to not highlight code without language classes.\n * @property {boolean} [ignoreMissing=false]\n *   Swallow errors for missing languages.\n *   By default, unregistered syntaxes throw an error when they are used.\n *   Pass `true` to swallow those errors and thus ignore code with unknown code\n *   languages.\n * @property {string[]} [plainText=[]]\n *   List of plain-text languages.\n *   Pass any languages you would like to be kept as plain-text instead of\n *   getting highlighted.\n * @property {Record<string, string|string[]>} [aliases={}]\n *   Register more aliases.\n *   Passed to `lowlight.registerAlias`.\n * @property {Record<string, HighlightSyntax>} [languages={}]\n *   Register more languages.\n *   Each key/value pair passed as arguments to `lowlight.registerLanguage`.\n */\nimport { lowlight } from 'lowlight';\nimport { toText } from 'hast-util-to-text';\nimport { visit } from 'unist-util-visit';\nvar own = {}.hasOwnProperty;\n/**\n * Plugin to highlight the syntax of code with lowlight (`highlight.js`).\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root>}\n */\n\nexport default function rehypeHighlight() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var aliases = options.aliases,\n      languages = options.languages,\n      prefix = options.prefix,\n      plainText = options.plainText,\n      ignoreMissing = options.ignoreMissing,\n      subset = options.subset;\n  var name = 'hljs';\n\n  if (aliases) {\n    lowlight.registerAlias(aliases);\n  }\n\n  if (languages) {\n    /** @type {string} */\n    var key;\n\n    for (key in languages) {\n      if (own.call(languages, key)) {\n        lowlight.registerLanguage(key, languages[key]);\n      }\n    }\n  }\n\n  if (prefix) {\n    var pos = prefix.indexOf('-');\n    name = pos > -1 ? prefix.slice(0, pos) : prefix;\n  }\n\n  return function (tree) {\n    // eslint-disable-next-line complexity\n    visit(tree, 'element', function (node, _, givenParent) {\n      var parent =\n      /** @type {Node?} */\n      givenParent;\n\n      if (!parent || !('tagName' in parent) || parent.tagName !== 'pre' || node.tagName !== 'code' || !node.properties) {\n        return;\n      }\n\n      var lang = language(node);\n\n      if (lang === false || !lang && subset === false || lang && plainText && plainText.includes(lang)) {\n        return;\n      }\n\n      if (!Array.isArray(node.properties.className)) {\n        node.properties.className = [];\n      }\n\n      if (!node.properties.className.includes(name)) {\n        node.properties.className.unshift(name);\n      }\n      /** @type {LowlightRoot} */\n\n\n      var result;\n\n      try {\n        result = lang ? lowlight.highlight(lang, toText(parent), {\n          prefix: prefix\n        }) : // @ts-expect-error: we checked that `subset` is not a boolean.\n        lowlight.highlightAuto(toText(parent), {\n          prefix: prefix,\n          subset: subset\n        });\n      } catch (error) {\n        var exception =\n        /** @type {Error} */\n        error;\n\n        if (!ignoreMissing || !/Unknown language/.test(exception.message)) {\n          throw error;\n        }\n\n        return;\n      }\n\n      if (!lang && result.data.language) {\n        node.properties.className.push('language-' + result.data.language);\n      }\n\n      if (Array.isArray(result.children) && result.children.length > 0) {\n        node.children = result.children;\n      }\n    });\n  };\n}\n/**\n * Get the programming language of `node`.\n *\n * @param {Element} node\n * @returns {false|string|undefined}\n */\n\nfunction language(node) {\n  var className = node.properties && node.properties.className;\n  var index = -1;\n\n  if (!Array.isArray(className)) {\n    return;\n  }\n\n  while (++index < className.length) {\n    var value = String(className[index]);\n\n    if (value === 'no-highlight' || value === 'nohighlight') {\n      return false;\n    }\n\n    if (value.slice(0, 5) === 'lang-') {\n      return value.slice(5);\n    }\n\n    if (value.slice(0, 9) === 'language-') {\n      return value.slice(9);\n    }\n  }\n}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/rehype-highlight/index.js"],"names":["lowlight","toText","visit","own","hasOwnProperty","rehypeHighlight","options","aliases","languages","prefix","plainText","ignoreMissing","subset","name","registerAlias","key","call","registerLanguage","pos","indexOf","slice","tree","node","_","givenParent","parent","tagName","properties","lang","language","includes","Array","isArray","className","unshift","result","highlight","highlightAuto","error","exception","test","message","data","push","children","length","index","value","String"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,QAAR,QAAuB,UAAvB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AAEA,IAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,GAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACpD,MAAOC,OAAP,GAAuED,OAAvE,CAAOC,OAAP;AAAA,MAAgBC,SAAhB,GAAuEF,OAAvE,CAAgBE,SAAhB;AAAA,MAA2BC,MAA3B,GAAuEH,OAAvE,CAA2BG,MAA3B;AAAA,MAAmCC,SAAnC,GAAuEJ,OAAvE,CAAmCI,SAAnC;AAAA,MAA8CC,aAA9C,GAAuEL,OAAvE,CAA8CK,aAA9C;AAAA,MAA6DC,MAA7D,GAAuEN,OAAvE,CAA6DM,MAA7D;AACA,MAAIC,IAAI,GAAG,MAAX;;AAEA,MAAIN,OAAJ,EAAa;AACXP,IAAAA,QAAQ,CAACc,aAAT,CAAuBP,OAAvB;AACD;;AAED,MAAIC,SAAJ,EAAe;AACb;AACA,QAAIO,GAAJ;;AAEA,SAAKA,GAAL,IAAYP,SAAZ,EAAuB;AACrB,UAAIL,GAAG,CAACa,IAAJ,CAASR,SAAT,EAAoBO,GAApB,CAAJ,EAA8B;AAC5Bf,QAAAA,QAAQ,CAACiB,gBAAT,CAA0BF,GAA1B,EAA+BP,SAAS,CAACO,GAAD,CAAxC;AACD;AACF;AACF;;AAED,MAAIN,MAAJ,EAAY;AACV,QAAMS,GAAG,GAAGT,MAAM,CAACU,OAAP,CAAe,GAAf,CAAZ;AACAN,IAAAA,IAAI,GAAGK,GAAG,GAAG,CAAC,CAAP,GAAWT,MAAM,CAACW,KAAP,CAAa,CAAb,EAAgBF,GAAhB,CAAX,GAAkCT,MAAzC;AACD;;AAED,SAAO,UAACY,IAAD,EAAU;AACf;AACAnB,IAAAA,KAAK,CAACmB,IAAD,EAAO,SAAP,EAAkB,UAACC,IAAD,EAAOC,CAAP,EAAUC,WAAV,EAA0B;AAC/C,UAAMC,MAAM;AAAG;AAAsBD,MAAAA,WAArC;;AAEA,UACE,CAACC,MAAD,IACA,EAAE,aAAaA,MAAf,CADA,IAEAA,MAAM,CAACC,OAAP,KAAmB,KAFnB,IAGAJ,IAAI,CAACI,OAAL,KAAiB,MAHjB,IAIA,CAACJ,IAAI,CAACK,UALR,EAME;AACA;AACD;;AAED,UAAMC,IAAI,GAAGC,QAAQ,CAACP,IAAD,CAArB;;AAEA,UACEM,IAAI,KAAK,KAAT,IACC,CAACA,IAAD,IAAShB,MAAM,KAAK,KADrB,IAECgB,IAAI,IAAIlB,SAAR,IAAqBA,SAAS,CAACoB,QAAV,CAAmBF,IAAnB,CAHxB,EAIE;AACA;AACD;;AAED,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACK,UAAL,CAAgBM,SAA9B,CAAL,EAA+C;AAC7CX,QAAAA,IAAI,CAACK,UAAL,CAAgBM,SAAhB,GAA4B,EAA5B;AACD;;AAED,UAAI,CAACX,IAAI,CAACK,UAAL,CAAgBM,SAAhB,CAA0BH,QAA1B,CAAmCjB,IAAnC,CAAL,EAA+C;AAC7CS,QAAAA,IAAI,CAACK,UAAL,CAAgBM,SAAhB,CAA0BC,OAA1B,CAAkCrB,IAAlC;AACD;AAED;;;AACA,UAAIsB,MAAJ;;AAEA,UAAI;AACFA,QAAAA,MAAM,GAAGP,IAAI,GACT5B,QAAQ,CAACoC,SAAT,CAAmBR,IAAnB,EAAyB3B,MAAM,CAACwB,MAAD,CAA/B,EAAyC;AAAChB,UAAAA,MAAM,EAANA;AAAD,SAAzC,CADS,GAET;AACAT,QAAAA,QAAQ,CAACqC,aAAT,CAAuBpC,MAAM,CAACwB,MAAD,CAA7B,EAAuC;AAAChB,UAAAA,MAAM,EAANA,MAAD;AAASG,UAAAA,MAAM,EAANA;AAAT,SAAvC,CAHJ;AAID,OALD,CAKE,OAAO0B,KAAP,EAAc;AACd,YAAMC,SAAS;AAAG;AAAsBD,QAAAA,KAAxC;;AACA,YAAI,CAAC3B,aAAD,IAAkB,CAAC,mBAAmB6B,IAAnB,CAAwBD,SAAS,CAACE,OAAlC,CAAvB,EAAmE;AACjE,gBAAMH,KAAN;AACD;;AAED;AACD;;AAED,UAAI,CAACV,IAAD,IAASO,MAAM,CAACO,IAAP,CAAYb,QAAzB,EAAmC;AACjCP,QAAAA,IAAI,CAACK,UAAL,CAAgBM,SAAhB,CAA0BU,IAA1B,CAA+B,cAAcR,MAAM,CAACO,IAAP,CAAYb,QAAzD;AACD;;AAED,UAAIE,KAAK,CAACC,OAAN,CAAcG,MAAM,CAACS,QAArB,KAAkCT,MAAM,CAACS,QAAP,CAAgBC,MAAhB,GAAyB,CAA/D,EAAkE;AAChEvB,QAAAA,IAAI,CAACsB,QAAL,GAAgBT,MAAM,CAACS,QAAvB;AACD;AACF,KAvDI,CAAL;AAwDD,GA1DD;AA2DD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAASf,QAAT,CAAkBP,IAAlB,EAAwB;AACtB,MAAMW,SAAS,GAAGX,IAAI,CAACK,UAAL,IAAmBL,IAAI,CAACK,UAAL,CAAgBM,SAArD;AACA,MAAIa,KAAK,GAAG,CAAC,CAAb;;AAEA,MAAI,CAACf,KAAK,CAACC,OAAN,CAAcC,SAAd,CAAL,EAA+B;AAC7B;AACD;;AAED,SAAO,EAAEa,KAAF,GAAUb,SAAS,CAACY,MAA3B,EAAmC;AACjC,QAAME,KAAK,GAAGC,MAAM,CAACf,SAAS,CAACa,KAAD,CAAV,CAApB;;AAEA,QAAIC,KAAK,KAAK,cAAV,IAA4BA,KAAK,KAAK,aAA1C,EAAyD;AACvD,aAAO,KAAP;AACD;;AAED,QAAIA,KAAK,CAAC3B,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,OAA1B,EAAmC;AACjC,aAAO2B,KAAK,CAAC3B,KAAN,CAAY,CAAZ,CAAP;AACD;;AAED,QAAI2B,KAAK,CAAC3B,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,WAA1B,EAAuC;AACrC,aAAO2B,KAAK,CAAC3B,KAAN,CAAY,CAAZ,CAAP;AACD;AACF;AACF","sourcesContent":["/**\n * @typedef {import('lowlight').Root} LowlightRoot\n * @typedef {import('lowlight/lib/core.js').HighlightSyntax} HighlightSyntax\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n *   Configuration.\n * @property {string} [prefix='hljs-']\n *   Prefix to use before classes.\n * @property {boolean|string[]} [subset]\n *   Scope of languages to check when auto-detecting (default: all languages).\n *   Pass `false` to not highlight code without language classes.\n * @property {boolean} [ignoreMissing=false]\n *   Swallow errors for missing languages.\n *   By default, unregistered syntaxes throw an error when they are used.\n *   Pass `true` to swallow those errors and thus ignore code with unknown code\n *   languages.\n * @property {string[]} [plainText=[]]\n *   List of plain-text languages.\n *   Pass any languages you would like to be kept as plain-text instead of\n *   getting highlighted.\n * @property {Record<string, string|string[]>} [aliases={}]\n *   Register more aliases.\n *   Passed to `lowlight.registerAlias`.\n * @property {Record<string, HighlightSyntax>} [languages={}]\n *   Register more languages.\n *   Each key/value pair passed as arguments to `lowlight.registerLanguage`.\n */\n\nimport {lowlight} from 'lowlight'\nimport {toText} from 'hast-util-to-text'\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Plugin to highlight the syntax of code with lowlight (`highlight.js`).\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root>}\n */\nexport default function rehypeHighlight(options = {}) {\n  const {aliases, languages, prefix, plainText, ignoreMissing, subset} = options\n  let name = 'hljs'\n\n  if (aliases) {\n    lowlight.registerAlias(aliases)\n  }\n\n  if (languages) {\n    /** @type {string} */\n    let key\n\n    for (key in languages) {\n      if (own.call(languages, key)) {\n        lowlight.registerLanguage(key, languages[key])\n      }\n    }\n  }\n\n  if (prefix) {\n    const pos = prefix.indexOf('-')\n    name = pos > -1 ? prefix.slice(0, pos) : prefix\n  }\n\n  return (tree) => {\n    // eslint-disable-next-line complexity\n    visit(tree, 'element', (node, _, givenParent) => {\n      const parent = /** @type {Node?} */ (givenParent)\n\n      if (\n        !parent ||\n        !('tagName' in parent) ||\n        parent.tagName !== 'pre' ||\n        node.tagName !== 'code' ||\n        !node.properties\n      ) {\n        return\n      }\n\n      const lang = language(node)\n\n      if (\n        lang === false ||\n        (!lang && subset === false) ||\n        (lang && plainText && plainText.includes(lang))\n      ) {\n        return\n      }\n\n      if (!Array.isArray(node.properties.className)) {\n        node.properties.className = []\n      }\n\n      if (!node.properties.className.includes(name)) {\n        node.properties.className.unshift(name)\n      }\n\n      /** @type {LowlightRoot} */\n      let result\n\n      try {\n        result = lang\n          ? lowlight.highlight(lang, toText(parent), {prefix})\n          : // @ts-expect-error: we checked that `subset` is not a boolean.\n            lowlight.highlightAuto(toText(parent), {prefix, subset})\n      } catch (error) {\n        const exception = /** @type {Error} */ (error)\n        if (!ignoreMissing || !/Unknown language/.test(exception.message)) {\n          throw error\n        }\n\n        return\n      }\n\n      if (!lang && result.data.language) {\n        node.properties.className.push('language-' + result.data.language)\n      }\n\n      if (Array.isArray(result.children) && result.children.length > 0) {\n        node.children = result.children\n      }\n    })\n  }\n}\n\n/**\n * Get the programming language of `node`.\n *\n * @param {Element} node\n * @returns {false|string|undefined}\n */\nfunction language(node) {\n  const className = node.properties && node.properties.className\n  let index = -1\n\n  if (!Array.isArray(className)) {\n    return\n  }\n\n  while (++index < className.length) {\n    const value = String(className[index])\n\n    if (value === 'no-highlight' || value === 'nohighlight') {\n      return false\n    }\n\n    if (value.slice(0, 5) === 'lang-') {\n      return value.slice(5)\n    }\n\n    if (value.slice(0, 9) === 'language-') {\n      return value.slice(9)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}