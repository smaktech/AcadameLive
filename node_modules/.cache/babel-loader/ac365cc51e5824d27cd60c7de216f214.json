{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\map\\\\MapClusters.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport MapGL, { Source, Layer } from 'react-map-gl'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst clusterLayer = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n    'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n  }\n};\nconst clusterCountLayer = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  }\n};\nconst unclusteredPointLayer = {\n  id: 'unclustered-point',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['!', ['has', 'point_count']],\n  paint: {\n    'circle-color': '#11b4da',\n    'circle-radius': 4,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#fff'\n  }\n}; // ----------------------------------------------------------------------\n\nexport default function MapClusters(_ref) {\n  _s();\n\n  let { ...other\n  } = _ref;\n  const mapRef = useRef(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  });\n\n  const onClick = event => {\n    const feature = event.features[0];\n    const clusterId = feature && feature.properties.cluster_id;\n    const mapboxSource = mapRef.current.getMap().getSource('earthquakes');\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) {\n        return;\n      }\n\n      setViewport({ ...viewport,\n        longitude: feature && feature.geometry.coordinates[0],\n        latitude: feature && feature.geometry.coordinates[1],\n        // eslint-disable-next-line no-restricted-globals\n        zoom: isNaN(zoom) ? 3 : zoom,\n        transitionDuration: 500\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n      onViewportChange: setViewport,\n      interactiveLayerIds: [clusterLayer.id],\n      onClick: onClick,\n      ref: mapRef,\n      ...other,\n      children: /*#__PURE__*/_jsxDEV(Source, {\n        id: \"earthquakes\",\n        type: \"geojson\",\n        data: \"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\",\n        cluster: true,\n        clusterMaxZoom: 14,\n        clusterRadius: 50,\n        children: [/*#__PURE__*/_jsxDEV(Layer, { ...clusterLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Layer, { ...clusterCountLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Layer, { ...unclusteredPointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MapClusters, \"WfaBsny368ywYYkZ3o1VmN1rZLA=\");\n\n_c = MapClusters;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapClusters\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/map/MapClusters.js"],"names":["useState","useRef","MapGL","Source","Layer","clusterLayer","id","type","source","filter","paint","clusterCountLayer","layout","unclusteredPointLayer","MapClusters","other","mapRef","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","onClick","event","feature","features","clusterId","properties","cluster_id","mapboxSource","current","getMap","getSource","getClusterExpansionZoom","err","geometry","coordinates","isNaN","transitionDuration"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\nimport MapGL, { Source, Layer } from 'react-map-gl';\n\n// ----------------------------------------------------------------------\n\nconst clusterLayer = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n    'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n  }\n};\n\nconst clusterCountLayer = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  }\n};\n\nconst unclusteredPointLayer = {\n  id: 'unclustered-point',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['!', ['has', 'point_count']],\n  paint: {\n    'circle-color': '#11b4da',\n    'circle-radius': 4,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#fff'\n  }\n};\n\n// ----------------------------------------------------------------------\n\nexport default function MapClusters({ ...other }) {\n  const mapRef = useRef(null);\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  });\n\n  const onClick = (event) => {\n    const feature = event.features[0];\n    const clusterId = feature && feature.properties.cluster_id;\n    const mapboxSource = mapRef.current.getMap().getSource('earthquakes');\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) {\n        return;\n      }\n      setViewport({\n        ...viewport,\n        longitude: feature && feature.geometry.coordinates[0],\n        latitude: feature && feature.geometry.coordinates[1],\n        // eslint-disable-next-line no-restricted-globals\n        zoom: isNaN(zoom) ? 3 : zoom,\n        transitionDuration: 500\n      });\n    });\n  };\n\n  return (\n    <>\n      <MapGL\n        {...viewport}\n        onViewportChange={setViewport}\n        interactiveLayerIds={[clusterLayer.id]}\n        onClick={onClick}\n        ref={mapRef}\n        {...other}\n      >\n        <Source\n          id=\"earthquakes\"\n          type=\"geojson\"\n          data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n          cluster\n          clusterMaxZoom={14}\n          clusterRadius={50}\n        >\n          <Layer {...clusterLayer} />\n          <Layer {...clusterCountLayer} />\n          <Layer {...unclusteredPointLayer} />\n        </Source>\n      </MapGL>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}