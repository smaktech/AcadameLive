{"ast":null,"code":"import jwtDecode from'jwt-decode';import{verify,sign}from'jsonwebtoken';//\nimport axios from'./axios';// ----------------------------------------------------------------------\nvar isValidToken=function isValidToken(accessToken){if(!accessToken){return false;}var decoded=jwtDecode(accessToken);var currentTime=Date.now()/1000;return decoded.exp>currentTime;};//  const handleTokenExpired = (exp) => {\n//   let expiredTimer;\n//   window.clearTimeout(expiredTimer);\n//   const currentTime = Date.now();\n//   const timeLeft = exp * 1000 - currentTime;\n//   console.log(timeLeft);\n//   expiredTimer = window.setTimeout(() => {\n//     console.log('expired');\n//     // You can do what ever you want here, like show a notification\n//   }, timeLeft);\n// };\nvar setSession=function setSession(accessToken){if(accessToken){localStorage.setItem('accessToken',accessToken);axios.defaults.headers.common.Authorization=\"Bearer \".concat(accessToken);// This function below will handle when token is expired\n// const { exp } = jwtDecode(accessToken);\n// handleTokenExpired(exp);\n}else{localStorage.removeItem('accessToken');delete axios.defaults.headers.common.Authorization;}};export{isValidToken,setSession,verify,sign};","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/utils/jwt.js"],"names":["jwtDecode","verify","sign","axios","isValidToken","accessToken","decoded","currentTime","Date","now","exp","setSession","localStorage","setItem","defaults","headers","common","Authorization","removeItem"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,OAASC,MAAT,CAAiBC,IAAjB,KAA6B,cAA7B,CACA;AACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CAEA;AAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,WAAD,CAAiB,CACpC,GAAI,CAACA,WAAL,CAAkB,CAChB,MAAO,MAAP,CACD,CAED,GAAMC,CAAAA,OAAO,CAAGN,SAAS,CAACK,WAAD,CAAzB,CACA,GAAME,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,GAAa,IAAjC,CAEA,MAAOH,CAAAA,OAAO,CAACI,GAAR,CAAcH,WAArB,CACD,CATD,CAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACN,WAAD,CAAiB,CAClC,GAAIA,WAAJ,CAAiB,CACfO,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoCR,WAApC,EACAF,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,kBAAwDZ,WAAxD,EACA;AACA;AACA;AACD,CAND,IAMO,CACLO,YAAY,CAACM,UAAb,CAAwB,aAAxB,EACA,MAAOf,CAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAArC,CACD,CACF,CAXD,CAaA,OAASb,YAAT,CAAuBO,UAAvB,CAAmCV,MAAnC,CAA2CC,IAA3C","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { verify, sign } from 'jsonwebtoken';\n//\nimport axios from './axios';\n\n// ----------------------------------------------------------------------\n\nconst isValidToken = (accessToken) => {\n  if (!accessToken) {\n    return false;\n  }\n\n  const decoded = jwtDecode(accessToken);\n  const currentTime = Date.now() / 1000;\n\n  return decoded.exp > currentTime;\n};\n\n//  const handleTokenExpired = (exp) => {\n//   let expiredTimer;\n\n//   window.clearTimeout(expiredTimer);\n//   const currentTime = Date.now();\n//   const timeLeft = exp * 1000 - currentTime;\n//   console.log(timeLeft);\n//   expiredTimer = window.setTimeout(() => {\n//     console.log('expired');\n//     // You can do what ever you want here, like show a notification\n//   }, timeLeft);\n// };\n\nconst setSession = (accessToken) => {\n  if (accessToken) {\n    localStorage.setItem('accessToken', accessToken);\n    axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\n    // This function below will handle when token is expired\n    // const { exp } = jwtDecode(accessToken);\n    // handleTokenExpired(exp);\n  } else {\n    localStorage.removeItem('accessToken');\n    delete axios.defaults.headers.common.Authorization;\n  }\n};\n\nexport { isValidToken, setSession, verify, sign };\n"]},"metadata":{},"sourceType":"module"}