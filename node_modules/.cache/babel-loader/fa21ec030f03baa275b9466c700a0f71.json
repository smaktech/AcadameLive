{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Cdss apps\\\\Final version\\\\admin\\\\src\\\\sections\\\\@dashboard\\\\chat\\\\ChatConversationItem.js\";\nimport { last } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNowStrict } from 'date-fns'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@mui/material'; //\n\nimport BadgeStatus from '../../../components/BadgeStatus'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AVATAR_SIZE = 48;\nconst AVATAR_SIZE_GROUP = 32;\nconst RootStyle = styled(ListItemButton)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    padding: theme.spacing(1.5, 3),\n    transition: theme.transitions.create('all')\n  };\n});\nconst AvatarWrapperStyle = styled('div')({\n  position: 'relative',\n  width: AVATAR_SIZE,\n  height: AVATAR_SIZE,\n  '& .MuiAvatar-img': {\n    borderRadius: '50%'\n  },\n  '& .MuiAvatar-root': {\n    width: '100%',\n    height: '100%'\n  }\n}); // ----------------------------------------------------------------------\n\nconst getDetails = (conversation, currentUserId) => {\n  const otherParticipants = conversation.participants.filter(participant => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nChatConversationItem.propTypes = {\n  isSelected: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  isOpenSidebar: PropTypes.bool,\n  onSelectConversation: PropTypes.func\n};\nexport default function ChatConversationItem(_ref2) {\n  let {\n    isSelected,\n    conversation,\n    isOpenSidebar,\n    onSelectConversation\n  } = _ref2;\n  const details = getDetails(conversation, '8864c717-587d-472a-929a-8e5f298024da-0');\n  const displayLastActivity = last(conversation.messages).createdAt;\n  const isGroup = details.otherParticipants.length > 1;\n  const isUnread = conversation.unreadCount > 0;\n  const isOnlineGroup = isGroup && details.otherParticipants.map(item => item.status).includes('online');\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    onClick: onSelectConversation,\n    sx: { ...(isSelected && {\n        bgcolor: 'action.selected'\n      })\n    },\n    children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: { ...(isGroup && {\n            position: 'relative',\n            width: AVATAR_SIZE,\n            height: AVATAR_SIZE,\n            '& .avatarWrapper': {\n              position: 'absolute',\n              width: AVATAR_SIZE_GROUP,\n              height: AVATAR_SIZE_GROUP,\n              '&:nth-of-type(1)': {\n                left: 0,\n                zIndex: 9,\n                bottom: 2,\n                '& .MuiAvatar-root': {\n                  border: theme => `solid 2px ${theme.palette.background.paper}`\n                }\n              },\n              '&:nth-of-type(2)': {\n                top: 2,\n                right: 0\n              }\n            }\n          })\n        },\n        children: [details.otherParticipants.slice(0, 2).map(participant => /*#__PURE__*/_jsxDEV(AvatarWrapperStyle, {\n          className: \"avatarWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            alt: participant.name,\n            src: participant.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), !isGroup && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n            status: participant.status,\n            sx: {\n              right: 2,\n              bottom: 2,\n              position: 'absolute'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, participant.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)), isOnlineGroup && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n          status: \"online\",\n          sx: {\n            right: 2,\n            bottom: 2,\n            position: 'absolute'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), isOpenSidebar && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: details.displayNames,\n        primaryTypographyProps: {\n          noWrap: true,\n          variant: 'subtitle2'\n        },\n        secondary: details.displayText,\n        secondaryTypographyProps: {\n          noWrap: true,\n          variant: isUnread ? 'subtitle2' : 'body2',\n          color: isUnread ? 'textPrimary' : 'textSecondary'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          ml: 2,\n          height: 44,\n          display: 'flex',\n          alignItems: 'flex-end',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 1.25,\n            fontSize: 12,\n            lineHeight: '22px',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled'\n          },\n          children: formatDistanceToNowStrict(new Date(displayLastActivity), {\n            addSuffix: false\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), isUnread && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n          status: \"unread\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c = ChatConversationItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatConversationItem\");","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/sections/@dashboard/chat/ChatConversationItem.js"],"names":["last","PropTypes","formatDistanceToNowStrict","styled","Box","Avatar","ListItemText","ListItemAvatar","ListItemButton","BadgeStatus","AVATAR_SIZE","AVATAR_SIZE_GROUP","RootStyle","theme","padding","spacing","transition","transitions","create","AvatarWrapperStyle","position","width","height","borderRadius","getDetails","conversation","currentUserId","otherParticipants","participants","filter","participant","id","displayNames","reduce","names","name","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","ChatConversationItem","propTypes","isSelected","bool","object","isRequired","isOpenSidebar","onSelectConversation","func","details","displayLastActivity","createdAt","isGroup","isUnread","unreadCount","isOnlineGroup","map","item","status","includes","bgcolor","left","zIndex","bottom","border","palette","background","paper","top","right","slice","avatar","noWrap","variant","color","ml","display","alignItems","flexDirection","mb","fontSize","lineHeight","whiteSpace","Date","addSuffix"],"mappings":"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","sourcesContent":["import { last } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNowStrict } from 'date-fns';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@mui/material';\n//\nimport BadgeStatus from '../../../components/BadgeStatus';\n\n// ----------------------------------------------------------------------\n\nconst AVATAR_SIZE = 48;\nconst AVATAR_SIZE_GROUP = 32;\n\nconst RootStyle = styled(ListItemButton)(({ theme }) => ({\n  padding: theme.spacing(1.5, 3),\n  transition: theme.transitions.create('all'),\n}));\n\nconst AvatarWrapperStyle = styled('div')({\n  position: 'relative',\n  width: AVATAR_SIZE,\n  height: AVATAR_SIZE,\n  '& .MuiAvatar-img': { borderRadius: '50%' },\n  '& .MuiAvatar-root': { width: '100%', height: '100%' },\n});\n\n// ----------------------------------------------------------------------\n\nconst getDetails = (conversation, currentUserId) => {\n  const otherParticipants = conversation.participants.filter((participant) => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n  return { otherParticipants, displayNames, displayText };\n};\n\nChatConversationItem.propTypes = {\n  isSelected: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  isOpenSidebar: PropTypes.bool,\n  onSelectConversation: PropTypes.func,\n};\n\nexport default function ChatConversationItem({ isSelected, conversation, isOpenSidebar, onSelectConversation }) {\n  const details = getDetails(conversation, '8864c717-587d-472a-929a-8e5f298024da-0');\n\n  const displayLastActivity = last(conversation.messages).createdAt;\n  const isGroup = details.otherParticipants.length > 1;\n  const isUnread = conversation.unreadCount > 0;\n  const isOnlineGroup = isGroup && details.otherParticipants.map((item) => item.status).includes('online');\n\n  return (\n    <RootStyle\n      onClick={onSelectConversation}\n      sx={{\n        ...(isSelected && { bgcolor: 'action.selected' }),\n      }}\n    >\n      <ListItemAvatar>\n        <Box\n          sx={{\n            ...(isGroup && {\n              position: 'relative',\n              width: AVATAR_SIZE,\n              height: AVATAR_SIZE,\n              '& .avatarWrapper': {\n                position: 'absolute',\n                width: AVATAR_SIZE_GROUP,\n                height: AVATAR_SIZE_GROUP,\n                '&:nth-of-type(1)': {\n                  left: 0,\n                  zIndex: 9,\n                  bottom: 2,\n                  '& .MuiAvatar-root': {\n                    border: (theme) => `solid 2px ${theme.palette.background.paper}`,\n                  },\n                },\n                '&:nth-of-type(2)': { top: 2, right: 0 },\n              },\n            }),\n          }}\n        >\n          {details.otherParticipants.slice(0, 2).map((participant) => (\n            <AvatarWrapperStyle className=\"avatarWrapper\" key={participant.id}>\n              <Avatar alt={participant.name} src={participant.avatar} />\n              {!isGroup && (\n                <BadgeStatus status={participant.status} sx={{ right: 2, bottom: 2, position: 'absolute' }} />\n              )}\n            </AvatarWrapperStyle>\n          ))}\n\n          {isOnlineGroup && <BadgeStatus status=\"online\" sx={{ right: 2, bottom: 2, position: 'absolute' }} />}\n        </Box>\n      </ListItemAvatar>\n\n      {isOpenSidebar && (\n        <>\n          <ListItemText\n            primary={details.displayNames}\n            primaryTypographyProps={{\n              noWrap: true,\n              variant: 'subtitle2',\n            }}\n            secondary={details.displayText}\n            secondaryTypographyProps={{\n              noWrap: true,\n              variant: isUnread ? 'subtitle2' : 'body2',\n              color: isUnread ? 'textPrimary' : 'textSecondary',\n            }}\n          />\n\n          <Box\n            sx={{\n              ml: 2,\n              height: 44,\n              display: 'flex',\n              alignItems: 'flex-end',\n              flexDirection: 'column',\n            }}\n          >\n            <Box\n              sx={{\n                mb: 1.25,\n                fontSize: 12,\n                lineHeight: '22px',\n                whiteSpace: 'nowrap',\n                color: 'text.disabled',\n              }}\n            >\n              {formatDistanceToNowStrict(new Date(displayLastActivity), {\n                addSuffix: false,\n              })}\n            </Box>\n            {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />}\n          </Box>\n        </>\n      )}\n    </RootStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}