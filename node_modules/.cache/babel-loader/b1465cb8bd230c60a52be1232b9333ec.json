{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // utils\n\nimport axios from '../../utils/axios'; //\n\nimport { dispatch } from '../store'; // ----------------------------------------------------------------------\n\nconst initialState = {\n  isLoading: false,\n  error: null,\n  posts: [],\n  post: null,\n  recentPosts: [],\n  hasMore: true,\n  index: 0,\n  step: 11\n};\nconst slice = createSlice({\n  name: 'blog',\n  initialState,\n  reducers: {\n    // START LOADING\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    // HAS ERROR\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // GET POSTS\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n\n    // GET POST INFINITE\n    getPostsInitial(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n\n    getMorePosts(state) {\n      const setIndex = state.index + state.step;\n      state.index = setIndex;\n    },\n\n    noHasMore(state) {\n      state.hasMore = false;\n    },\n\n    // GET POST\n    getPostSuccess(state, action) {\n      state.isLoading = false;\n      state.post = action.payload;\n    },\n\n    // GET RECENT POST\n    getRecentPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.recentPosts = action.payload;\n    }\n\n  }\n}); // Reducer\n\nexport default slice.reducer; // Actions\n\nexport const {\n  getMorePosts\n} = slice.actions; // ----------------------------------------------------------------------\n\nexport function getAllPosts() {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/blog/posts/all');\n      dispatch(slice.actions.getPostsSuccess(response.data.posts));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function getPostsInitial(index, step) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/blog/posts', {\n        params: {\n          index,\n          step\n        }\n      });\n      const results = response.data.results.length;\n      const {\n        maxLength\n      } = response.data;\n      dispatch(slice.actions.getPostsInitial(response.data.results));\n\n      if (results >= maxLength) {\n        dispatch(slice.actions.noHasMore());\n      }\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function getPost(title) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/blog/post', {\n        params: {\n          title\n        }\n      });\n      dispatch(slice.actions.getPostSuccess(response.data.post));\n    } catch (error) {\n      console.error(error);\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function getRecentPosts(title) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/blog/posts/recent', {\n        params: {\n          title\n        }\n      });\n      dispatch(slice.actions.getRecentPostsSuccess(response.data.recentPosts));\n    } catch (error) {\n      console.error(error);\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/src/redux/slices/blog.js"],"names":["createSlice","axios","dispatch","initialState","isLoading","error","posts","post","recentPosts","hasMore","index","step","slice","name","reducers","startLoading","state","hasError","action","payload","getPostsSuccess","getPostsInitial","getMorePosts","setIndex","noHasMore","getPostSuccess","getRecentPostsSuccess","reducer","actions","getAllPosts","response","get","data","params","results","length","maxLength","getPost","title","console","getRecentPosts"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n// utils\nimport axios from '../../utils/axios';\n//\nimport { dispatch } from '../store';\n\n// ----------------------------------------------------------------------\n\nconst initialState = {\n  isLoading: false,\n  error: null,\n  posts: [],\n  post: null,\n  recentPosts: [],\n  hasMore: true,\n  index: 0,\n  step: 11,\n};\n\nconst slice = createSlice({\n  name: 'blog',\n  initialState,\n  reducers: {\n    // START LOADING\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    // HAS ERROR\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // GET POSTS\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n\n    // GET POST INFINITE\n    getPostsInitial(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n\n    getMorePosts(state) {\n      const setIndex = state.index + state.step;\n      state.index = setIndex;\n    },\n\n    noHasMore(state) {\n      state.hasMore = false;\n    },\n\n    // GET POST\n    getPostSuccess(state, action) {\n      state.isLoading = false;\n      state.post = action.payload;\n    },\n\n    // GET RECENT POST\n    getRecentPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.recentPosts = action.payload;\n    },\n  },\n});\n\n// Reducer\nexport default slice.reducer;\n\n// Actions\nexport const { getMorePosts } = slice.actions;\n\n// ----------------------------------------------------------------------\n\nexport function getAllPosts() {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/api/blog/posts/all');\n      dispatch(slice.actions.getPostsSuccess(response.data.posts));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function getPostsInitial(index, step) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/api/blog/posts', {\n        params: { index, step },\n      });\n      const results = response.data.results.length;\n      const { maxLength } = response.data;\n\n      dispatch(slice.actions.getPostsInitial(response.data.results));\n\n      if (results >= maxLength) {\n        dispatch(slice.actions.noHasMore());\n      }\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function getPost(title) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/api/blog/post', {\n        params: { title },\n      });\n      dispatch(slice.actions.getPostSuccess(response.data.post));\n    } catch (error) {\n      console.error(error);\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function getRecentPosts(title) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/api/blog/posts/recent', {\n        params: { title },\n      });\n\n      dispatch(slice.actions.getRecentPostsSuccess(response.data.recentPosts));\n    } catch (error) {\n      console.error(error);\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}