{"ast":null,"code":"/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  var regex = hljs.regex; // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n\n  var C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  var FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + regex.optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE) + ')';\n  var TYPES = {\n    className: 'type',\n    variants: [{\n      begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n    }, {\n      match: /\\batomic_[a-z]{3,6}\\b/\n    }]\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword: 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'string'\n    }), {\n      className: 'string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  var FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  var C_KEYWORDS = [\"asm\", \"auto\", \"break\", \"case\", \"continue\", \"default\", \"do\", \"else\", \"enum\", \"extern\", \"for\", \"fortran\", \"goto\", \"if\", \"inline\", \"register\", \"restrict\", \"return\", \"sizeof\", \"struct\", \"switch\", \"typedef\", \"union\", \"volatile\", \"while\", \"_Alignas\", \"_Alignof\", \"_Atomic\", \"_Generic\", \"_Noreturn\", \"_Static_assert\", \"_Thread_local\", // aliases\n  \"alignas\", \"alignof\", \"noreturn\", \"static_assert\", \"thread_local\", // not a C keyword but is, for all intents and purposes, treated exactly like one.\n  \"_Pragma\"];\n  var C_TYPES = [\"float\", \"double\", \"signed\", \"unsigned\", \"int\", \"short\", \"long\", \"char\", \"void\", \"_Bool\", \"_Complex\", \"_Imaginary\", \"_Decimal32\", \"_Decimal64\", \"_Decimal128\", // modifiers\n  \"const\", \"static\", // aliases\n  \"complex\", \"bool\", \"imaginary\"];\n  var KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr'\n  };\n  var EXPRESSION_CONTAINS = [PREPROCESSOR, TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  var FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [hljs.inherit(TITLE_MODE, {\n        className: \"title.function\"\n      })],\n      relevance: 0\n    }, // allow for multiple declarations, e.g.:\n    // extern void f(int), g(char);\n    {\n      relevance: 0,\n      match: /,/\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, TYPES]\n      }]\n    }, TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: \"C\",\n    aliases: ['h'],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'enum class struct union',\n      end: /[{;:<>=]/,\n      contains: [{\n        beginKeywords: \"final class struct\"\n      }, hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;","map":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/highlight.js/lib/languages/c.js"],"names":["c","hljs","regex","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","optional","TYPES","className","variants","match","CHARACTER_ESCAPES","STRINGS","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","C_KEYWORDS","C_TYPES","KEYWORDS","type","literal","built_in","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","FUNCTION_DECLARATION","returnBegin","excludeEnd","name","aliases","disableAutodetect","exports","preprocessor","strings","module"],"mappings":"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","sourcesContent":["/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  const regex = hljs.regex;\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    regex.optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n\n\n  const TYPES = {\n    className: 'type',\n    variants: [\n      { begin: '\\\\b[a-z\\\\d_]*_t\\\\b' },\n      { match: /\\batomic_[a-z]{3,6}\\b/}\n    ]\n\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'string'\n      }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const C_KEYWORDS = [\n    \"asm\",\n    \"auto\",\n    \"break\",\n    \"case\",\n    \"continue\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"for\",\n    \"fortran\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"register\",\n    \"restrict\",\n    \"return\",\n    \"sizeof\",\n    \"struct\",\n    \"switch\",\n    \"typedef\",\n    \"union\",\n    \"volatile\",\n    \"while\",\n    \"_Alignas\",\n    \"_Alignof\",\n    \"_Atomic\",\n    \"_Generic\",\n    \"_Noreturn\",\n    \"_Static_assert\",\n    \"_Thread_local\",\n    // aliases\n    \"alignas\",\n    \"alignof\",\n    \"noreturn\",\n    \"static_assert\",\n    \"thread_local\",\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\n    \"_Pragma\"\n  ];\n\n  const C_TYPES = [\n    \"float\",\n    \"double\",\n    \"signed\",\n    \"unsigned\",\n    \"int\",\n    \"short\",\n    \"long\",\n    \"char\",\n    \"void\",\n    \"_Bool\",\n    \"_Complex\",\n    \"_Imaginary\",\n    \"_Decimal32\",\n    \"_Decimal64\",\n    \"_Decimal128\",\n    // modifiers\n    \"const\",\n    \"static\",\n    // aliases\n    \"complex\",\n    \"bool\",\n    \"imaginary\"\n  ];\n\n  const KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [\n          hljs.inherit(TITLE_MODE, { className: \"title.function\" })\n        ],\n        relevance: 0\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              TYPES\n            ]\n          }\n        ]\n      },\n      TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [\n      'h'\n    ],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n"]},"metadata":{},"sourceType":"script"}