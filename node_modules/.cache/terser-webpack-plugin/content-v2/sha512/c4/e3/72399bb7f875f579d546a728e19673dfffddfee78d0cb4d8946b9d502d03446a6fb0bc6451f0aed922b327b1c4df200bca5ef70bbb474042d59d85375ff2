{"code":"(this[\"webpackJsonp@minimal/minimal-kit-react\"]=this[\"webpackJsonp@minimal/minimal-kit-react\"]||[]).push([[163],{2718:function(e,t,n){\"use strict\";function r(e,t,n){if(null!==e)for(var i,o,l,a,u,g,f,s,c=0,m=0,y=e.type,h=\"FeatureCollection\"===y,k=\"Feature\"===y,p=h?e.features.length:1,P=0;P<p;P++){u=(s=!!(f=h?e.features[P].geometry:k?e.geometry:e)&&\"GeometryCollection\"===f.type)?f.geometries.length:1;for(var b=0;b<u;b++){var w=0,M=0;if(null!==(a=s?f.geometries[b]:f)){g=a.coordinates;var v=a.type;switch(c=!n||\"Polygon\"!==v&&\"MultiPolygon\"!==v?0:1,v){case null:break;case\"Point\":if(!1===t(g,m,P,w,M))return!1;m++,w++;break;case\"LineString\":case\"MultiPoint\":for(i=0;i<g.length;i++){if(!1===t(g[i],m,P,w,M))return!1;m++,\"MultiPoint\"===v&&w++}\"LineString\"===v&&w++;break;case\"Polygon\":case\"MultiLineString\":for(i=0;i<g.length;i++){for(o=0;o<g[i].length-c;o++){if(!1===t(g[i][o],m,P,w,M))return!1;m++}\"MultiLineString\"===v&&w++,\"Polygon\"===v&&M++}\"Polygon\"===v&&w++;break;case\"MultiPolygon\":for(i=0;i<g.length;i++){for(M=0,o=0;o<g[i].length;o++){for(l=0;l<g[i][o].length-c;l++){if(!1===t(g[i][o][l],m,P,w,M))return!1;m++}M++}w++}break;case\"GeometryCollection\":for(i=0;i<a.geometries.length;i++)if(!1===r(a.geometries[i],t,n))return!1;break;default:throw new Error(\"Unknown Geometry Type\")}}}}}function i(e){var t=[1/0,1/0,-1/0,-1/0];return r(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}i.default=i;t.a=i}}]);","name":"static/js/163.0bcd5c70.chunk.js","map":{"version":3,"sources":["static/js/163.0bcd5c70.chunk.js"],"names":["this","push","module","__webpack_exports__","__webpack_require__","coordEach","geojson","callback","excludeWrapCoord","j","k","l","geometry","stopG","coords","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","type","isFeatureCollection","isFeature","stop","features","length","featureIndex","geometries","geomIndex","multiFeatureIndex","geometryIndex","coordinates","geomType","Error","es_bbox","result","Infinity","coord"],"mappings":"CAACA,KAAK,0CAA4CA,KAAK,2CAA6C,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9G,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aAk2BA,SAASC,EAAUC,EAASC,EAAUC,GAEpC,GAAgB,OAAZF,EA2BJ,IA1BA,IAAIG,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGAC,EAFAC,EAAa,EACbC,EAAa,EAEbC,EAAOb,EAAQa,KACfC,EAA+B,sBAATD,EACtBE,EAAqB,YAATF,EACZG,EAAOF,EAAsBd,EAAQiB,SAASC,OAAS,EAalDC,EAAe,EAAGA,EAAeH,EAAMG,IAAgB,CAG9DZ,GADAG,KADAD,EAA0BK,EAAsBd,EAAQiB,SAASE,GAAcb,SAAWS,EAAYf,EAAQM,SAAWN,IACvC,uBAAjCS,EAAwBI,MAC1CJ,EAAwBW,WAAWF,OAAS,EAE3E,IAAK,IAAIG,EAAY,EAAGA,EAAYd,EAAOc,IAAa,CACtD,IAAIC,EAAoB,EACpBC,EAAgB,EAGpB,GAAiB,QAFjBjB,EAAWI,EAAuBD,EAAwBW,WAAWC,GAAaZ,GAElF,CACAD,EAASF,EAASkB,YAClB,IAAIC,EAAWnB,EAASO,KAGxB,OAFAF,GAAaT,GAAkC,YAAbuB,GAAuC,iBAAbA,EAAmC,EAAJ,EAEnFA,GACN,KAAK,KACH,MAEF,IAAK,QACH,IAAqF,IAAjFxB,EAASO,EAAQI,EAAYO,EAAcG,EAAmBC,GAA0B,OAAO,EACnGX,IACAU,IACA,MAEF,IAAK,aACL,IAAK,aACH,IAAKnB,EAAI,EAAGA,EAAIK,EAAOU,OAAQf,IAAK,CAClC,IAAwF,IAApFF,EAASO,EAAOL,GAAIS,EAAYO,EAAcG,EAAmBC,GAA0B,OAAO,EACtGX,IACiB,eAAba,GAA2BH,IAGhB,eAAbG,GAA2BH,IAC/B,MAEF,IAAK,UACL,IAAK,kBACH,IAAKnB,EAAI,EAAGA,EAAIK,EAAOU,OAAQf,IAAK,CAClC,IAAKC,EAAI,EAAGA,EAAII,EAAOL,GAAGe,OAASP,EAAYP,IAAK,CAClD,IAA2F,IAAvFH,EAASO,EAAOL,GAAGC,GAAIQ,EAAYO,EAAcG,EAAmBC,GAA0B,OAAO,EACzGX,IAGe,oBAAba,GAAgCH,IACnB,YAAbG,GAAwBF,IAGb,YAAbE,GAAwBH,IAC5B,MAEF,IAAK,eACH,IAAKnB,EAAI,EAAGA,EAAIK,EAAOU,OAAQf,IAAK,CAGlC,IAFAoB,EAAgB,EAEXnB,EAAI,EAAGA,EAAII,EAAOL,GAAGe,OAAQd,IAAK,CACrC,IAAKC,EAAI,EAAGA,EAAIG,EAAOL,GAAGC,GAAGc,OAASP,EAAYN,IAAK,CACrD,IAA8F,IAA1FJ,EAASO,EAAOL,GAAGC,GAAGC,GAAIO,EAAYO,EAAcG,EAAmBC,GAA0B,OAAO,EAC5GX,IAGFW,IAGFD,IAGF,MAEF,IAAK,qBACH,IAAKnB,EAAI,EAAGA,EAAIG,EAASc,WAAWF,OAAQf,IAC1C,IAAsE,IAAlEJ,EAAUO,EAASc,WAAWjB,GAAIF,EAAUC,GAA6B,OAAO,EAGtF,MAEF,QACE,MAAM,IAAIwB,MAAM,6BAkhC1B,SAASC,EAAQ3B,GACf,IAAI4B,EAAS,CAACC,EAAAA,EAAUA,EAAAA,GAAWA,EAAAA,GAAWA,EAAAA,GAkB9C,OAjBA9B,EAAUC,GAAS,SAAU8B,GACvBF,EAAO,GAAKE,EAAM,KACpBF,EAAO,GAAKE,EAAM,IAGhBF,EAAO,GAAKE,EAAM,KACpBF,EAAO,GAAKE,EAAM,IAGhBF,EAAO,GAAKE,EAAM,KACpBF,EAAO,GAAKE,EAAM,IAGhBF,EAAO,GAAKE,EAAM,KACpBF,EAAO,GAAKE,EAAM,OAGfF,EAGTD,EAAiB,QAAIA,EACiB9B,EAAuB,EAAI"},"input":"(this[\"webpackJsonp@minimal/minimal-kit-react\"] = this[\"webpackJsonp@minimal/minimal-kit-react\"] || []).push([[163],{\n\n/***/ 2718:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// CONCATENATED MODULE: ./node_modules/@turf/helpers/dist/es/index.js\n/**\n * @module helpers\n */\n\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nvar earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nvar factors = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: earthRadius / 111325,\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1000,\n  kilometres: earthRadius / 1000,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1000,\n  millimetres: earthRadius * 1000,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nvar unitsFactors = {\n  centimeters: 100,\n  centimetres: 100,\n  degrees: 1 / 111325,\n  feet: 3.28084,\n  inches: 39.37,\n  kilometers: 1 / 1000,\n  kilometres: 1 / 1000,\n  meters: 1,\n  metres: 1,\n  miles: 1 / 1609.344,\n  millimeters: 1000,\n  millimetres: 1000,\n  nauticalmiles: 1 / 1852,\n  radians: 1 / earthRadius,\n  yards: 1.0936133\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nvar areaFactors = {\n  acres: 0.000247105,\n  centimeters: 10000,\n  centimetres: 10000,\n  feet: 10.763910417,\n  hectares: 0.0001,\n  inches: 1550.003100006,\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  miles: 3.86e-7,\n  millimeters: 1000000,\n  millimetres: 1000000,\n  yards: 1.195990046\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\n\nfunction es_feature(geom, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var feat = {\n    type: \"Feature\"\n  };\n\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\n\nfunction es_geometry(type, coordinates, _options) {\n  if (_options === void 0) {\n    _options = {};\n  }\n\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\n\nfunction point(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n\n  var geom = {\n    type: \"Point\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\n\nfunction points(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return point(coords, properties);\n  }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\n\nfunction polygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n    var ring = coordinates_1[_i];\n\n    if (ring.length < 4) {\n      throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n    }\n\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n\n  var geom = {\n    type: \"Polygon\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\n\nfunction polygons(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return polygon(coords, properties);\n  }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\n\nfunction lineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n\n  var geom = {\n    type: \"LineString\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\n\nfunction lineStrings(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return lineString(coords, properties);\n  }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\n\nfunction featureCollection(features, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var fc = {\n    type: \"FeatureCollection\"\n  };\n\n  if (options.id) {\n    fc.id = options.id;\n  }\n\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n\n  fc.features = features;\n  return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\n\nfunction multiLineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiLineString\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\n\nfunction multiPoint(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPoint\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\n\nfunction multiPolygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPolygon\",\n    coordinates: coordinates\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\n\nfunction geometryCollection(geometries, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"GeometryCollection\",\n    geometries: geometries\n  };\n  return es_feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\n\nfunction round(num, precision) {\n  if (precision === void 0) {\n    precision = 0;\n  }\n\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\n\nfunction radiansToLength(radians, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\n\nfunction lengthToRadians(distance, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\n\nfunction lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\n\nfunction bearingToAzimuth(bearing) {\n  var angle = bearing % 360;\n\n  if (angle < 0) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\n\nfunction radiansToDegrees(radians) {\n  var degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\n\nfunction degreesToRadians(degrees) {\n  var radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\n\nfunction convertLength(length, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"kilometers\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\n\nfunction convertArea(area, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"meters\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n\n  var startFactor = areaFactors[originalUnit];\n\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n\n  var finalFactor = areaFactors[finalUnit];\n\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n\n  return area / startFactor * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\n\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\n\nfunction isObject(input) {\n  return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\n\nfunction validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n\n  bbox.forEach(function (num) {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\n\nfunction validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\n// CONCATENATED MODULE: ./node_modules/@turf/meta/dist/es/index.js\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\n\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n      k,\n      l,\n      geometry,\n      stopG,\n      coords,\n      geometryMaybeCollection,\n      wrapShrink = 0,\n      coordIndex = 0,\n      isGeometryCollection,\n      type = geojson.type,\n      isFeatureCollection = type === \"FeatureCollection\",\n      isFeature = type === \"Feature\",\n      stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry\n\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === \"Polygon\" || geomType === \"MultiPolygon\") ? 1 : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n\n        case \"Point\":\n          if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n              coordIndex++;\n            }\n\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n              }\n\n              geometryIndex++;\n            }\n\n            multiFeatureIndex++;\n          }\n\n          break;\n\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\n\n\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n  }, excludeWrapCoord);\n  return previousValue;\n}\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\n\n\nfunction propEach(geojson, callback) {\n  var i;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n\n      break;\n\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\n\n\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\n\n\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\n\n\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\n\n\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\n\n\nfunction geomEach(geojson, callback) {\n  var i,\n      j,\n      g,\n      geometry,\n      stopG,\n      geometryMaybeCollection,\n      isGeometryCollection,\n      featureProperties,\n      featureBBox,\n      featureId,\n      featureIndex = 0,\n      isFeatureCollection = geojson.type === \"FeatureCollection\",\n      isFeature = geojson.type === \"Feature\",\n      stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;\n    featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry\n\n      if (geometry === null) {\n        if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n        continue;\n      }\n\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n          {\n            if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            break;\n          }\n\n        case \"GeometryCollection\":\n          {\n            for (j = 0; j < geometry.geometries.length; j++) {\n              if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n            }\n\n            break;\n          }\n\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    } // Only increase `featureIndex` per each feature\n\n\n    featureIndex++;\n  }\n}\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\n\n\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n  });\n  return previousValue;\n}\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\n\n\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (callback(es_feature(geometry, properties, {\n          bbox: bbox,\n          id: id\n        }), featureIndex, 0) === false) return false;\n        return;\n    }\n\n    var geomType; // Callback for multi-geometry\n\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      if (callback(es_feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n    }\n  });\n}\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\n\n\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n    if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n  });\n  return previousValue;\n}\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\n\n\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0; // Exclude null Geometries\n\n    if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return; // Generate 2-vertex line segments\n\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n      // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n      if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n        previousCoords = currentCoord;\n        previousFeatureIndex = featureIndex;\n        previousMultiIndex = multiPartIndexCoord;\n        prevGeomIndex = geometryIndex;\n        segmentIndex = 0;\n        return;\n      }\n\n      var currentSegment = lineString([previousCoords, currentCoord], feature.properties);\n      if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n      segmentIndex++;\n      previousCoords = currentCoord;\n    }) === false) return false;\n  });\n}\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\n\n\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n    if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n    started = true;\n  });\n  return previousValue;\n}\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\n\n\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n        break;\n\n      case \"Polygon\":\n        for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n          if (callback(lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n        }\n\n        break;\n    }\n  });\n}\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\n\n\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n    if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n  });\n  return previousValue;\n}\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\n\n\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex\n\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n\n    default:\n      throw new Error(\"geojson is invalid\");\n  } // Find SegmentIndex\n\n\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n  }\n\n  throw new Error(\"geojson is invalid\");\n}\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\n\n\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0; // Find FeatureIndex\n\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n\n    default:\n      throw new Error(\"geojson is invalid\");\n  } // Find Coord Index\n\n\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n  }\n\n  throw new Error(\"geojson is invalid\");\n}\n\n\n// CONCATENATED MODULE: ./node_modules/@turf/bbox/dist/es/index.js\n\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\n\nfunction es_bbox(geojson) {\n  var result = [Infinity, Infinity, -Infinity, -Infinity];\n  coordEach(geojson, function (coord) {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\n\nes_bbox[\"default\"] = es_bbox;\n/* harmony default export */ var es = __webpack_exports__[\"a\"] = (es_bbox);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["D:/Projects/Cdss apps/Final version/admin/node_modules/@turf/helpers/dist/es/index.js","D:/Projects/Cdss apps/Final version/admin/node_modules/@turf/meta/dist/es/index.js","D:/Projects/Cdss apps/Final version/admin/node_modules/@turf/bbox/dist/es/index.js"],"names":["earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","feature","geom","properties","options","feat","type","id","bbox","geometry","coordinates","_options","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","Error","Array","isArray","length","isNumber","points","featureCollection","map","coords","_i","coordinates_1","ring","j","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isNaN","isObject","input","constructor","Object","validateBBox","forEach","validateId","indexOf","coordEach","geojson","callback","excludeWrapCoord","k","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","undefined","propEach","i","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","coord","push","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","coordinate","flattenReduce","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","result","Infinity"],"mappings":"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AAO,KAAP;AACF;AACD;;AACD,aAAK,oBAAL;AAA2B;AACzB,iBAAK/E,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGrB,QAAQ,CAAC2B,UAAT,CAAoBf,MAApC,EAA4CS,CAAC,EAA7C,EAAiD;AAC/C,kBACE2C,QAAQ,CACNhE,QAAQ,CAAC2B,UAAT,CAAoBN,CAApB,CADM,EAENuD,YAFM,EAGNsB,iBAHM,EAINC,WAJM,EAKNC,SALM,CAAR,KAMM,KAPR,EASE,OAAO,KAAP;AACH;;AACD;AACD;;AACD;AACE,gBAAM,IAAI3F,KAAJ,CAAU,uBAAV,CAAN;AAnCJ;AAqCD,KApFwB,CAqFzB;;;AACAmE,gBAAY;AACb;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,UAAT,CAAoBtC,OAApB,EAA6BC,QAA7B,EAAuCkB,YAAvC,EAAqD;AACnD,MAAIC,aAAa,GAAGD,YAApB;AACAc,UAAQ,CACNjC,OADM,EAEN,UACEuC,eADF,EAEE1B,YAFF,EAGEsB,iBAHF,EAIEC,WAJF,EAKEC,SALF,EAME;AACA,QAAIxB,YAAY,KAAK,CAAjB,IAAsBM,YAAY,KAAKG,SAA3C,EACEF,aAAa,GAAGmB,eAAhB,CADF,KAGEnB,aAAa,GAAGnB,QAAQ,CACtBmB,aADsB,EAEtBmB,eAFsB,EAGtB1B,YAHsB,EAItBsB,iBAJsB,EAKtBC,WALsB,EAMtBC,SANsB,CAAxB;AAQH,GApBK,CAAR;AAsBA,SAAOjB,aAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,W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","file":"x","sourcesContent":["/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { coordEach } from \"@turf/meta\";\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexport default bbox;\n"]}}